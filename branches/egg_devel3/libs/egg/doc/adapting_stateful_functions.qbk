[/
Boost.Egg

Copyright Shunsuke Sogame 2007-2008.
Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE_1_0.txt or copy at
http://www.boost.org/LICENSE_1_0.txt)
]




[section Adapting stateful functions]





[section Static initialization of stateful functions]

[heading description]
For some reason, you need __STATICALLY_INITIALIZED__ "stateful" functions adapted by __EGG_FUNCTION_ADAPTORS__.
As you know, the initializer of __EGG_STATIC__ must be the empty double braces `{{}}`.
How can we pass "states" to __EGG_FUNCTION_ADAPTORS__? We need "ugly" macros.


[heading Notation]
* `adapt` is one of the name of __EGG_FUNCTION_ADAPTORS__ which supports __STATIC_INITIALIZATION__.
* `ADAPT` is the uppercase tokens of `adapt`.
* `B_` is a "base" __FUNCTION_OBJECT__ type passed to `adapt`.
* `A_` is an "adapted" __FUNCTION_OBJECT__ type from `B_` by `adapt`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`BOOST_EGG_%%ADAPT%%_L init BOOST_EGG_%%ADAPT%%_R`]
        [A braced initializer of `A_` object]
    ]
    [
        [`BOOST_EGG_%%ADAPT(init_)`]
        [`BOOST_EGG_%%ADAPT%%_L init_ BOOST_EGG_%%ADAPT%%_R`]
    ]
    [
        [`BOOST_EGG_COMPOSE(f, g)`]
        [`BOOST_EGG_COMPOSE_L f, g BOOST_EGG_COMPOSE_R`]
    ]
]

[heading Preconditions]
* `B b_ = init;` is a valid expression.
* `init_` contains no commas and macro recursions.
[/ * __PRECONDITION_AS_IS__ ]

[heading Invariants]
* `A_` is __POD__ if and only if `B_` is __POD__.
* `A_` is __DEFAULT_CONSTRUCTIBLE__ if and only if `B_` is __DEFAULT_CONSTRUCTIBLE__.
* `A_` is __COPY_ASSIGNABLE__ if and only if `B_` is __COPY_ASSIGNABLE__.
* A non-local `A_` object with __STATIC_STORAGE_DURATION__ is __STATICALLY_INITIALIZED__
  if `B_` is __POD__ and the expression passed to the macro is a /constant expression/.

[heading Example]
[import ../example/adapting_stateful_functions.cpp]
[code_example_adapting_stateful_functions]

[heading See also]
* __EGG_FUNCTION_ADAPTORS__

[endsect]




[endsect]
