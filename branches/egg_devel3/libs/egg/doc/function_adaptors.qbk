[/
Boost.Egg

Copyright Shunsuke Sogame 2007-2008.
Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE_1_0.txt or copy at
http://www.boost.org/LICENSE_1_0.txt)
]




[section Function Adaptors]

A Function Adaptor is a higher-order function that takes a "base" __FUNCTION_OBJECT__
and returns an "adapted" __FUNCTION_OBJECT__.
An adapted __FUNCTION_OBJECT__ is:

* __POD__ if and only if its "base" __FUNCTION_OBJECT__ is __POD__.
* a model of __CONCEPT_MAJOR_FUNCTION_OBJECT__.
* able to be __STATICALLY_INITIALIZED__ using __EGG_STATIC__ unless otherwise specified.

A Function Adaptor supports, if possible, the three initialization forms:
[import ../example/function_adaptors.cpp]
[code_example_function_adaptors]

In namespace scope, __STATIC_INITIALIZATION__ is highly recommended.
For details about adapting "stateful" functions using macros, see __EGG_STATEFUL_STATIC_INITIALIZATION__.

[important A "base" __FUNCTION_OBJECT__ in __EGG_STATIC__ must be __DEFAULT_CONSTRUCTIBLE__
         and a default-constructed one is callable. In other words, a "base" must be "stateless".
         It implies that you can't use any /function pointer/ as a "base".
         If you want to pass a /function pointer/, see __EGG_STATEFUL_STATIC_INITIALIZATION__.
         Also note that a __CONCEPT_STATIC_FUNCTION_OBJECT__ type is guaranteed to work with __EGG_STATIC__. ]




[section ambiN]

[heading Description]
The `ambi` family helps you to make __CONCEPT_AMBI_FUNCTION_OBJECT__.

[heading Header]
* `<boost/egg/ambi.hpp>`

[heading Model of]
* __CONCEPT_STATIC_FUNCTION_OBJECT__

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`X_ambi%%N<__Bytag = __ud>`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_ambi%%N< __Bytag>()(__pfo)`]
        [An __CONCEPT_AMBI_FUNCTION_OBJECT__]
    ]
    [
        [`o|X_ambi%%N< __Bytag>()(__pfo)(a1,...,aN)`]
        [`__const(__pfo)(__fwd_arg_list([o]++a, __Bytag))`]
    ]
    [
        [`ambi%%N`]
        [`X_ambi%%N<>()`]
    ]
]

[heading Preconditions]
* `N <= __MAX_PACK_ARITY-1`.
* If `__Bytag` is `by_value`, `__typeof(aI)` is __COPY_CONSTRUCTIBLE__.
[/ * __PRECONDITION_AS_IS__ ]

[heading Example]
[import ../example/ambi.cpp]
[code_example_ambi]

[heading See also]
* __EGG_PIPABLE__

[endsect]




[section compose]

[heading Description]
`compose` is a Function Adaptor for function composition.

[heading Header]
* `<boost/egg/compose.hpp>`

[heading Model of]
* __CONCEPT_STATIC_FUNCTION_OBJECT__

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`X_compose<R0 = __ud, __Stg = __ud>`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_compose<R0, __Stg>()(__pfo1, __pfo2)(a1,...,aN)`]
        [`__const(__pfo1)(__const(__pfo2)(__fwd_arg_list(a, __Stg)))`]
    ]
    [
        [`compose`]
        [`X_compose<>()`]
    ]
]

[heading Preconditions]
* `0 <= N && N <= __MAX_PACK_ARITY`.
* `__decltype_r0(R0, __pfo1(__pfo2()))` is a valid expression which specifies the nullary return type.
[/ * __PRECONDITION_AS_IS__ ]

[important The last precondition means that `X_compose<R0, __Stg>()(__pfo1, __pfo2)` is NOT nullary-callable if `R0` is `__ud`. ]

[heading Example]
[import ../example/compose.cpp]
[code_example_compose]

[heading See also]
* __EGG_DETERMINING_NULLARY_RETURN_TYPES__
* __EGG_INFIX__
* __EGG_NEST__

[endsect]




[section curryN]

[heading Description]
The `curry` family turn __FUNCTION_OBJECT__\ s into curried ones.

[heading Header]
* `<boost/egg/curry.hpp>`

[heading Model of]
* __CONCEPT_STATIC_FUNCTION_OBJECT__

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`curry%%N(__pfo)(a1)...(aN)`]
        [`__const(d)(__fwd_arg_list([a1,...,a(N-1)], by_value)++__fwd_arg_list([aN], by_perfect))`]
    ]
]

[heading Preconditions]
* `N` is the arity of `__pfo` such that `2 <= N && N <= BOOST_EGG_MAX_ARITY`.
* For all `I` such that `1 <= I && I <= N-1`, `__typeof(aI)` is __COPY_CONSTRUCTIBLE__.
[/ * __PRECONDITION_AS_IS__ ]

[note Arguments except for the last one are captured by-copy.
      When you need to capture by-reference, pass arguments using `boost::ref`. ]

[heading Example]
[import ../example/curry.cpp]
[code_example_curry]

[heading See also]
* __CURRYING__
* __EGG_UNCURRY__
* __EGG_NEST__
* __BOOST_REF__

[endsect]




[section uncurry]

[heading Description]
`uncurry` reverses `curry`.

[heading Header]
* `<boost/egg/uncurry.hpp>`

[heading Model of]
* __CONCEPT_STATIC_FUNCTION_OBJECT__

[heading Notation]
* `parens(b1,...,bN)` is `(b1)(b2)...(bN)`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`X_uncurry<__Stg = __ud>`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_uncurry<__Stg>()(__pfo)(a1,...,aN)`]
        [`__const(d)(parens(__fwd_arg_list(a, __Stg)))`]
    ]
    [
        [`uncurry`]
        [`X_uncurry<>()`]
    ]
]

[heading Preconditions]
* `2 <= N && N <= BOOST_EGG_MAX_ARITY`.
* `__PFo d = init;` is a valid expression.
[/ * __PRECONDITION_AS_IS__ ]

[heading Example]
[import ../example/uncurry.cpp]
[code_example_uncurry]

[heading See also]
* [@http://en.wikipedia.org/wiki/Currying Currying]
* __EGG_CURRY__

[endsect]




[section fix]

[heading Description]
`fix` is __FIXED_POINT_COMBINATOR__, which enables you to write recursive functions on the fly.

[note `fix` doesn't support __STATIC_INITIALIZATION__. ]

[heading Header]
* `<boost/egg/fix.hpp>`

[heading Model of]
* __CONCEPT_STATIC_FUNCTION_OBJECT__

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`fix(__pfo)(a1)`]
        [`__const(__pfo)(fix(__pfo))(__fwd_arg_list([a1], by_perfect))`]
    ]
    [
        [`fix2`]
        [__CONCEPT_STATIC__ `compose(fix, curry2)`]
    ]
]

[note `fix(__pfo)` that is passed to `__pfo` as the first argument represents `__pfo` itself.
      Also notice that `__pfo` must be curried in advance. ]

[heading Example]
[import ../example/fix.cpp]
[code_example_fix]

[heading See also]
* __FIXED_POINT_COMBINATOR__
* [@http://citeseer.ist.psu.edu/51062.html Using FIX to Handle Errors Without Exceptions, and Other Programming Tricks]
* __EGG_CURRY__
* __EGG_MEMOIZE__
* __EGG_COMPOSE__

[endsect]




[/

[section flip]

[heading Description]
`flip` flips the order of arguments.

[heading Header]
* `<boost/egg/flip.hpp>`

[heading Model of]
* __CONCEPT_STATIC_FUNCTION_OBJECT__

[heading Notation]
* `fc(d, __Stg)` is an object of `result_of_flip<__typeof(d), __Stg>::type` initialized by `d`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`result_of_flip<__PFo, __Stg = __ud>::type`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`BOOST_EGG_FLIP_L init BOOST_EGG_FLIP_R`]
        [A braced initializer of `result_of_flip<__PFo,...>::type`]
    ]
    [
        [`BOOST_EGG_FLIP(I)`]
        [`BOOST_EGG_FLIP_L I BOOST_EGG_FLIP_R`]
    ]
    [
        [`fc(d, __Stg)(a1, a2)`]
        [`__const(d)(__fwd_arg_list([a2, a1], __Stg))`]
    ]
    [
        [`X_flip<__Stg = __ud>`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_flip<__Stg>()(d)`]
        [`fc(d, __ud)`]
    ]
    [
        [`flip`]
        [`X_flip<>()`]
    ]
]

[heading Preconditions]
* `__PFo d = init;` is a valid expression.
[/ * __PRECONDITION_AS_IS__ ]

[heading Invariants]
* `result_of_flip<__PFo,...>::type` is __POD__ if and only if `__PFo` is __POD__.

[heading Example]
[import ../example/flip.cpp]
[code_example_flip]

[/
[heading See also]
* ...
]

[endsect]

]




[/

[section free]

[heading Description]
`free` is akin to `boost::mem_fn`, which turns member pointers into __FUNCTION_OBJECT__.

[heading Header]
* `<boost/egg/free.hpp>`

[heading Model of]
* __CONCEPT_STATIC_FUNCTION_OBJECT__

[heading Notation]
* `fc(p)` is an object of `result_of_free<__typeof(p)>::type` initialized by `p`.
* `C` is class type which `__typeof(p)` belongs to.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`result_of_free<MPtr>::type`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`BOOST_EGG_FREE_L init BOOST_EGG_FREE_R`]
        [A braced initializer of `result_of_free<MPtr>::type`]
    ]
    [
        [`BOOST_EGG_FREE(P)`]
        [`BOOST_EGG_FREE_L P BOOST_EGG_FREE_R`]
    ]
    [
        [`fc(p)(a1,...,aN)`]
        [`(a1.*p)(a2,...,aN)`]
    ]
    [
        [`fc(p)(b1,...,bN)`]
        [`(get_pointer(b1)->*p)(b2,...,bN)`]
    ]
    [
        [`fc(p)(a1)`]
        [`(a1.*p)`]
    ]
    [
        [`fc(p)(b1)`]
        [`(get_pointer(b1)->*p)`]
    ]
    [
        [`free(p)`]
        [`fc(p)`]
    ]
]

[heading Preconditions]
* `1 <= N && N <= BOOST_EGG_MAX_LINEAR_ARITY`.
* `__PFo p = init;` is a valid expression.
* `MPtr` is member pointer type.
* `a1` is convertible to `C const&`.
* `b1` is not convertible to `C const&`.
[/ * __PRECONDITION_AS_IS__ ]

[heading Invariants]
* `result_of_free<MPtr>::type` is __POD__.

[heading Example]
[import ../example/free.cpp]
[code_example_free]

[/
[heading See also]
* ...
]

[endsect]

]




[section fuse]

[heading Description]
`fuse` converts a __FUNCTION_OBJECT__ into a unary __FUNCTION_OBJECT__ which takes a __FUSION_FORWARD_SEQUENCE__.

[heading Header]
* `<boost/egg/fuse.hpp>`

[heading Model of]
* __CONCEPT_STATIC_FUNCTION_OBJECT__

[heading Notation]
* `t_` is `__fwd_arg_list(t, by_perfect)`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`fuse(__pfo)(t)`]
        [`__const(__pfo)(egg::get_c<0>(t_),...,egg::get_c<N-1>(t_))`]
    ]
]

[heading Preconditions]
* `1 <= N && N <= __MAX_PACK_ARITY`.
[/ * __PRECONDITION_AS_IS__ ]

[heading Example]
[import ../example/fuse.cpp]
[code_example_fuse]

[heading See also]
* __FUSION_FUNCTIONAL__
* __VARIADIC_TEMPLATES__
* __EGG_GET__
* __EGG_UNFUSE__

[endsect]




[section unfuse]

[heading Description]
`unfuse` reverses `fuse`.

[heading Header]
* `<boost/egg/unfuse.hpp>`

[heading Model of]
* __CONCEPT_STATIC_FUNCTION_OBJECT__

[heading Notation]
* `pack_` is `X_pack<__Stg>()` if `Pack` is `__ud`, `__mpl::apply<Pack, __Stg>::type()` otherwise.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`X_unfuse<R0 = __ud, Pack = __ud, __Stg = __ud>`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_unfuse<R0, Pack, __Stg>()(__pfo)(a1,...,aN)`]
        [`__const(__pfo)( pack_(__fwd_arg_list(a, __Stg)) )`]
    ]
    [
        [`unfuse`]
        [`X_unfuse<>()`]
    ]
]

[heading Preconditions]
* `__decltype_r0(R0, __pfo(pack_())` is a valid expression which specifies the nullary return type.
* If `Pack` isn't `__ud`, `__mpl::apply<Pack, by_ref>::type` is a valid expression.
[/ * __PRECONDITION_AS_IS__ ]

[heading Example]
[import ../example/unfuse.cpp]
[code_example_unfuse]

[heading See also]
* __EGG_DETERMINING_NULLARY_RETURN_TYPES__
* __FUSION_FUNCTIONAL__
* __VARIADIC_TEMPLATES__
* __EGG_FUSE__
* __EGG_VARIADIC__
* __EGG_PACK__
[/ * __EGG_CONSTRUCT_UNFUSED1__ ]

[endsect]




[section indirect]

[heading Description]
`indirect` takes a pointer-like object then calls it after dereferencing.

[heading Header]
* `<boost/egg/indirect.hpp>`

[heading Model of]
* __CONCEPT_STATIC_FUNCTION_OBJECT__

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`X_indirect<__Stg = __ud>`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_indirect<__Stg>()(p)(a1,...,aN)`]
        [`(*p)(__fwd_arg_list(a, __Stg))`]
    ]
    [
        [`indirect`]
        [`X_indirect<>()`]
    ]
]

[heading Preconditions]
* `boost::pointee<__typeof(p)>::type` is a __POLYMORPHIC_FUNCTION_OBJECT__ type.
[/ * __PRECONDITION_AS_IS__ ]

[heading Example]
[import ../example/indirect.cpp]
[code_example_indirect]

[heading See also]
* __EGG_STATIC__
* __BOOST_INDIRECT_ITERATOR__

[endsect]




[section lazy]

[heading Description]
__BOOST_PHOENIX__ is able to make a lambda expression without a "bind function".
`lazy` turns a bindable __FUNCTION_OBJECT__ into such one which can be used with __BOOST_LAMBDA__.

[heading Header]
* `<boost/egg/lazy.hpp>`

[heading Model of]
* __CONCEPT_STATIC_FUNCTION_OBJECT__

[heading Notation]
* `bind_` is `boost::lambda::bind` if `Bind` is `__ud`, `Bind()` otherwise.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`X_lazy<Bind = __ud>`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_lazy<Bind>()(f)(a1,...,aN)`]
        [__POLYMORPHIC__ `bind_(__fwd_arg_list([f]++a, by_value))`]
    ]
    [
        [`lazy`]
        [`X_lazy<>()`]
    ]
]

[/
[heading Preconditions]
[/ * __PRECONDITION_AS_IS__ ]
]

[tip When you provide a __EGG_LAZY__ __FUNCTION_OBJECT__, its "base" function also should be provided
     with a consistent naming convention, so that your clients can use it with __EGG_NEST__. ]

[heading Example]
[import ../example/lazy.cpp]
[code_example_lazy]

[heading See also]
* __EGG_NEST__
* __BOOST_PHOENIX__
* __BOOST_LAMBDA__

[endsect]




[section memoize]

[heading Description]
`memoize` stores the result of function for later reuse.

[note `memoize` doesn't support __STATIC_INITIALIZATION__. ]

[heading Header]
* `<boost/egg/memoize.hpp>`

[heading Model of]
* __CONCEPT_STATIC_FUNCTION_OBJECT__

[heading Notation]
* `fixed` is an unspecified unary __FUNCTION_OBJECT__ which represents `__pfo` itself.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`memoize(__pfo)`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__]
    ]
    [
        [`memoize(__pfo)(a1)`]
        [`__fwd_arg_list([__const(__pfo)(fixed, __fwd_arg_list([a1], by_value))], by_value)`]
    ]
]

[heading Preconditions]
* A __FUNCTION_OBJECT__ returned from `memoize(__pfo)` must always be called with the same type arguments.
* `__typeof(a1)` is __COPY_ASSIGNABLE__, __COPY_CONSTRUCTIBLE__ and __EQUALITY_COMPARABLE__.
* `__decltype(memoize(__pfo)(a1))` is __COPY_CONSTRUCTIBLE__.
[/ * __PRECONDITION_AS_IS__ ]

[heading Example]
[import ../example/memoize.cpp]
[code_example_memoize]

[heading See also]
* [@http://en.wikipedia.org/wiki/Y_combinator Fixed point combinator]
* __EGG_FIX__

[endsect]




[section mono]

[heading Description]
`mono` turns a __FUNCTION_OBJECT__ into a "monomorphic" one which contains no templates.

[heading Header]
* `<boost/egg/mono.hpp>`

[heading Notation]
* `N` is an arity of `Sig`.
* `R` is a return type of `Sig`.
* `ParamOf(Sig, I)` is an imaginary operator which returns an `I`th parameter type of `Sig`.
* `bI` is `boost::implicit_cast<ParamOf(Sig, I)>(aI)`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`X_mono<Sig>`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_mono<Sig>()(f)(a1,...,aN)`]
        [`__const(f)(b1,...,bN)`]
    ]
    [
        [`egg::mono<Sig>(f)`]
        [`X_mono<Sig>()(f)`]
    ]
]

[heading Preconditions]
* `f` is a __FUNCTION_OBJECT__.
* `Sig` is a /function type/.
* If `R` is `__ud`, `f` is a __POLYMORPHIC_FUNCTION_OBJECT__; `R` specifies a return type of `f`, otherwise.
[/ * __PRECONDITION_AS_IS__ ]

[heading Invariants]
* `X_mono<Sig>()(f)` is __SGI_ADAPTABLE__ if and only if `N` is `1` or `2`.

[heading Example]
[import ../example/mono.cpp]
[code_example_mono]

[heading See also]
* __SGI_ADAPTABLE_FUNCTION_OBJECT__
* __FUSION_FUNCTIONAL__
* __EGG_POLY__

[endsect]




[section nestN]

[heading Description]
`nestN` is generalization of __EGG_CURRY__ and __EGG_LAZY__, which enables you to write nested lambda expressions.
`N` represents nesting level of lambda expression.

[note `nestN` doesn't support __STATIC_INITIALIZATION__. ]

[heading Header]
* `<boost/egg/nest.hpp>`

[heading Model of]
* __CONCEPT_STATIC_FUNCTION_OBJECT__

[heading Notation]
* `bll_bind` is an imaginary __FUNCTION_OBJECT__ behaving as if it were `boost::lambda::bind`.
* `wrap_ref_` is an imaginary __FUNCTION_OBJECT__ behaving as if it were `boost::ref`.
* `unwrap_ref_` is an imaginary __FUNCTION_OBJECT__ which extracts a wrapped reference from `boost::reference_wrapper`.
* `bind_` is `bll_bind` if `Bind` is `__ud`, `Bind()` otherwise.
* `protect_` is `boost::lambda::protect` if `Protect` is `__ud`, `Protect()` otherwise.
* `LAZY(N)` is:
    * If `N == 0`, `X_identity<by_value>()`.
    * Else if `N == 1`, `X_lazy<__typeof(bind_)>()`.
    * Otherwise, `X_lazy<result_of_lazy<__typeof(bind_), result_of_lazy<__typeof(bind_),...N-1 times...>::type>::type>()`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`X_nest%%N<Bind = __ud>`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_nest%%N<Bind>()(f)(a1,...,aK)`]
        [__POLYMORPHIC__ `LAZY(N)(f)(__fwd_arg_list(a, by_value))`]
    ]
    [
        [`nest%%N(x)`]
        [`X_nest%%N<>()(x)`]
    ]
    [
        [`X_ref%%N<Bind = __ud>`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_ref%%N<Bind>()`]
        [__POLYMORPHIC__ `compose(X_nest%%N<Bind>()(unwrap_ref_), wrap_ref_)`]
    ]
    [
        [`ref%%N`]
        [__CONCEPT_STATIC__ `X_ref%%N<>()`]
    ]
    [
        [`XX_%%M%%_<Protect = __ud>`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`XX_%%M%%_<Protect>()(p)`]
        [__POLYMORPHIC__ `protect_(protect_(...M times...(p)...))`]
    ]
    [
        [`_%%M%%_`]
        [__CONCEPT_STATIC__ `XX_%%M%%_<>()`]
    ]
    [
        [`using BOOST_EGG_NEST_NAMES;`]
        [['using-declaration]\ s of `nest%%N`, `ref%%N`, `_%%M%%_`, and `boost::lambda::_%%K`.]
    ]
]

[heading Preconditions]
* `0 <= N && N <= BOOST_EGG_MAX_ARITY`.
* `0 <= M && M <= N-1`.
[/ * __PRECONDITION_AS_IS__ ]

[important For capturing by-reference in nested lambda expressions, `refN` must be used instead of `boost::ref`. ]

[heading Example]
[import ../example/nest.cpp]
[code_example_nest]

[heading See also]
* __EGG_COMPOSE__
* __EGG_CURRY__
* __EGG_LAZY__
* __BOOST_PHOENIX__
* __BOOST_LAMBDA__

[endsect]




[section perfect]

[heading Description]
`perfect` performs "perfect forwarding".

[heading Header]
* `<boost/egg/perfect.hpp>`

[heading Model of]
* __CONCEPT_STATIC_FUNCTION_OBJECT__

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`perfect(__pfo)(a1,...,aN)`]
        [`__const(__pfo)(__fwd_arg_list(a, by_perfect))`]
    ]
]

[heading Example]
[import ../example/perfect.cpp]
[code_example_perfect]

[heading See also]
* __EGG_RETURN__

[endsect]




[section pipable]

[heading Description]
`pipable` adapts __FUNCTION_OBJECT__ into __CONCEPT_PIPABLE_FUNCTION_OBJECT__.

[heading Header]
* `<boost/egg/pipable.hpp>`

[heading Model of]
* __CONCEPT_STATIC_FUNCTION_OBJECT__

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`X_pipable<__Stg = __ud, __Bytag = __ud>`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_pipable<__Stg, __Bytag>()(__pfo)`]
        [A __CONCEPT_PIPABLE_FUNCTION_OBJECT__]
    ]
    [
        [`o|X_pipable<__Stg, __Bytag>()(__pfo)(d, __Stg, __Bytag)(a1,...,aN)`]
        [`__const(d)(__fwd_arg_list([o], __Bytag)++_safe_arg_list(a, __Stg))`]
    ]
    [
        [`pipable`]
        [`X_pipable<>()`]
    ]
]

[heading Preconditions]
* `0 <= N && N+1 <= BOOST_EGG_MAX_LINEAR_ARITY`.
* `N+1 <= __MAX_PACK_ARITY`.
* If `__bytag_at(__Stg, N, I)` is `by_value`, `__typeof(aI)` is __COPY_CONSTRUCTIBLE__.
[/ * __PRECONDITION_AS_IS__ ]

[tip When you provide a __CONCEPT_PIPABLE_FUNCTION_OBJECT__, its "base" function also should be provided
     with a consistent naming convention, so that your clients can use it with `result_of`. ]

[heading Example]
[import ../example/pipable.cpp]
[code_example_pipable]

[heading See also]
* __EGG_AMBI__
* __EXTENSION_METHOD__

[endsect]




[section regular]

[heading Description]
A __BOOST_LAMBDA__ __FUNCTION_OBJECT__ is neither __DEFAULT_CONSTRUCTIBLE__ nor __COPY_ASSIGNABLE__.
An iterator holding such a __FUNCTION_OBJECT__ can't conform to even __INPUT_ITERATOR__.
`regular` converts it into comfortable one for iterators.

[note `regular` doesn't support __STATIC_INITIALIZATION__. ]

[heading Header]
* `<boost/egg/regular.hpp>`

[heading Model of]
* __CONCEPT_STATIC_FUNCTION_OBJECT__

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`regular(f)`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__ which is __DEFAULT_CONSTRUCTIBLE__ and __COPY_ASSIGNABLE__.]
    ]
    [
        [`regular(f)(a1,...,aN)`]
        [`__const(f)(__fwd_arg_list(a, by_perfect))`]
    ]
]

[heading Preconditions]
* `f` is a __BOOST_LAMBDA__ __FUNCTION_OBJECT__ or __POLYMORPHIC_FUNCTION_OBJECT__.
[/ * __PRECONDITION_AS_IS__ ]

[heading Example]
[import ../example/regular.cpp]
[code_example_regular]

[heading See also]
* __BOOST_ITERATOR__

[endsect]




[section return_]

[heading Description]
`return_` just calls __FUNCTION_OBJECT__, possibly with a modified return type.

[heading Header]
* `<boost/egg/return.hpp>`

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`X_return<R, __Stg = __ud>`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_return<R, __Stg>()(f)(a1,...,aN)`]
        [`__const(f)(__fwd_arg_list(a, __Stg))`]
    ]
    [
        [`egg::return_<R>`]
        [`X_return<R>()`]
    ]
]

[heading Preconditions]
* `f` is a __FUNCTION_OBJECT__.
* `f` is a __POLYMORPHIC_FUNCTION_OBJECT__ if `R` is `__ud`.
[/ * __PRECONDITION_AS_IS__ ]

[heading Example]
[import ../example/return.cpp]
[code_example_return]

[heading See also]
* __EGG_PERFECT__

[endsect]




[section tagged]

[heading Description]
`tagged` makes a new distinct __FUNCTION_OBJECT__ type. This emulates support for strong typedefs.

[heading Header]
* `<boost/egg/tagged.hpp>`

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`X_tagged<Tag, __Stg = __ud>`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_tagged<Tag, __Stg>()(__pfo)(a1,...,aN)`]
        [`__const(__pfo)(__fwd_arg_list(a, __Stg))`]
    ]
    [
        [`egg::tagged<Tag>(__pfo)`]
        [`X_tagged<Tag>()(__pfo)`]
    ]
    [
        [`tag_of<F>::type`]
        [`Tag` if `F` is an adapted type by `X_tagged<Tag, __Stg>()`, unspecified type otherwise.]
    ]
    [
        [`is_tagged_with<F, Tag>`]
        [`boost::is_same<tag_of<F>::type, Tag>`]
    ]
]

[heading Preconditions]
* `Tag` is any (possibly incomplete) type.
[/ * __PRECONDITION_AS_IS__ ]

[heading Invariants]
* `X_tagged<Tag1, __Stg>()(__pfo)` has the same type as `X_tagged<Tag2>()(__pfo)` if and only if `Tag1` is the same type as `Tag2`.

[heading Example]
[import ../example/tagged.cpp]
[code_example_tagged]

[heading See also]
* [@http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2141.html Strong Typedefs in C++09(Revisited)]

[endsect]




[section Stateful static initialization]

[heading description]
For some reason, you need __STATICALLY_INITIALIZED__ "stateful" functions adapted by __EGG_FUNCTION_ADAPTORS__.
As you know, the initializer of __EGG_STATIC__ must be the empty double braces `{{}}`.
How can we pass "states" to __EGG_FUNCTION_ADAPTORS__? We need "ugly" macros.

[heading Notation]
* `adapt` is one of the name of __EGG_FUNCTION_ADAPTORS__ which supports __STATIC_INITIALIZATION__.
* `ADAPT` is the uppercase tokens of `adapt`.
* `BI` is a "base" __FUNCTION_OBJECT__ type passed to `adapt`.
* `A_` is an "adapted" __FUNCTION_OBJECT__ type from `B_` by `adapt`.
* `wrap_` is an imaginary /aggregate/ type which is defined as `struct wrap_ { B1 b1;...BN bN; };`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`BOOST_EGG_%%ADAPT%%_L init BOOST_EGG_%%ADAPT%%_R`]
        [A braced initializer of `A_` object initialized by `init`_]
    ]
    [
        [`BOOST_EGG_%%ADAPT(init)`]
        [`BOOST_EGG_%%ADAPT%%_L init BOOST_EGG_%%ADAPT%%_R`]
    ]
]

[heading Preconditions]
* There is a `w_` such that `wrap_ w_ = {init};` is a valid expression.
[/ * __PRECONDITION_AS_IS__ ]

[heading Invariants]
* `A_` is __POD__ if and only if any `BI` is __POD__.
* `A_` is __DEFAULT_CONSTRUCTIBLE__ if and only if any `BI` is __DEFAULT_CONSTRUCTIBLE__.
* `A_` is __COPY_ASSIGNABLE__ if and only if any `BI` is __COPY_ASSIGNABLE__.
* A non-local `A_` object with __STATIC_STORAGE_DURATION__ is __STATICALLY_INITIALIZED__
  if any `BI` is __POD__ and any expression passed to the macro is a /constant expression/.

[heading Example]
[import ../example/stateful_static_initialization.cpp]
[code_example_stateful_static_initialization]

[heading See also]
* __EGG_FUNCTION_ADAPTORS__

[endsect]




[endsect]
