[/
Boost.Egg

Copyright Shunsuke Sogame 2007-2008.
Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE_1_0.txt or copy at
http://www.boost.org/LICENSE_1_0.txt)
]




[section Concepts]

[import ../example/concepts.cpp]




[section Lexically Typed Object]

[heading Description]
A __CONCEPT_LEXICALLY_TYPED_OBJECT__ is a named lvalue whose type is referable by using prefix `T_`.

[/
[heading Refinement of]
* ...
]

[heading Requirements]
For any __CONCEPT_LEXICALLY_TYPED_OBJECT__ `a` the following must be met:

* `a` is a named lvalue.
* If token `a` doesn't begin with a single underscore, `T_%%a` is `__typeof(a)`; `TT%%a` otherwise.

[heading Example]
[code_concepts_lexically_typed_object]

[/
[heading Models]
* ...
]

[heading See also]
* __CONCEPT_STATIC_FUNCTION_OBJECT__

[endsect]




[section Pipable Function Object]

[heading Description]
A __CONCEPT_PIPABLE_FUNCTION_OBJECT__ is a __FUNCTION_OBJECT__ which behaves as if it were a "pipe" using `operator|` and `operator|=`.

[tip According to Charles Brockman's research, "pip[_a]ble" is not misspelling of "pip[_ea]ble". ]

[heading Refinement of]
* __FUNCTION_OBJECT__

[heading Requirements]
In addition to the requirements defined in the refinements,
for any __CONCEPT_PIPABLE_FUNCTION_OBJECT__ `p` the following must be met:

* `x|p(x1,...,xN)` is a valid expresion if and only if `p(x1,...,xN)|=x` is a valid expression.
* `x|p(x1,...,xN)` and `p(x1,...,xN)|=x` have the same effects.
* If `N` is `0`, then `x|p()`, `x|p`, `p|=x`, and `p()|=x` are valid expressions which have the same effects.
* `operator|` works with left-to-right associativity.
* `operator|=` works with right-to-left associativity.

[heading Example]
[code_concepts_pipable_function_object]

[/
[heading Models]
* ...
]

[heading See also]
* __EXTENSION_METHOD__
* __CONCEPT_PIPABLE__
* __CONCEPT_AMBI_FUNCTION_OBJECT__

[endsect]




[section Ambi Function Object]

[heading Description]
An __CONCEPT_AMBI_FUNCTION_OBJECT__ is a __CONCEPT_PIPABLE_FUNCTION_OBJECT__ which can be used also as free function.

[tip "ambi" is short of "ambidextrous". ]

[heading Refinement of]
* __CONCEPT_PIPABLE_FUNCTION_OBJECT__

[heading Requirements]
In addition to the requirements defined in the refinements,
for any __CONCEPT_AMBI_FUNCTION_OBJECT__ `i` the following must be met:

* `x|i(x1,...,xN)` is a valid expression if and only if `i(x, x1,...,xN)` is a valid expression.
* `x|i(x1,...,xN)` and `i(x, x1,...,xN)` have the same effects.

[note A __CONCEPT_PIPABLE_FUNCTION_OBJECT__ can be overloaded with different arities, whereas __CONCEPT_AMBI_FUNCTION_OBJECT__ cannot.]

[heading Example]
[code_concepts_ambi_function_object]

[/
[heading Models]
* ...
]

[heading See also]
* __EGG_AMBI__
* __CONCEPT_PIPABLE_FUNCTION_OBJECT__

[endsect]




[section Major Function Object]

[heading Description]
A __CONCEPT_MAJOR_FUNCTION_OBJECT__ is a __POLYMORPHIC_FUNCTION_OBJECT__ which can be used with __BOOST_LAMBDA__.
Egg is a library which helps you define your own __CONCEPT_MAJOR_FUNCTION_OBJECT__.

[heading Refinement of]
* __POLYMORPHIC_FUNCTION_OBJECT__

[heading Requirements]
In addition to the requirements defined in the refinements,
for any __CONCEPT_MAJOR_FUNCTION_OBJECT__ `f` the following must be met:

* `f` can be used as the first argument of `boost::lambda::bind`.

[tip This concept can be implemented without depending on __BOOST_LAMBDA__ library. ]

[/
[heading Example]
...

[heading Models]
* ...
]

[heading See also]
* __BOOST_LAMBDA__
* __BOOST_RESULT_OF__

[endsect]




[/

[section Major Function Builder]

[heading Description]
A __EGG_MAJOR_FUNCTION_BUILDER__ is __MPL_METAFUNCTION__ which returns __POD__ __CONCEPT_MAJOR_FUNCTION_OBJECT__ type.

[heading Refinement of]
* __MPL_METAFUNCTION__

[heading Notation]
* `TOUPPER(x)` is a token that `x` is converted to uppercase.

[heading Requirements]
In addition to the requirements defined in the refinements,
for any __POD_FUNCTION_BUILDER__ `x` the following must be met:

* `x<A1,...,AN>::type` is __POD__ __CONCEPT_MAJOR_FUNCTION_OBJECT__ type.
* `x<A1,...,AN>::type` is __DEFAULT_CONSTRUCTIBLE__ and __COPY_ASSIGNABLE__.
* `BOOST_EGG_%%TOUPPER(x)()` is a (possibly braced) initializer to initialize `x<A1,...,AN>::type` object.
* Non-local object `x<A1,...,AN>::type` with __STATIC_STORAGE_DURATION__ is __STATICALLY_INITIALIZED__ if initialized using `BOOST_EGG_%%TOUPPER(x)()`.

[heading Example]
[code_concepts_pod_function_builder]

[/
[heading Models]
* ...
]

[heading See also]
* __CONCEPT_STATIC_FUNCTION_OBJECT__

[endsect]

]




[section Static Function Object]

[heading Description]
A __CONCEPT_STATIC_FUNCTION_OBJECT__ is a __CONCEPT_MAJOR_FUNCTION_OBJECT__ which is intended to replace normal functions.

[heading Refinement of]
* __CONCEPT_LEXICALLY_TYPED_OBJECT__
* __CONCEPT_MAJOR_FUNCTION_OBJECT__

[heading Requirements]
In addition to the requirements defined in the refinements,
for any __CONCEPT_STATIC_FUNCTION_OBJECT__ `f` the following must be met:

* `__typeof(f)` is __POD__ in C++03 (a /trivial type/ in C++0x).
* `__typeof(f)` is __DEFAULT_CONSTRUCTIBLE__ and __COPY_ASSIGNABLE__.
* `f` is __STATICALLY_INITIALIZED__.
* `boost::remove_reference<__decltype(f)>::type` is `__typeof(f) const`.
* If `boost::result_of<__typeof(f) const(a1,...,aN)>::type` is a valid expression,
  `boost::result_of<__typeof(f)(a1,...,aN)>::type` is a valid expression which is the same type.

[heading Example]
[code_concepts_static_function_object]

[/
[heading Models]
* ...
]

[heading See also]
* __BOOST_RESULT_OF__

[endsect]




[section Little Function]

[heading Description]
A __CONCEPT_LITTLE_FUNCTION__ type is a type which __EGG_FUNCTION_BUILDERS__ require.

[heading Refinement of]
* ...

[heading Requirements]
In addition to the requirements defined in the refinements,
for any __CONCEPT_LITTLE_FUNCTION__ type `L` the following must be met:

* `L` has a nested class template named `apply`, where `apply<...>::type` means return type of function calls.
* `L` has a const /member function/ named `call` whose return type is explicitly specified by the first template parameter.

[heading Example]
[code_concepts_little_function]

[/
[heading Models]
* ...
]

[heading See also]
* __EGG_FUNCTION_BUILDERS__
* __EGG_FORWARDING_STRATEGIES__

[endsect]




[import ../example/result_of_tutorial.cpp]

[section result_of tutorial]

[caution __BOOST_RESULT_OF__ document in boost.org is outdated.]

[heading How to call]

Lvalues are indicated by passing a reference type, rvalues are indicated by passing a non-reference type:
[code_result_of_tutorial1]

Thanks to this convention, you can easily write a "chain" of __BOOST_RESULT_OF__:
[code_result_of_tutorial2]

A /callable type/ can't be a /reference type/ but must be "const-correct",
meaning that you must add `const` to __CONST_QUALIFIED__ __FUNCTION_OBJECT__ type:
[code_result_of_tutorial3]

However, if a library guarantees the same behavior between __CONST_QUALIFIED__ type and
non-__CONST_QUALIFIED__ type (as __CONCEPT_STATIC_FUNCTION_OBJECT__ does so), you could omit `const`:
[code_result_of_tutorial4]

[heading Bugs]

* msvc-7.1 and msvc-8.0 doesn't work with __POD__ templates.
* A __CONST_QUALIFIED__ function pointer doesn't work.

These bugs can be worked around by `egg::result_of_` in `<boost/egg/result_of.hpp>`.
The first bug is fixed with Boost1.35.

[heading See also]
* __EGG_RESULT_OF__

[endsect]




[endsect]
