[/
Boost.Egg

Copyright Shunsuke Sogame 2007-2008.
Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE_1_0.txt or copy at
http://www.boost.org/LICENSE_1_0.txt)
]




[section Forwarding Strategies]

[import ../example/forwarding_strategies.cpp]

A Forwarding Strategy is a type which has three associated imaginary operators
`__bytag_at`, `__arg_list` and `__meta_arg_list`.
Egg predefines the fundamental strategy quartet: `by_perfect`, `by_ref`, `by_cref`, and `by_value`.
Also note Egg components use `by_perfect` when you omit or specify `boost::use_default` for strategy parameter.

This section uses the following notation.

[table
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`__arg(a)`]
        [`__typeof(a) const` if `a` is a rvalue; `boost::remove_reference<__decltype(a)>::type` otherwise.]
    ]
    [
        [`__ref(a)`]
        [`static_cast<__arg(a) &>(a)`]
    ]
    [
        [`__cref(a)`]
        [`static_cast<__arg(a) const &>(a)`]
    ]
    [
        [`__val(a)`]
        [/ implicit_cast means this is not direct-initialization but copy-initialization. ]
        [`const_cast<V &>(static_cast<V const &>(boost::implicit_cast<V>(a)))`]
    ]
    [
        [`__rval(a)`]
        [`boost::implicit_cast<V>(a)`]
    ]
]
, where `V` is `boost::remove_cv<boost::decay<__typeof(a)>::type>::type`.

[caution Under msvc-7.1, `a` in `__cref(a)` can't be function name.
         It is preferable to add a `&` then turn the function name into function pointer. ]




[section Argument list]

[heading Description]
Egg defines the following imaginary operators for its documentation.

[/
[heading Header]
* ...
]

[heading Notation]
* `K` is the length of `a`.
* `fwd_arg(a, __Stg, K, I)` is `__rval(aI)` if `__bytag_at(__Stg, K, I)` is `by_value`, `__arg_list(aI, __Stg)` otherwise.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`__bytag_at(__Stg, K, I)`]
        [See each section of `__Stg`.]
    ]
    [
        [`__arg_list(a, __Stg)`]
        [See each section of `__Stg`.]
    ]
    [
        [`__arg_list(a, __ud)`]
        [`__arg_list(a, by_perfect)`]
    ]
    [
        [`__meta_arg_list(a, __Stg)`]
        [See each section of `__Stg`.]
    ]
    [
        [`__meta_arg_list(a, __ud)`]
        [`__meta_arg_list(a, by_perfect)`]
    ]
    [
        [`__fwd_arg_list(a, __Stg)`]
        [`fwd_arg(a, __Stg, K, 0),...,fwd_arg(a, __Stg, K, K-1)`]
    ]
]

[heading Preconditions]
* __PRECONDITION_AS_IS__

[important `__arg_list` and `__fwd_arg_list` have slightly different semantics.
           Put simply, in the case of __EGG_FUNCTION_ADAPTORS__ with `by_value`,
           a "base" __FUNCTION_OBJECT__ too must take its arguments by value or const reference. ]

[/
[heading Example]
...
]

[heading See also]
* __FORWARDING_PROBLEM__

[endsect]




[section by_perfect]

[heading Description]
Egg performs "perfect forwarding" by default.

[heading Header]
* `<boost/egg/by_perfect.hpp>`

[heading Notation]
* `remove_cr(x)` is `boost::remove_const<boost::remove_reference<__decltype(x)>::type>::type`.
* `bI` is any object such that `remove_cr(bI)` is the same as `remove_cr(aI)`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`__bytag_at(by_perfect, K, I)`]
        [`by_perfect`]
    ]
    [
        [`__arg_list(a, by_perfect)`]
        [`__arg(a1),...,__arg(aK)`]
    ]
    [
        [`__meta_arg_list(a, by_perfect)`]
        [`__ref(a1),...,__ref(aK)`]
    ]
    [
        [`function<__Lit, by_perfect>`]
        [See __EGG_FUNCTION__.]
    ]
]

[heading Preconditions]
* `0 <= K && K <= BOOST_EGG_MAX_ARITY`.
* If `Expr(__arg_list(a, by_perfect))` is a precondition as valid expression, `Expr(__arg_list(b, by_perfect))` must be well-formed.
* If `Expr(__meta_arg_list(a, by_perfect))` is a precondition as valid expression, `Expr(__meta_arg_list(b, by_perfect))` must be well-formed.

[heading Example]
* `__meta_arg_list(a, by_perfect)` is `int,const int,int const` if `a` is `i,3,ci`, where `i` is a non-const lvalue and `ci` is a const lvalue.

[heading See also]
* __FORWARDING_PROBLEM__

[endsect]




[section by_ref]

[heading Description]
`by_ref` offers large arity, but can't take non-const rvalues.

[heading Header]
* `<boost/egg/by_ref.hpp>`

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`__bytag_at(by_ref, K, I)`]
        [`by_ref`]
    ]
    [
        [`__arg_list(a, by_ref)`]
        [`__arg(a1),...,__arg(aK)`]
    ]
    [
        [`__meta_arg_list(a, by_ref)`]
        [`__ref(a1),...,__ref(aK)`]
    ]
    [
        [`function<__Lit, by_ref>`]
        [See __EGG_FUNCTION__.]
    ]
]

[heading Preconditions]
* `0 <= K && K <= BOOST_EGG_MAX_LINEAR_ARITY`.
* `aI` is not a rvalue.

[heading Example]
* `__meta_arg_list(a, by_ref)` is `int,const int,int const` if `a` is `i,ci,ci`, where `i` is a non-const lvalue and `ci` is a const lvalue.

[heading See also]
* __FORWARDING_PROBLEM__

[endsect]




[section by_cref]

[heading Description]
`by_cref` takes arguments by /const reference/.

[heading Header]
* `<boost/egg/by_cref.hpp>`

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`__bytag_at(by_cref, K, I)`]
        [`by_cref`]
    ]
    [
        [`__arg_list(a, by_cref)`]
        [`__cref(a1),...,__cref(aK)`]
    ]
    [
        [`__meta_arg_list(a, by_cref)`]
        [`__typeof(a1) const,...,__typeof(aK) const`]
    ]
    [
        [`function<__Lit, by_cref>`]
        [See __EGG_FUNCTION__.]
    ]
]

[heading Preconditions]
* `0 <= K && K <= BOOST_EGG_MAX_LINEAR_ARITY`.

[heading Example]
* `__meta_arg_list(a, by_cref)` is `int const,const int,int const` if `a` is `i,ci,ci`, where `i` is a non-const lvalue and `ci` is a const lvalue.

[heading See also]
* __FORWARDING_PROBLEM__

[endsect]




[section by_value]

[heading Description]
`by_value` takes arguments by value so that arguments are "decayed".
Also, it can forward "movable" rvalues like `std::auto_ptr<>` with keeping movability.

[heading Header]
* `<boost/egg/by_value.hpp>`

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`__bytag_at(by_value, K, I)`]
        [`by_value`]
    ]
    [
        [`__arg_list(a, by_value)`]
        [`__val(a1),...,__val(aK)`]
    ]
    [
        [`__meta_arg_list(a, by_value)`]
        [`__typeof(a1),...,__typeof(aK)`]
    ]
    [
        [`function<__Lit, by_value>`]
        [See __EGG_FUNCTION__.]
    ]
]

[heading Preconditions]
* `0 <= K && K <= BOOST_EGG_MAX_LINEAR_ARITY`.

[heading Example]
* `__meta_arg_list(a, by_value)` is `int,int,int` if `a` is `i,3,ci`, where `i` is a non-const lvalue and `ci` is a const lvalue.

[heading Forwarded arguments are mutable.]
`by_value` copies arguments and turns them into mutable lvalues so that generic __CONCEPT_LITTLE_FUNCTION__\ s can be written.
But, if you know `by_value` is used, __CONCEPT_LITTLE_FUNCTION__ `call` should take arguments "by value" or /const reference/:
[code_forwarding_strategies_by_value]

[heading See also]
* __FORWARDING_PROBLEM__

[endsect]




[section Writing your own strategies]

[import ../example/writing_your_strategy.cpp]

[heading Description]
The predefined strategies, `by_perfect` etc, may be too simple to meet your requirements.
Egg provides a uniform way to define your own strategies.

[heading Header]
* `<boost/egg/function_extension.hpp>`

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`BOOST_EGG_FUNCTION_PREAMBLE()`]
        [See below.]
    ]
    [
        [`apply_little<Lit, A1,...,AK>::type`]
        [`Lit::nullary_result_type` if `K == 0`; `Lit::apply<Lit, A1,...,AK>::type` otherwise.]
    ]
    [
        [`call_little(__lit, a1,...,aK)`]
        [`__lit.call<apply_little<__meta_arg_list([__lit]++a, by_ref)>::type>(a1,...,aK)`]
    ]
    [
        [`by_perfect`, `by_ref`, `by_cref`, and `by_value`]
        [These can be used as "meta" return type of strategy tag.]
    ]
    [
        [`BOOST_EGG_FUNCTION_CALL_OPERATOR(Bytags, Cv)`]
        [See below.]
    ]
    [
        [`BOOST_EGG_DEDUCED_CONST(T)`]
        [`T const`]
    ]
]

[heading Preconditions]
* `Bytags` is __PP_SEQUENCE__ of `__Bytag`.
* `Cv` is /cv-qualifier/ of /call operator/. In case of no /cv-qualifier/, `Cv` must be `mutable`.
* `0 <= K && K <= BOOST_EGG_MAX_LINEAR_ARITY`.
* __PRECONDITION_AS_IS__

[heading Your strategy tag]
A user-defined strategy tag is __MPL_METAFUNCTION_CLASS__ which takes itself, arity and index, then returns `__Bytag`.
[code_example_writing_your_strategy_tag]

[heading Specializing `function<>`]
Using your strategy tag, `function<>` template can be specialized.
`BOOST_EGG_FUNCTION_PREAMBLE()` must be placed in first,
which automagically defines nested typedefs `little_type`, `strategy_type`, and `result<...>` etc.
[code_example_writing_your_strategy_specializing]
For `by_perfect` call operators, it is easy and preferable to use `BOOST_EGG_FUNCTION_CALL_OPERATOR`,
which will compile much faster in C++0x.
Also note, in order to work around some compiler bugs, you can use neither `result` template nor `__Lit::call` directly.
You have to use `apply_little` and `call_little` instead.
Moreover, if you want to support buggy msvc-7.1, `BOOST_EGG_DEDUCED_CONST` instead of `const` must be used in `apply_little`.

[heading Your strategy completed]
Now `function<>` with your strategy is a model of __CONCEPT_MAJOR_FUNCTION_OBJECT__.
Let's look into the new valid expressions.

[heading Notation]
* `StgTag` is __MPL_METAFUNCTION_CLASS__ which you have defined.
* `StgTag_` is (possibly __CV_QUALIFIED__) `StgTag`.

[heading New valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`__bytag_at(StgTag, K, I)`]
        [`StgTag_::apply< StgTag_, __mpl::int_<K>, __mpl::int_<I> >::type`]
    ]
    [
        [`__arg_list(a, StgTag)`]
        [`__arg_list([a1], __bytag_at(StgTag, K, 0))++...++__arg_list([aK], __bytag_at(StgTag, K, K-1))`]
    ]

    [
        [`__meta_arg_list(a, StgTag)`]
        [`__meta_arg_list([a1], __bytag_at(StgTag, K, 0))++...++__meta_arg_list([aK], __bytag_at(StgTag, K, K-1))`]
    ]
    [
        [`function<__Lit, StgTag>`]
        [See __EGG_FUNCTION__.]
    ]
]

[heading See also]
* __FORWARDING_PROBLEM__
* __BOOST_RESULT_OF__

[endsect]




[section Determining nullary return types]

[heading Description]
C++ instantiates the declarations of non-dependent member function templates, so that
some __EGG_FUNCTION_BUILDERS__ and __EGG_FUNCTION_ADAPTORS__ require a special workaround.
Here an imaginary operator is defined for the documentation.

[heading Valid expressions and semantics]
* `__decltype_r0(R0, expr)` is defined as follows:
    * If `R0` is `__ud`, it is a valid expression and returns an unspecified type .
    * If `R0` is `use_nullary_result`,
        * If `__decltype(expr)` is a valid expression, it is a valid expression and returns `__decltype(expr)`.
        * Otherwise, it is not a valid expression.
    * Otherwise, `R0`.

[tip __BOOST_RESULT_OF__ too offers a special workaround:
      A nullary callable `class F` without nested `result_type` must specialize `result_of<F()>`. `result_of<F()>::type` is `void` otherwise.
      Unfortunately, that isn't generic workaround. Consider `f(g(), h())` such that `f` isn't a 2ary function. ]

[heading See also]
* __BOOST_RESULT_OF__

[endsect]




[endsect]
