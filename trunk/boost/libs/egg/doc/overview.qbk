[section Overview]

[import ../example/introduction.cpp]




[section Preface]

["An Egg to day is better than a Hen to-morrow.] -- Benjamin Franklin

[endsect]




[section Disclaimer]

This library is not part of Boost (yet).

[endsect]




[section Introduction]

Egg is a header-only library for building __POLYMORPHIC_FUNCTION_OBJECT__ which can be used
with __BOOST_LAMBDA__. Such a function object is named __CONCEPT_MAJOR_FUNCTION_OBJECT__.

Egg mainly provides three components:

* __EGG_FUNCTION_BUILDERS__ which build __CONCEPT_LITTLE_FUNCTION__ into __CONCEPT_MAJOR_FUNCTION_OBJECT__.
* __EGG_FUNCTION_ADAPTORS__ which take __POLYMORPHIC_FUNCTION_OBJECT__ then return adapted one.
* __EGG_FUNCTION_OBJECTS__ which are ports of famous function templates.

Also, Egg provides the way to specify how to forward arguments. (See __EGG_FORWARDING_STRATEGIES__.)
Egg emulates, by default, the "perfect forwarding" using `by_perfect`.
`by_perfect` usually works well, so that you need not fully understand that section at first.

[heading So what's Polymorphic Function Object?]
In short, __POLYMORPHIC_FUNCTION_OBJECT__ is __FUNCTION_OBJECT__ which can be used with __BOOST_RESULT_OF__.
(See also __EGG_RESULT_OF_TUTORIAL__.)
__BOOST_RESULT_OF__ is an __MPL_METAFUNCTION__ to extract function return types without help of C++0x `decltype`,
so that it enables you to do the functional programming in C++03.

[heading Polymorphic Function Object Models?]
Fortunately, __POLYMORPHIC_FUNCTION_OBJECT__ types are superset of __SGI_ADAPTABLE_FUNCTION_OBJECT__ types,
so that you don't need extra efforts to play with Egg if you're already familiar with that concept.
For example, the followings are trivially conforming __POLYMORPHIC_FUNCTION_OBJECT__ types:

* function pointers
* `std::less<int>`
* function objects `boost::bind(...)` returns.
* `boost::function<...>`

These function objects have nested `result_type`, meaning that its return type doesn't depend on its argument types.
Such a function object is trivially conforming __POLYMORPHIC_FUNCTION_OBJECT__.
It is really easy to build such one:
[code_introduction_fixed_result]

[heading Egg what for?]
Unfortunately, if you need a __POLYMORPHIC_FUNCTION_OBJECT__ whose return type depends on
its argument types, it is not easy. There are many compiler bugs, pitfalls, and typings.

Egg is the framework for building such function objects.
[code_introduction]

[heading POD-oriented programming]
As shown above, Egg offers unfamiliar syntax using braces and macros.
`T_plus` is __POD__, and `plus` is initialized using braced-initializer `{{}}`.
This makes `plus` be __STATICALLY_INITIALIZED__.
The __STATIC_INITIALIZATION__ advantages are:

* No runtime overhead.
* No compile-time overhead of `result_of` instantiation.
* No "static initialization order fiasco".

Also notice that `my_plus` is initialized using "ugly" macro `BOOST_EGG_PIPABLE`.
This macro is regarded as "static-storage function call".
In fact, this macro is tangled braced-initializer, so that we have no choice but to use macro.
[endsect]




[section Requirements]

* __BOOST__ Version 1.34.1 or later (build not required)
* [@http://www.boost-consulting.com/vault/index.php?action=downloadfile&filename=egg.zip&directory=Function%20Objects& Boost.Egg]
  at [@http://www.boost-consulting.com/vault/index.php Boost.Vault]\/FunctionObjects or [@https://p-stade.svn.sourceforge.net/svnroot/p-stade/trunk/boost svn repository].

[endsect]




[section Portability]

Egg is known to work on the following platforms:

* Microsoft Visual C++ .NET Version 7.1 SP1
* Microsoft Visual C++ 2005 Express Edition SP1
* Microsoft Visual C++ 2008 Express Edition
* MinGW with GCC 3.4.4
* MinGW with GCC 4.1.2
[/ * Intel C++ Compiler Professional Edition 10.1 for Windows ]

[endsect]




[section Rationale]

* Egg works around __FORWARDING_PROBLEM__.
* Egg framework provides the way of __STATIC_INITIALIZATION__.
* Egg doesn't introduce any new "traits".

[endsect]




[section Acknowledgements]
Special thanks to:

* Dan Marsden, review manager of this library.
* David Abrahams. __FORWARDING_PROBLEM__ workaround is based on his __DAVID_CALLABLE__.
* Eric Niebler, who pointed out importance of __STATIC_INITIALIZATION__.
* Cryolite, Hitobashira, Kazuhiro Inaba, Takeshi Mouri, yotto-k, and Yusuke Kajimoto.

[endsect]




[section Notation]

This document uses the following notation.

[table
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`_decltype`]
        [An imaginary operator which is the same as `decltype` of C++0x.]
    ]
    [
        [`_typeof(a)`]
        [`boost::remove_cv<boost::remove_reference<_decltype(a)>::type>::type`]
    ]
    [
        [`_const(a)`]
        [`static_cast<_typeof(a) const>(a)`]
    ]
    [
        [`_pfo`]
        [A __POLYMORPHIC_FUNCTION_OBJECT__]
    ]
    [
        [`_PFo`]
        [A __POLYMORPHIC_FUNCTION_OBJECT__ type which is neither __REFERENCE_TYPE__ nor __CV_QUALIFIED__.]
    ]
    [
        [`_lit`]
        [A __CONCEPT_LITTLE_FUNCTION__ object]
    ]
    [
        [`_Lit`]
        [A __CONCEPT_LITTLE_FUNCTION__ type which is neither __REFERENCE_TYPE__ nor __CV_QUALIFIED__.]
    ]
    [
        [`_Stg`]
        [A type which is one of the __EGG_FORWARDING_STRATEGIES__.]
    ]
    [
        [`_Bytag`]
        [A type which is one of `by_perfect`, `by_ref`, `by_cref`, and `by_value`.]
    ]
    [
        [`_ud`]
        [`boost::use_default`]
    ]
    [
        [`_mpl`]
        [`boost::mpl`]
    ]
    [
        [`[a1,...,aN]`]
        [An imaginary operator to construct parameter list.]
    ]
    [
        [`++`]
        [An imaginary operator to concatenate parameter lists.]
    ]
    [
        [`##`]
        [An imaginary operator to concatenate tokens.]
    ]
]

Also, assume that every expression is placed after:

    namespace egg = boost::egg;
    using namespace egg;

Every example source code can be found at `libs/egg/example`.

[endsect]




[endsect]
