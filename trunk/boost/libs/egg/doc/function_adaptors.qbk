[/
Boost.Egg

Copyright Shunsuke Sogame 2007-2008.
Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE_1_0.txt or copy at
http://www.boost.org/LICENSE_1_0.txt)
]




[section Function Adaptors]

A Function Adaptor is a higher-order function that takes a "base" __FUNCTION_OBJECT__
and returns an "adapted" __FUNCTION_OBJECT__.
A Function Adaptor provides, if possible, two interfaces: A normal higher-order __FUNCTION_OBJECT__, and
an __MPL_METAFUNCTION__ with a corresponding macro for __STATIC_INITIALIZATION__.
An adapted non-local __FUNCTION_OBJECT__ with __STATIC_STORAGE_DURATION__ is __STATICALLY_INITIALIZED__
if the "base" __FUNCTION_OBJECT__ type is __POD__ and the expression passed to the macro is a /constant expression/.
Also, Function Adaptors don't modify __DEFAULT_CONSTRUCTIBLE__ and __COPY_ASSIGNABLE__-ness of base __FUNCTION_OBJECT__ unless otherwise specified.

[important If a macro argument is not guaranteed to contain no commas and recursions,
           you must use `BOOST_EGG_XXX_L ... BOOST_EGG_XXX_R` instead of `BOOST_EGG_XXX(...)`. ]




[section ambiN]

[heading Description]
The `ambi` family helps you to make __CONCEPT_AMBI_FUNCTION_OBJECT__.

[heading Header]
* `<boost/egg/ambi.hpp>`

[heading Model of]
* __CONCEPT_STATIC_FUNCTION_OBJECT__

[heading Notation]
* `fc(d, __Bytag)` is an object of `result_of_ambi%%N<__typeof(d), __Bytag>::type` initialized by `d`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`result_of_ambi%%N<__PFo, __Bytag = __ud>::type`]
        [An __CONCEPT_AMBI__ __CONCEPT_MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`BOOST_EGG_AMBI_L init BOOST_EGG_AMBI_R`]
        [A braced initializer of `result_of_ambi%%N<__PFo,...>::type`]
    ]
    [
        [`BOOST_EGG_AMBI(I)`]
        [`BOOST_EGG_AMBI_L I BOOST_EGG_AMBI_R`]
    ]
    [
        [`o|fc(d, __Bytag)(a1,...,aN)`]
        [`__const(d)(__fwd_arg_list([o]++a, __Bytag))`]
    ]
    [
        [`X_ambi%%N<__Bytag = __ud>`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_ambi%%N<__Bytag>()(d)`]
        [`fc(d, __Bytag)`]
    ]
    [
        [`ambi%%N`]
        [`X_ambi%%N<>()`]
    ]
]

[heading Preconditions]
* `N <= __MAX_PACK_ARITY-1`.
* `d` is an object such that `__PFo d = init;` is a valid expression.
* If `__Bytag` is `by_value`, `__typeof(aI)` is __COPY_CONSTRUCTIBLE__.
[/ * __PRECONDITION_AS_IS__ ]

[heading Invariants]
* `result_of_ambi%%N<__PFo,...>::type` is __POD__ if and only if `__PFo` is __POD__.

[heading Example]
[import ../example/ambi.cpp]
[code_example_ambi]

[heading See also]
* __EGG_PIPABLE__

[endsect]




[section compose]

[heading Description]
`compose` is a Function Adaptor for function composition.

[heading Header]
* `<boost/egg/compose.hpp>`

[heading Model of]
* __CONCEPT_STATIC_FUNCTION_OBJECT__

[heading Notation]
* `fc(d1, d2, R0, __Stg)` is an object of `result_of_compose<__typeof(d1), __typeof(d2), R0, __Stg>::type` initialized by `d1` and `d2`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`result_of_compose<__PFo1, __PFo2, R0 = __ud, __Stg = __ud>::type`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`BOOST_EGG_COMPOSE_L init1 , init2 BOOST_EGG_COMPOSE_R`]
        [A braced initializer of `result_of_compose<__PFo1, __PFo2,...>::type`]
    ]
    [
        [`BOOST_EGG_COMPOSE(I1, I2)`]
        [`BOOST_EGG_COMPOSE_L I1 , I2 BOOST_EGG_COMPOSE_R`]
    ]
    [
        [`fc(d1, d2, R0, Stg)(a1,...,aN)`]
        [`__const(d1)(__const(d2)(__fwd_arg_list(a, __Stg)))`]
    ]
    [
        [`X_compose<R0 = __ud, __Stg = __ud>`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_compose<R0, __Stg>()(d1, d2)`]
        [`fc(d1, d2, R0, __Stg)`]
    ]
    [
        [`compose`]
        [`X_compose<>()`]
    ]
]

[heading Preconditions]
* `0 <= N && N <= __MAX_PACK_ARITY`.
* `d1` is an object such that `__PFo1 d1 = init1;` is a valid expression.
* `d2` is an object such that `__PFo2 d2 = init2;` is a valid expression.
* `__decltype_r0(R0, d1(d2()))` is a valid expression which specifies the nullary return type.
[/ * __PRECONDITION_AS_IS__ ]

[important The last precondition means that `fc(d1, d2, R0, __Stg)` is NOT nullary-callable if `R0` is `__ud`. ]

[heading Invariants]
* `result_of_compose<__PFo1, __PFo2,...>::type` is __POD__ if and only if `__PFo1` and `__PFo2` is __POD__.

[heading Example]
[import ../example/compose.cpp]
[code_example_compose]

[heading See also]
* __EGG_DETERMINING_NULLARY_RETURN_TYPES__
* __EGG_INFIX__
* __EGG_NEST__

[endsect]




[section curryN]

[heading Description]
The `curry` family turn __FUNCTION_OBJECT__\ s into curried ones.

[heading Header]
* `<boost/egg/curry.hpp>`

[heading Model of]
* __CONCEPT_STATIC_FUNCTION_OBJECT__

[heading Notation]
* `fc(d)` is an object of `result_of_curry%%N<__typeof(d)>::type` initialized by `d`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`result_of_curry%%N<__PFo>::type`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`BOOST_EGG_CURRY%%N%%_L init BOOST_EGG_CURRY%%N%%_R`]
        [A braced initializer of `result_of_curry%%N<__PFo>::type`]
    ]
    [
        [`BOOST_EGG_CURRY%%N(I)`]
        [`BOOST_EGG_CURRY%%N%%_L I BOOST_EGG_CURRY%%N%%_R`]
    ]
    [
        [`fc(d)(a1)...(aN)`]
        [`__const(d)(__fwd_arg_list([a1,...,a(N-1)], by_value)++__fwd_arg_list([aN], by_perfect))`]
    ]
    [
        [`curry%%N(d)`]
        [`fc(d)`]
    ]
]

[heading Preconditions]
* `N` is the arity of `__PFo` such that `2 <= N && N <= BOOST_EGG_MAX_ARITY`.
* `d` is an object such that `__PFo d = init;` is a valid expression.
* For all `I` such that `1 <= I && I <= N-1`, `__typeof(aI)` is __COPY_CONSTRUCTIBLE__.
[/ * __PRECONDITION_AS_IS__ ]

[heading Invariants]
* `result_of_curry%%N<__PFo>::type` is __POD__ if and only if `__PFo` is __POD__.

[heading Example]
[import ../example/curry.cpp]
[code_example_curry]

[heading See also]
* __CURRYING__
* __EGG_UNCURRY__
* __EGG_NEST__

[endsect]




[section uncurry]

[heading Description]
`uncurry` reverses `curry`.

[heading Header]
* `<boost/egg/uncurry.hpp>`

[heading Model of]
* __CONCEPT_STATIC_FUNCTION_OBJECT__

[heading Notation]
* `fc(d, __Stg)` is an object of `result_of_uncurry<__typeof(d), __Stg>::type` initialized by `d`.
* `parens(b1,...,bN)` is `(b1)(b2)...(bN)`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`result_of_uncurry<__PFo, __Stg = __ud>::type`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`BOOST_EGG_UNCURRY_L init BOOST_EGG_UNCURRY_R`]
        [A braced initializer of `result_of_uncurry<__PFo>::type`]
    ]
    [
        [`BOOST_EGG_UNCURRY(I)`]
        [`BOOST_EGG_UNCURRY_L I BOOST_EGG_UNCURRY_R`]
    ]
    [
        [`fc(d, __Stg)(a1,...,aN)`]
        [`__const(d)(parens(__fwd_arg_list(a, __Stg)))`]
    ]
    [
        [`X_uncurry<__Stg = __ud>`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_uncurry<__Stg>()(d)`]
        [`fc(d, __Stg)`]
    ]
    [
        [`uncurry`]
        [`X_uncurry<>()`]
    ]
]

[heading Preconditions]
* `2 <= N && N <= BOOST_EGG_MAX_ARITY`.
* `d` is an object such that `__PFo d = init;` is a valid expression.
[/ * __PRECONDITION_AS_IS__ ]

[heading Invariants]
* `result_of_uncurry<__PFo,...>::type` is __POD__ if and only if `__PFo` is __POD__.

[heading Example]
[import ../example/uncurry.cpp]
[code_example_uncurry]

[heading See also]
* [@http://en.wikipedia.org/wiki/Currying Currying]
* __EGG_CURRY__

[endsect]




[section fix]

[heading Description]
`fix` is __FIXED_POINT_COMBINATOR__, which enables you to write recursive functions on the fly.

[heading Header]
* `<boost/egg/fix.hpp>`

[heading Model of]
* __CONCEPT_STATIC_FUNCTION_OBJECT__

[/
[heading Notation]
 * `fc(d)` is an object of `result_of_fix<__typeof(d)>::type` initialized by `d`.
]

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
[/
    [
        [`result_of_fix<__PFo>::type`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`BOOST_EGG_FIX_L init BOOST_EGG_FIX_R`]
        [A braced initializer of `result_of_fix<__PFo>::type`]
    ]
    [
        [`BOOST_EGG_FIX(I)`]
        [`BOOST_EGG_FIX_L I BOOST_EGG_FIX_R`]
    ]
]
    [
        [`fix(__pfo)(a1)`]
        [`__const(__pfo)(fix(__pfo))(__fwd_arg_list([a1], by_perfect))`]
    ]
    [
        [`fix2`]
        [__CONCEPT_STATIC__ `compose(fix, curry2)`]
    ]
]

[/
[heading Preconditions]
[/ * `d` is an object such that `__PFo d = init;` is a valid expression. ]
[/ * __PRECONDITION_AS_IS__ ]
]

[note `fix(__pfo)` that is passed to `__pfo` as the first argument represents `__pfo` itself.
      Also notice that `__pfo` must be curried in advance. ]

[heading Example]
[import ../example/fix.cpp]
[code_example_fix]

[heading See also]
* __FIXED_POINT_COMBINATOR__
* [@http://citeseer.ist.psu.edu/51062.html Using FIX to Handle Errors Without Exceptions, and Other Programming Tricks]
* __EGG_CURRY__
* __EGG_MEMOIZE__
* __EGG_COMPOSE__

[endsect]




[/

[section flip]

[heading Description]
`flip` flips the order of arguments.

[heading Header]
* `<boost/egg/flip.hpp>`

[heading Model of]
* __CONCEPT_STATIC_FUNCTION_OBJECT__

[heading Notation]
* `fc(d, __Stg)` is an object of `result_of_flip<__typeof(d), __Stg>::type` initialized by `d`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`result_of_flip<__PFo, __Stg = __ud>::type`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`BOOST_EGG_FLIP_L init BOOST_EGG_FLIP_R`]
        [A braced initializer of `result_of_flip<__PFo,...>::type`]
    ]
    [
        [`BOOST_EGG_FLIP(I)`]
        [`BOOST_EGG_FLIP_L I BOOST_EGG_FLIP_R`]
    ]
    [
        [`fc(d, __Stg)(a1, a2)`]
        [`__const(d)(__fwd_arg_list([a2, a1], __Stg))`]
    ]
    [
        [`X_flip<__Stg = __ud>`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_flip<__Stg>()(d)`]
        [`fc(d, __ud)`]
    ]
    [
        [`flip`]
        [`X_flip<>()`]
    ]
]

[heading Preconditions]
* `d` is an object such that `__PFo d = init;` is a valid expression.
[/ * __PRECONDITION_AS_IS__ ]

[heading Invariants]
* `result_of_flip<__PFo,...>::type` is __POD__ if and only if `__PFo` is __POD__.

[heading Example]
[import ../example/flip.cpp]
[code_example_flip]

[/
[heading See also]
* ...
]

[endsect]

]




[/

[section free]

[heading Description]
`free` is akin to `boost::mem_fn`, which turns member pointers into __FUNCTION_OBJECT__.

[heading Header]
* `<boost/egg/free.hpp>`

[heading Model of]
* __CONCEPT_STATIC_FUNCTION_OBJECT__

[heading Notation]
* `fc(p)` is an object of `result_of_free<__typeof(p)>::type` initialized by `p`.
* `C` is class type which `__typeof(p)` belongs to.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`result_of_free<MPtr>::type`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`BOOST_EGG_FREE_L init BOOST_EGG_FREE_R`]
        [A braced initializer of `result_of_free<MPtr>::type`]
    ]
    [
        [`BOOST_EGG_FREE(P)`]
        [`BOOST_EGG_FREE_L P BOOST_EGG_FREE_R`]
    ]
    [
        [`fc(p)(a1,...,aN)`]
        [`(a1.*p)(a2,...,aN)`]
    ]
    [
        [`fc(p)(b1,...,bN)`]
        [`(get_pointer(b1)->*p)(b2,...,bN)`]
    ]
    [
        [`fc(p)(a1)`]
        [`(a1.*p)`]
    ]
    [
        [`fc(p)(b1)`]
        [`(get_pointer(b1)->*p)`]
    ]
    [
        [`free(p)`]
        [`fc(p)`]
    ]
]

[heading Preconditions]
* `1 <= N && N <= BOOST_EGG_MAX_LINEAR_ARITY`.
* `p` is an object such that `__PFo p = init;` is a valid expression.
* `MPtr` is member pointer type.
* `a1` is convertible to `C const&`.
* `b1` is not convertible to `C const&`.
[/ * __PRECONDITION_AS_IS__ ]

[heading Invariants]
* `result_of_free<MPtr>::type` is __POD__.

[heading Example]
[import ../example/free.cpp]
[code_example_free]

[/
[heading See also]
* ...
]

[endsect]

]




[section fuse]

[heading Description]
`fuse` converts a __FUNCTION_OBJECT__ into a unary __FUNCTION_OBJECT__ which takes a __FUSION_FORWARD_SEQUENCE__.

[heading Header]
* `<boost/egg/fuse.hpp>`

[heading Model of]
* __CONCEPT_STATIC_FUNCTION_OBJECT__

[heading Notation]
* `fc(d)` is an object of `result_of_fuse<__typeof(d)>::type` initialized by `d`.
* `t_` is `__fwd_arg_list(t, by_perfect)`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`result_of_fuse<__PFo>::type`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`BOOST_EGG_FUSE_L init BOOST_EGG_FUSE_R`]
        [A braced initializer of `result_of_fuse<__PFo>::type`]
    ]
    [
        [`BOOST_EGG_FUSE(I)`]
        [`BOOST_EGG_FUSE_L I BOOST_EGG_FUSE_R`]
    ]
    [
        [`fc(d)(t)`]
        [`__const(d)(egg::get_c<0>(t_),...,egg::get_c<N-1>(t_))`]
    ]
    [
        [`fuse(d)`]
        [`fc(d)`]
    ]
]

[heading Preconditions]
* `1 <= N && N <= __MAX_PACK_ARITY`.
* `d` is an object such that `__PFo d = init;` is a valid expression.
[/ * __PRECONDITION_AS_IS__ ]

[heading Invariants]
* `result_of_fuse<__PFo>::type` is __POD__ if and only if `__PFo` is __POD__.

[heading Example]
[import ../example/fuse.cpp]
[code_example_fuse]

[heading See also]
* __FUSION_FUNCTIONAL__
* __VARIADIC_TEMPLATES__
* __EGG_GET__
* __EGG_UNFUSE__

[endsect]




[section unfuse]

[heading Description]
`unfuse` reverses `fuse`.

[heading Header]
* `<boost/egg/unfuse.hpp>`

[heading Model of]
* __CONCEPT_STATIC_FUNCTION_OBJECT__

[heading Notation]
* `fc(d, R0, __Stg)` is an object of `result_of_unfuse<__typeof(d), R0, Pack, __Stg>::type` initialized by `d`.
* `pack_` is `X_pack<__Stg>()` if `Pack` is `__ud`, `__mpl::apply<Pack, __Stg>::type()` otherwise.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`result_of_unfuse<__PFo, R0 = __ud, Pack = __ud, __Stg = __ud>::type`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`BOOST_EGG_UNFUSE_L init BOOST_EGG_UNFUSE_R`]
        [A braced initializer of `result_of_unfuse<__PFo,...>::type`]
    ]
    [
        [`BOOST_EGG_UNFUSE(I)`]
        [`BOOST_EGG_UNFUSE_L I BOOST_EGG_UNFUSE_R`]
    ]
    [
        [`fc(d, R0, __Stg)(a1,...,aN)`]
        [`__const(d)( pack_(__fwd_arg_list(a, __Stg)) )`]
    ]
    [
        [`X_unfuse<R0 = __ud, Pack = __ud, __Stg = __ud>`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_unfuse<R0, Pack, __Stg>()(d)`]
        [`fc(d, R0, __ud)`]
    ]
    [
        [`unfuse`]
        [`X_unfuse<>()`]
    ]
]

[heading Preconditions]
* `d` is an object such that `__PFo d = init;` is a valid expression.
* `__decltype_r0(R0, d(pack_())` is a valid expression which specifies the nullary return type.
* If `Pack` isn't `__ud`, `__mpl::apply<Pack, by_ref>::type` is a valid expression.
[/ * __PRECONDITION_AS_IS__ ]

[heading Invariants]
* `result_of_unfuse<__PFo,...>::type` is __POD__ if and only if `__PFo` is __POD__.

[heading Example]
[import ../example/unfuse.cpp]
[code_example_unfuse]

[heading See also]
* __EGG_DETERMINING_NULLARY_RETURN_TYPES__
* __FUSION_FUNCTIONAL__
* __VARIADIC_TEMPLATES__
* __EGG_FUSE__
* __EGG_VARIADIC__
* __EGG_PACK__
[/ * __EGG_CONSTRUCT_UNFUSED1__ ]

[endsect]




[section indirect]

[heading Description]
`indirect` takes a pointer-like object then calls it after dereferencing.

[heading Header]
* `<boost/egg/indirect.hpp>`

[heading Model of]
* __CONCEPT_STATIC_FUNCTION_OBJECT__

[heading Notation]
* `fc(p, __Stg)` is an object of `result_of_indirect<__typeof(p), __Stg>::type` initialized by `p`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`result_of_indirect<Pco, __Stg = __ud>::type`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`BOOST_EGG_INDIRECT_L init BOOST_EGG_INDIRECT_R`]
        [A braced initializer of `result_of_indirect<Pco,...>::type`]
    ]
    [
        [`BOOST_EGG_INDIRECT(P)`]
        [`BOOST_EGG_INDIRECT_L P BOOST_EGG_INDIRECT_R`]
    ]
    [
        [`fc(p, __Stg)(a1,...,aN)`]
        [`(*p)(__fwd_arg_list(a, __Stg))`]
    ]
    [
        [`X_indirect<__Stg = __ud>`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_indirect<__Stg>()(p)`]
        [`fc(p, __Stg)`]
    ]
    [
        [`indirect`]
        [`X_indirect<>()`]
    ]
]

[heading Preconditions]
* `boost::pointee<Pco>::type` is __POLYMORPHIC_FUNCTION_OBJECT__ type.
* `p` is an object such that `Pco p = init;` is a valid expression.
[/ * __PRECONDITION_AS_IS__ ]

[heading Invariants]
* `result_of_indirect<Pco,...>::type` is __POD__ if and only if `Pco` is __POD__.

[heading Example]
[import ../example/indirect.cpp]
[code_example_indirect]

[heading See also]
* __EGG_STATIC__
* __BOOST_INDIRECT_ITERATOR__

[endsect]




[section lazy]

[heading Description]
__BOOST_PHOENIX__ is able to make a lambda expression without a "bind function".
`lazy` turns a bindable __FUNCTION_OBJECT__ into such one which can be used with __BOOST_LAMBDA__.

[heading Header]
* `<boost/egg/lazy.hpp>`

[heading Model of]
* __CONCEPT_STATIC_FUNCTION_OBJECT__

[heading Notation]
* `fc(f)` is an object of `result_of_lazy<__typeof(f), Bind>::type` initialized by `f`.
* `bind_` is `boost::lambda::bind` if `Bind` is `__ud`, `Bind()` otherwise.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`result_of_lazy<F, Bind = __ud>::type`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`BOOST_EGG_LAZY_L init BOOST_EGG_LAZY_R`]
        [A braced initializer of `result_of_lazy<F>::type`]
    ]
    [
        [`BOOST_EGG_LAZY(I)`]
        [`BOOST_EGG_LAZY_L I BOOST_EGG_LAZY_R`]
    ]
    [
        [`fc(f)(a1,...,aN)`]
        [__POLYMORPHIC__ `bind_(__fwd_arg_list([f]++a, by_value))`]
    ]
    [
        [`X_lazy<Bind = __ud>`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_lazy<Bind>()(f)`]
        [`fc(f)`]
    ]
    [
        [`lazy`]
        [`X_lazy<>()`]
    ]
]

[heading Preconditions]
* `f` is an object such that `F f = init;` is a valid expression.
[/ * __PRECONDITION_AS_IS__ ]

[heading Invariants]
* `result_of_lazy<F, Bind>::type` is __POD__ if and only if `F` is __POD__.

[tip When you provide a __EGG_LAZY__ __FUNCTION_OBJECT__, its "base" function also should be provided
     with a consistent naming convention, so that your clients can use it with __EGG_NEST__. ]

[heading Example]
[import ../example/lazy.cpp]
[code_example_lazy]

[heading See also]
* __EGG_NEST__
* __BOOST_PHOENIX__
* __BOOST_LAMBDA__

[endsect]




[section memoize]

[heading Description]
`memoize` stores the result of function for later reuse.

[heading Header]
* `<boost/egg/memoize.hpp>`

[heading Model of]
* __CONCEPT_STATIC_FUNCTION_OBJECT__

[heading Notation]
* `fixed` is an unspecified unary __FUNCTION_OBJECT__ which represents `__pfo` itself.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`memoize(__pfo)`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__]
    ]
    [
        [`memoize(__pfo)(a1)`]
        [`__fwd_arg_list([__const(__pfo)(fixed, __fwd_arg_list([a1], by_value))], by_value)`]
    ]
]

[heading Preconditions]
* A __FUNCTION_OBJECT__ returned from `memoize(__pfo)` must always be called with the same type arguments.
* `__typeof(a1)` is __COPY_ASSIGNABLE__, __COPY_CONSTRUCTIBLE__ and __EQUALITY_COMPARABLE__.
* `__decltype(memoize(__pfo)(a1))` is __COPY_CONSTRUCTIBLE__.
[/ * __PRECONDITION_AS_IS__ ]

[heading Example]
[import ../example/memoize.cpp]
[code_example_memoize]

[heading See also]
* [@http://en.wikipedia.org/wiki/Y_combinator Fixed point combinator]
* __EGG_FIX__

[endsect]




[section mono]

[heading Description]
`mono` turns a __FUNCTION_OBJECT__ into a "monomorphic" one which contains no templates.

[heading Header]
* `<boost/egg/mono.hpp>`

[/
[heading Model of]
* ...
]

[heading Notation]
* `fc(f)` is an object of `result_of_mono<__typeof(f), Sig>::type` initialized by `f`.
* `N` is an arity of `Sig`.
* `R` is a return type of `Sig`.
* `ParamOf(Sig, I)` is an imaginary operator which returns an `I`th parameter type of `Sig`.
* `bI` is `boost::implicit_cast<ParamOf(Sig, I)>(aI)`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`result_of_mono<Fun, Sig>::type`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`BOOST_EGG_MONO_L init BOOST_EGG_MONO_R`]
        [A braced initializer of `result_of_mono<Fun,...>::type`]
    ]
    [
        [`BOOST_EGG_MONO(I)`]
        [`BOOST_EGG_MONO_L I BOOST_EGG_MONO_R`]
    ]
    [
        [`fc(f)(a1,...,aN)`]
        [`__const(f)(b1,...,bN)`]
    ]
    [
        [`X_mono<Sig>`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_mono<Sig>()(f)`]
        [`fc(f)`]
    ]
    [
        [`egg::mono<Sig>(f)`]
        [`X_mono<Sig>()(f)`]
    ]
]

[heading Preconditions]
* `Fun` is a __FUNCTION_OBJECT__ type.
* `Sig` is a /function type/.
* `f` is an object such that `Fun f = init;` is a valid expression.
* If `R` is `__ud`, `Fun` is a __POLYMORPHIC_FUNCTION_OBJECT__ type; `R` specifies a return type of `Fun`, otherwise.
[/ * __PRECONDITION_AS_IS__ ]

[heading Invariants]
* `result_of_mono<Fun,...>::type` is __POD__ if and only if `Fun` is __POD__.
* `result_of_mono<Fun,...>::type` is __SGI_ADAPTABLE__ if and only if `N` is `1` or `2`.

[heading Example]
[import ../example/mono.cpp]
[code_example_mono]

[heading See also]
* __SGI_ADAPTABLE_FUNCTION_OBJECT__
* __FUSION_FUNCTIONAL__
* __EGG_POLY__

[endsect]




[section nestN]

[heading Description]
`nestN` is generalization of __EGG_CURRY__ and __EGG_LAZY__, which enables you to write nested lambda expressions.
`N` represents nesting level of lambda expression.

[heading Header]
* `<boost/egg/nest.hpp>`

[heading Model of]
* __CONCEPT_STATIC_FUNCTION_OBJECT__

[heading Notation]
* `bll_bind` is an imaginary __FUNCTION_OBJECT__ behaving as if it were `boost::lambda::bind`.
* `bind_` is `bll_bind` if `Bind` is `__ud`, `Bind()` otherwise.
* `protect_` is `boost::lambda::protect` if `Protect` is `__ud`, `Protect()` otherwise.
* `LAZY(N)` is:
    * If `N == 0`, `X_identity<by_value>()`.
    * Else if `N == 1`, `X_lazy<__typeof(bind_)>()`.
    * Otherwise, `X_lazy<result_of_lazy<__typeof(bind_), result_of_lazy<__typeof(bind_),...N-1 times...>::type>::type>()`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`X_nest%%N<Bind = __ud>`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_nest%%N<Bind>()(f)(a1,...,aK)`]
        [__POLYMORPHIC__ `LAZY(N)(f)(__fwd_arg_list(a, by_value))`]
    ]
    [
        [`nest%%N(x)`]
        [`X_nest%%N<>()(x)`]
    ]
    [
        [`XX_%%M%%_<Protect = __ud>`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`XX_%%M%%_<Protect>()(p)`]
        [__POLYMORPHIC__ `protect_(protect_(...M times...(p)...))`]
    ]
    [
        [`_%%M%%_`]
        [__CONCEPT_STATIC__ `XX_%%M%%_<>()`]
    ]
    [
        [`using BOOST_EGG_NEST_NAMES;`]
        [['using-declaration]\ s of `nest%%N`, `_%%M%%_`, and `boost::lambda::_%%K`]
    ]
]

[heading Preconditions]
* `0 <= N && N <= BOOST_EGG_MAX_ARITY`.
* `0 <= M && M <= N-1`.
[/ * __PRECONDITION_AS_IS__ ]

[heading Example]
[import ../example/nest.cpp]
[code_example_nest]

[heading See also]
* __EGG_COMPOSE__
* __EGG_CURRY__
* __EGG_LAZY__
* __BOOST_PHOENIX__
* __BOOST_LAMBDA__

[endsect]




[section perfect]

[heading Description]
`perfect` performs "perfect forwarding".

[heading Header]
* `<boost/egg/perfect.hpp>`

[heading Model of]
* __CONCEPT_STATIC_FUNCTION_OBJECT__

[heading Notation]
* `fc(d)` is an object of `result_of_perfect<__typeof(d)>::type` initialized by `d`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`result_of_perfect<__PFo>::type`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`BOOST_EGG_PERFECT_L init BOOST_EGG_PERFECT_R`]
        [A braced initializer of `result_of_perfect<__PFo>::type`]
    ]
    [
        [`BOOST_EGG_PERFECT(I)`]
        [`BOOST_EGG_PERFECT_L I BOOST_EGG_PERFECT_R`]
    ]
    [
        [`fc(d)(a1,...,aN)`]
        [`__const(d)(__fwd_arg_list(a, by_perfect))`]
    ]
    [
        [`perfect(d)`]
        [`fc(d)`]
    ]
]

[heading Preconditions]
* `d` is an object such that `__PFo d = init;` is a valid expression.
[/ * __PRECONDITION_AS_IS__ ]

[heading Invariants]
* `result_of_perfect<__PFo>::type` is __POD__ if and only if `__PFo` is __POD__.

[heading Example]
[import ../example/perfect.cpp]
[code_example_perfect]

[heading See also]
* __EGG_RETURN__

[endsect]




[section pipable]

[heading Description]
`pipable` adapts __FUNCTION_OBJECT__ into __CONCEPT_PIPABLE_FUNCTION_OBJECT__.

[heading Header]
* `<boost/egg/pipable.hpp>`

[heading Model of]
* __CONCEPT_STATIC_FUNCTION_OBJECT__

[heading Notation]
* `fc(d, __Stg, __Bytag)` is an object of `result_of_pipable<__typeof(d), __Stg, __Bytag>::type` initialized by `d`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`result_of_pipable<__PFo, __Stg = __ud, __Bytag = __ud>::type`]
        [A __CONCEPT_PIPABLE__ __CONCEPT_MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`BOOST_EGG_PIPABLE_L init BOOST_EGG_PIPABLE_R`]
        [A braced initializer of `result_of_pipable<__PFo,...>::type`]
    ]
    [
        [`BOOST_EGG_PIPABLE(I)`]
        [`BOOST_EGG_PIPABLE_L I BOOST_EGG_PIPABLE_R`]
    ]
    [
        [`o|fc(d, __Stg, __Bytag)(a1,...,aN)`]
        [`__const(d)(__fwd_arg_list([o], __Bytag)++_safe_arg_list(a, __Stg))`]
    ]
    [
        [`X_pipable<__Stg = __ud, __Bytag = __ud>`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_pipable<__Stg, __Bytag>()(d)`]
        [`fc(d, __Stg, __Bytag)`]
    ]
    [
        [`pipable`]
        [`X_pipable<>()`]
    ]
]

[heading Preconditions]
* `0 <= N && N+1 <= BOOST_EGG_MAX_LINEAR_ARITY`.
* `N+1 <= __MAX_PACK_ARITY`.
* `d` is an object such that `__PFo d = init;` is a valid expression.
* If `__bytag_at(__Stg, N, I)` is `by_value`, `__typeof(aI)` is __COPY_CONSTRUCTIBLE__.
[/ * __PRECONDITION_AS_IS__ ]

[heading Invariants]
* `result_of_pipable<__PFo,...>::type` is __POD__ if and only if `__PFo` is __POD__.

[tip When you provide a __CONCEPT_PIPABLE_FUNCTION_OBJECT__, its "base" function also should be provided
     with a consistent naming convention, so that your clients can use it with `result_of`. ]

[heading Example]
[import ../example/pipable.cpp]
[code_example_pipable]

[heading See also]
* __EGG_AMBI__
* __EXTENSION_METHOD__

[endsect]




[section regular]

[heading Description]
A __BOOST_LAMBDA__ __FUNCTION_OBJECT__ is neither __DEFAULT_CONSTRUCTIBLE__ nor __COPY_ASSIGNABLE__.
An iterator holding such a __FUNCTION_OBJECT__ can't conform to even __INPUT_ITERATOR__.
`regular` converts it into comfortable one for iterators.

[heading Header]
* `<boost/egg/regular.hpp>`

[heading Model of]
* __CONCEPT_STATIC_FUNCTION_OBJECT__

[/
[heading Notation]
* ...
]

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`regular(f)`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__ which is __DEFAULT_CONSTRUCTIBLE__ and __COPY_ASSIGNABLE__.]
    ]
    [
        [`regular(f)(a1,...,aN)`]
        [`__const(f)(__fwd_arg_list(a, by_perfect))`]
    ]
]

[heading Preconditions]
* `f` is a __BOOST_LAMBDA__ __FUNCTION_OBJECT__ or __POLYMORPHIC_FUNCTION_OBJECT__.
[/ * __PRECONDITION_AS_IS__ ]

[heading Example]
[import ../example/regular.cpp]
[code_example_regular]

[heading See also]
* __BOOST_ITERATOR__

[endsect]




[section return_]

[heading Description]
`return_` just calls __FUNCTION_OBJECT__, possibly with a modified return type.

[heading Header]
* `<boost/egg/return.hpp>`

[/
[heading Model of]
* ...
]

[heading Notation]
* `fc(f, R, __Stg)` is an object of `result_of_return<__typeof(f), R, __Stg>::type` initialized by `f`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`result_of_return<Fun, R = __ud, __Stg = __ud>::type`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`BOOST_EGG_RETURN_L init BOOST_EGG_RETURN_R`]
        [A braced initializer of `result_of_return<Fun,...>::type`]
    ]
    [
        [`BOOST_EGG_RETURN(I)`]
        [`BOOST_EGG_RETURN_L I BOOST_EGG_RETURN_R`]
    ]
    [
        [`fc(f, R, __Stg)(a1,...,aN)`]
        [`__const(f)(__fwd_arg_list(a, __Stg))`]
    ]
    [
        [`X_return<R, __Stg = __ud>`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_return<R, __Stg>()(f)`]
        [`fc(f, R, __Stg)`]
    ]
    [
        [`egg::return_<R>`]
        [`X_return<R>()`]
    ]
]

[heading Preconditions]
* `Fun` is a __FUNCTION_OBJECT__ type.
* `Fun` is a __POLYMORPHIC_FUNCTION_OBJECT__ type if `R` is `__ud`.
* `f` is an object such that `Fun f = init;` is a valid expression.
[/ * __PRECONDITION_AS_IS__ ]

[heading Invariants]
* `result_of_return<Fun,...>::type` is __POD__ if and only if `Fun` is __POD__.

[heading Example]
[import ../example/return.cpp]
[code_example_return]

[heading See also]
* __EGG_PERFECT__

[endsect]




[section tagged]

[heading Description]
`tagged` makes a new distinct __FUNCTION_OBJECT__ type. This emulates support for strong typedefs.

[heading Header]
* `<boost/egg/tagged.hpp>`

[/
[heading Model of]
* ...
]

[heading Notation]
* `fc(d, Tag, __Stg)` is an object of `result_of_tagged<__typeof(d), Tag, __Stg>::type` initialized by `d`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`result_of_tagged<__PFo, Tag, __Stg = __ud>::type`]
        [A __CONCEPT_MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`BOOST_EGG_TAGGED_L init BOOST_EGG_TAGGED_R`]
        [A braced initializer of `result_of_tagged<__PFo,...>::type`]
    ]
    [
        [`BOOST_EGG_TAGGED(I)`]
        [`BOOST_EGG_TAGGED_L I BOOST_EGG_TAGGED_R`]
    ]
    [
        [`fc(d, Tag, __Stg)(a1,...,aN)`]
        [`__const(d)(__fwd_arg_list(a, __Stg))`]
    ]
    [
        [`tag_of<F>::type`]
        [`Tag` if `F` is `__typeof(fc(d, Tag, __Stg))`, unspecified type otherwise.]
    ]
    [
        [`is_tagged_with<F, Tag>`]
        [`boost::is_same<tag_of<F>::type, Tag>`]
    ]
]

[heading Preconditions]
* `Tag` is any (possibly incomplete) type.
* `d` is an object such that `__PFo d = init;` is a valid expression.
[/ * __PRECONDITION_AS_IS__ ]

[heading Invariants]
* `result_of_tagged<__PFo,...>::type` is __POD__ if and only if `__PFo` is __POD__.
* `result_of_tagged<__PFo, Tag1,...>::type` is the same type as `result_of_tagged<__PFo, Tag2,...>::type` if and only if `Tag1` is the same type as `Tag2`.

[heading Example]
[import ../example/tagged.cpp]
[code_example_tagged]

[heading See also]
* [@http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2141.html Strong Typedefs in C++09(Revisited)]

[endsect]




[endsect]
