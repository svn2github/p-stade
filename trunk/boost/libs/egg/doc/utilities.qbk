[/
Boost.Egg

Copyright Shunsuke Sogame 2007-2008.
Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE_1_0.txt or copy at
http://www.boost.org/LICENSE_1_0.txt)
]




[section Utilities]




[section expr]

[heading Description]
`expr`, cooperating with __BOOST_TYPEOF__,
enables you to extract type of expression without `resulf_of`.

[heading Header]
* `<boost/egg/expr.hpp>`

[/
[heading Model of]
* ...

[heading Notation]
* ...
]

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`egg::expr<Sig>(__pfo)`]
        [`X_mono<Sig>()(__pfo)` which can be used with __BOOST_TYPEOF__.]
    ]
]

[heading Preconditions]
* Except for `boost::use_default`, types in `Sig` is registered to __BOOST_TYPEOF__.
[/ * __PRECONDITION_AS_IS__ ]

[note `expr` performs type-erasure when native typeof isn't available
      so that type registrations into __BOOST_TYPEOF__ can be minimized. ]

[heading Example]
[import ../example/expr.cpp]
[code_example_expr]

[heading See also]
* __EGG_MONO__
* __BOOST_FUNCTION__
* __BOOST_TYPEOF__

[endsect]




[section infix]

[heading Description]
Egg provides __FCPP__ infix operator syntax.

[heading Header]
* `<boost/egg/infix.hpp>`

[/
[heading Model of]
* ...

[heading Notation]
* ...
]

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`a1 ^__pfo^ a2`]
        [`__pfo(__fwd_arg_list([a1], by_perfect)++__fwd_arg_list([a2], by_perfect))`]
    ]
]

[heading Preconditions]
* `using namespace infix;` is placed before the valid expression.
* `operator^` is not overloaded with `__typeof(a1)`.
[/ * __PRECONDITION_AS_IS__ ]

[heading Invariants]
* `^__pfo^` behaves as if it had left to right associativity.

[heading Example]
[import ../example/infix.cpp]
[code_example_infix]

[heading See also]
* __FCPP__
* __EGG_PIPABLE__

[endsect]




[section bll/result_of.hpp]

[heading Description]
This header lets a __BOOST_LAMBDA__ __FUNCTION_OBJECT__ be a __POLYMORPHIC_FUNCTION_OBJECT__.

[heading Header]
* `<boost/egg/bll/result_of.hpp>`

[/
[heading Model of]
* ...
]

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`#include <boost/egg/bll/result_of.hpp>`]
        [A __BOOST_LAMBDA__ __FUNCTION_OBJECT__ becomes a __POLYMORPHIC_FUNCTION_OBJECT__.]
    ]
]

[/
[heading Preconditions]
* ...

[heading Example]
...
]

[heading See also]
* __BOOST_LAMBDA__
* __BOOST_RESULT_OF__

[endsect]




[endsect]
