[section Concepts]




[section Bindable Object]

[h3 Description]
A _bindable_object_ is a _function_object_ which can be passed to `boost::lambda::bind`.

[h3 Refinement of]
* _function_object_

[h3 Requirements]
In addition to the requirements defined in _function_object_,
for any _bindable_object_ `b` the following must be met:

* There is a `N` such that `boost::lambda::bind(b, boost::lambda::_1,..,boost::lambda::_N)` is a valid expression.

[h3 Models]

[h3 See also]
* _boost_lambda_

[endsect]




[section Operatable Object]

[h3 Description]
An _operatable_object_ is a _deferred_callable_object_ which can specify the type of itself using prefix `op_`.

[h3 Refinement of]
* _deferred_callable_object_
* _bindable_object_

[h3 Requirements]
In addition to the requirements defined in _deferred_callable_object_ and _bindable_object_,
for any _operatable_object_ `f` the following must be met:

* `op_f` is `_typeof(f)`.

[h3 Models]
* [link oven.filtered make_filtered]
* [link oven.generation generation]

[endsect]


[caution Because of a compiler bug, `boost::result_of` of Boost version 1.34 or below is utterly broken
on msvc-7.1 and 8.0. `pstade::result_of ` in `<pstade/result_of.hpp>` can be used for the workaround.]


[section Pipable Object]

[h3 Description]
A _pipable_object_ supports a pipe-like syntax using `operator|` and has the associated _operatable_object_ using prefix `make_`.

[h3 Refinement of]
* _deferred_callable_object_

[h3 Requirements]
For any _pipable_object_ `p` the following must be met:

* `x|p(x1,..,xN)` is a valid expression if and only if `make_p(x, x1,..xN)` is a valid expression.
* `x|p(x1,..,xN)` and `make_p(x, x1,..xN)` have the same effects.
* `make_p` is an _operatable_object_.
* If `N` is `0`, `x|p` and `make_p(x)` are valid expressions which have the same effects.

[h3 Models]
* [link oven.filtered filtered]
* [link oven.transformed transformed]

[endsect]




[section Auxiliary Interface]

[h3 Description]
An _auxiliary_interface_ is an _operatable_object_ which supports also a pipe-like syntax
used as if it were a member function.

[h3 Refinement of]
* _operatable_object_

[h3 Requirements]
In addition to the requirements defined in _operatable_object_,
for any _auxiliary_interface_ `i` the following must be met:

* `x|i(x1,..,xN)` is a valid expression if and only if `i(x, x1,..,xN)` is a valid expression.
* `x|i(x1,..xN)` and `i(x, x1,..,xN)` have the same effects.
* If `N` is `0`, `x|i()` and `x|i` are valid expressions which have the same effects.

[h3 Models]
* [link oven.as_array as_array]
* [link oven.begin_end begin/end]

[h3 See also]
* [@http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1742.pdf Auxiliary class interfaces]

[endsect]




[section Stoppable Generator]

[h3 Description]
A _stoppable_generator_ is a _generator_ which can specify the stop of generating using _boost_optional_.

[h3 Refinement of]
* _generator_
* _deferred_callable_object_

[h3 Requirements]
In addition to the requirements defined in _generator_ and _deferred_callable_object_,
for any _stoppable_generator_ `g` the following must be met:

* `_typeof(g())` is a `boost::optional`.
* An /uninitialized/ result is considered as the stop of generating.

[h3 Models]
* Any _deferred_callable_object_ which [link oven.nonstop nonstop] returns.

[endsect]




[section Constant Range]

[h3 Description]
A _constant_ _range_ is a _range_ whose elements are not modifiable.

[h3 Refinement of]
* _single_pass_ _range_

[h3 Requirements]
In addition to the requirements defined in _single_pass_ _range_,
for any _constant_ _range_ `r` the following must be met:

* `boost::implicit_cast<_value_of<_typeof(r)>::type&>(*_begin(_r))` is ill-formed.
* `r` is neither _writable_ nor _swappable_.

[h3 Models]
* `std::list<int> const`
* `int const[10]`

[endsect]




[section Contiguous Range]

[h3 Description]
A _contiguous_ _range_ is a _random_access_ _range_ whose elements are stored contiguously.

[h3 Refinement of]
* _random_access_ _range_
* _lvalue_ _range_

[h3 Requirements]
In addition to the requirements defined in _random_access_ _range_,
for any _contiguous_ _range_ `r` the following must be met:

* `&*(_begin(r) + n) == &*(_begin(r)) + n` for all `n` such that `0 <= n &&  n < _end(r) - _begin(r)`.

[h3 Models]
* `std::vector<int>`
* `boost::array<char, 50>`

[endsect]




[endsect]
