[section Concepts]




[section Pipable Adaptor]

[h3 Description]
A _pipable_adaptor_ is a _pipable_object_ which has the associated _static_function_object_ using prefix `make_`.

[h3 Refinement of]
* _pipable_object_

[h3 Requirements]
In addition to the requirements defined in _pipable_object_,
for any _pipable_adaptor_ `p` the following must be met:

* `x|p(x1,..,xN)` is a valid expression if and only if `make_++p(x, x1,..xN)` is a valid expression.
* `x|p(x1,..,xN)` and `make_++p(x, x1,..xN)` have the same effects.
* `make_++p` is a _static_function_object_.
* If `N` is `0`, `x|p` and and `make_++p(x)` are valid expressions which has the same effects.

[h3 Models]
* [link oven.filtered filtered]
* [link oven.transformer transformer]

[endsect]




[section Stoppable Generator]

[h3 Description]
A _stoppable_generator_ is a _deferred_callable_object_ which can specify the stop of generating using _boost_optional_.

[h3 Refinement of]
* _deferred_callable_object_

[h3 Requirements]
In addition to the requirements defined in _deferred_callable_object_,
for any _stoppable_generator_ `g` the following must be met:

* `_typeof(g(..))` is a `boost::optional`.
* An /uninitialized/ result is considered as the stop of generating.

[h3 Models]
* Any _deferred_callable_object_ which [link oven.nonstop nonstop] returns.

[endsect]




[section Iteration Block]

[h3 Description]
An _iteration_block_ is a unary _function_object_ that yields an ordered sequence of values.

[h3 Refinement of]
* _function_object_

[h3 Requirements]
In addition to the requirements defined in _function_object_,
for any _iteration_block_ `b` the following must be met:

* For an unspecified unary _function_object_ _s_ `y`, `b(y)` is a valid expression.
* `_typeof(b)::yield_type` is a type of object passed to `y`.

[h3 Models]

[endsect]




[section Constant Range]

[h3 Description]
A _constant_ _range_ is a _range_ whose elements are not modifiable.

[h3 Refinement of]
* _single_pass_ _s_ _range_

[h3 Requirements]
In addition to the requirements defined in _single_pass_ _range_,
for any _constant_ _range_ `r` the following must be met:

* `boost::implicit_cast<_value_of<_typeof(r)>::type&>(*_begin(_r))` is ill-formed.
* `r` is neither _writable_ nor _swappable_.

[h3 Models]
* `std::list<int> const`
* `int const[10]`

[endsect]




[section Contiguous Range]

[h3 Description]
A _contiguous_ _range_ is a _random_access_ _range_ whose elements are stored contiguously.

[h3 Refinement of]
* _random_access_ _s_ _range_
* _lvalue_ _s_ _range_

[h3 Requirements]
In addition to the requirements defined in _random_access_ _range_,
for any _contiguous_ _range_ `r` the following must be met:

* `&*(_begin(r) + n) == &*(_begin(r)) + n` for all `n` such that `0 <= n &&  n < _end(r) - _begin(r)`.

[h3 Models]
* `std::vector<int>`
* `boost::array<char, 50>`

[endsect]




[section Parallel Safe]

[h3 Description]
A _parallel_safe_ type offers the same level of thread safety as built-in types.

[h3 Refinement of]

[h3 Requirements]
For any _parallel_safe_ type `t` the following must be met:

* Different instances of `t` can be accessed simultaneosly by multiple threads (even when these instances are copies).

[h3 Models]
* `int`
* `boost::shared_ptr<int>`

[endsect]




[endsect]
