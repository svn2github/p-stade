[section Ranges]

Oven は有用な range を多数備えている。



[section any_range]

[heading Description]
Oven は _boost_result_of_ をサポートしているが、 range に適合した型にするのが大抵面倒である。 `any_range` は range の type erasure として機能する。

[heading Header]
* `<pstade/oven/any_range.hpp>`

[heading Model of]
* _range_ は、テンプレート引数 `C` に応じてトラバーサルカテゴリが変わる。
* _assignable_
* _copy_constructible_
* _default_constructible_
* _resettable_

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`any_range<R, C>(_rng)`]
        [
            `[_begin(_rng), _end(_rng))` 、このとき、 `boost::range_reference` 型は `R` である。
        ]
    ]
    [
        [`any_range<R, C> any = _rng0;`]
        [`any_range<R, C> any(_rng0);`]
    ]
]

[heading Preconditions]
* `boost::range_reference<_typeof(_rng)>::type` は /rvalue/ への /reference/ を束縛していなければ `R` と交換可能である。
* `C` は `boost::single_pass_traversal_tag` と交換可能である。
* `boost::range_traversal<_typeof(_rng)>::type` は `C` と交換可能である。
* `_rng0` は Oven _function_object_ から返される range であり、 `_rng` の前提条件を満たす。

[heading Example]
    any_range<int, boost::single_pass_traversal_tag> factorials =
        counting(1, 500) |
            scanned(1, regular(lambda::_1 * lambda::_2));

[heading See also]
* [@http://thbecker.net/free_software_utilities/type_erasure_for_cpp_iterators/start_page.html Type Erasure for C++ Iterators]
* _oven_make_range_
* _oven_expression_
* _oven_any_indexed_
* _oven_any_output_iterator_
* _oven_recursion_

[endsect]




[section any_indexed]

[heading Description]
_random_access_ `any_range` のイテレータはコピーのためにヒープアロケーションが必要となる可能性があるが、より制限がきつい `any_indexed` は軽量なコピー可能イテレータを提供する。

[heading Header]
* `<pstade/oven/any_indexed.hpp>`

[heading Model of]
* _random_access_ _s_ _range_
* _assignable_
* _copy_constructible_
* _default_constructible_
* _resettable_

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`any_indexed<R>`]
        [
            `any_range<R, boost::random_access_traversal_tag>`
        ]
    ]
]

[heading Preconditions]
* 対応するセマンティクスは有効な式である。
* `R` が /reference type/ のとき、 初期化、 もしくは `any_indexed<R>` に割り当てられた range は _lvalue_ _s_ _range_ である。
* `any_indexed<R>` は再帰できない。

[heading Example]

[heading See also]
* _oven_any_range_
* _oven_make_range_
* _oven_recursion_

[endsect]




[section array_range]

[heading Description]
`array_range` は noncopyable な、動的にアロケートされた配列の range を表現する _random_access_ _range_ である。

[heading Header]
* `<pstade/oven/array_range.hpp>`

[heading Model of]
* _random_access_ _s_ _range_
* _contiguous_ _s_ _range_

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`array_range<T>(sz)`]
        [`x = new T[sz]` の場合、 `[x, x + sz)`。]
    ]
]

[heading Preconditions]
* `new T[sz]` は有効な式である。

[heading Example]
    std::string str("hello, array_range!");
    boost::array<char, 19> sarr;
    copy(str, sarr|begin);
    array_range<char> darr(19);
    copy(str, darr|begin);

    BOOST_CHECK( equals(sarr, darr) );

[heading See also]
* _boost_array_

[endsect]




[section directory_range]

[heading Description]
`directory_range` はディレクトリの内容を読み取る _single_pass_ _range_ である。

[heading Header]
* `<pstade/oven/directory_range.hpp>`

[heading Model of]
* _single_pass_ _s_ _range_

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`basic_directory_range<P>(p)`]
        [
            `[T(p), T())`
        ]
    ]
    [
        [`directory_range(p)`]
        [
            `basic_directory_range<boost::filesystem::path>(p)`
        ]
    ]
    [
        [`wdirectory_range(p)`]
        [
            `basic_directory_range<boost::filesystem::wpath>(p)`
        ]
    ]
]

[heading Preconditions]
* `T` は `T(p)` が有効な式である場合において、 `boost::filesystem::basic_directory_iterator` である。

[heading Example]
    BOOST_FOREACH (
        boost::filesystem::path const& pt,
        directory_range(boost::filesystem::current_path()))
    {
        std::cout << pt.leaf() << std::endl;
    }

[heading See also]
* [@http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1841.html#Class-template-basic_directory_iterator basic_directory_iterator]

[endsect]



[section empty_range]

[heading Description]
`empty_range` は常に空の _random_access_ _range_ である。

[heading Header]
* `<pstade/oven/empty_range.hpp>`

[heading Model of]
* _random_access_ _s_ _range_
* _contiguous_ _s_ _range_

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`empty_range<V>()`]
        [`[(V *)0, (V *)0)`]
    ]
]

[heading Example]
    BOOST_CHECK( boost::empty(empty_range<int>()) );

[heading See also]
* _oven_cleared_

[endsect]




[section file_range]

[heading Description]
`file_range` はファイルの _random_access_ _constant_ _range_ である。
ファイルオープンに失敗した場合、 range は空である。

[note `file_range` は "binary" である。また、いかなる自動変換も行わない。]

[heading Header]
* `<pstade/oven/file_range.hpp>`

[heading Model of]
* _random_access_ _s_ _range_
* _constant_ _s_ _range_

[heading Notation]
* `r` は `file_range<X1,...,XN>` である。

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`file_range<X1,...,XN>(s)`]
        [
           `[T(s), T())`
        ]
    ]
    [
        [`r.is_open()`]
        [ファイルが正常にオープンされた場合 `true` を返す。]
    ]
]

[heading Invariants]
* `!r.is_open() ? boost::empty(r) : true`

[heading Preconditions]
* `T` は `T(s)` が有効な式である場合において、 `boost::spirit::file_iterator<X1,...,XN>` である。

[note 現行の実装では空のファイルはオープンできない。このため `is_open()` はファイルの存在を判定するためには利用できない。]

[heading Example]
    std::vector<char> vec;
    file_range<char> frng("data.txt");
    copy(frng, std::back_inserter(vec));

[heading See also]
* [@http://www.boost.org/libs/spirit/doc/file_iterator.html boost::spirit::file_iterator]
* _oven_stream_read_

[endsect]




[section as_array]

[heading Description]
ある種の _boost_range_ は `char` の配列を literal と見做す。`as_array` はこれを回避する。

[heading Header]
* `<pstade/oven/as_array.hpp>`

[heading Model of]
* _ambi_ _static_function_object_

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`as_array(a)`]
        [
            [@http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2059.html#as-array as_array proposal]
        ]
    ]
]

[heading Preconditions]
* `a` は配列である。

[heading Example]
    BOOST_CHECK( distance(as_array("abc\0de")) == 7 );   // contains the trailing null.
    BOOST_CHECK( distance(as_c_str("abc\0de")) == 3 );   // null means the end.
    BOOST_CHECK( distance(as_literal("abc\0de")) == 6 ); // null doesn't affect.

[heading See also]
* _string_algo_proposal_
* _oven_as_c_str_
* _oven_as_literal_

[endsect]




[section as_c_str]

[heading Description]
`as_c_str` は ヌル終端のC形式文字列を _random_access_ _range_ にする。

[heading Header]
* `<pstade/oven/as_c_str.hpp>`

[heading Model of]
* _ambi_ _static_function_object_

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`as_c_str(s)`]
        [
            `[s, s + strlen(s))`
        ]
    ]
    [
        [`as_c_str(_rng)`]
        [
            `[_begin(_rng), std::find(_begin(_rng), _end(_rng), 0))`
        ]
    ]
]

[heading Preconditions]
* `_typeof(s)` は `char *` または `char const *` と交換可能である。
* `_typeof(_rng)` は `char *` とも `char const *` とも交換不能である。

[heading See also]
* _string_algo_proposal_
* _oven_as_array_
* _oven_as_literal_

[endsect]




[section as_literal]

[heading Description]
`as_literal` は文字配列を _random_access_ _range_ にする。

[heading Header]
* `<pstade/oven/as_literal.hpp>`

[heading Model of]
* _ambi_ _static_function_object_

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`as_literal(a)`]
        [
           `sz` が配列 a のサイズと同じ場合に `[&a[0], &a[0] + sz-1)` 。
        ]
    ]
    [
        [`as_literal(x)`]
        [
            `x`
        ]
    ]
]

[heading Preconditions]
* `a` は配列である。
* `x` は配列ではない。

[important `as_literal` は `strlen` を使わない。一方 _string_algo_proposal_ では利用している。]

[heading See also]
* _string_algo_proposal_
* _oven_as_array_
* _oven_as_c_str_

[endsect]




[section block]

[heading Description]
`block` は _iteration_block_ から _single_pass_ _range_ を作る。

[heading Header]
* `<pstade/oven/block.hpp>`

[heading Model of]
* _static_function_object_

[heading Notation]
* unary _function_object_ が `b` に渡された場合、 `yield` は未規定である。

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`block(b)`]
        [
            `yield` に渡されたオブジェクトの値となる _single_pass_ _range_ 。
        ]
    ]
]

[heading Preconditions]
* `b` は _iteration_block_ である。
* マルチスレッド・コンパイルが行われなければならない。

[heading Example]
    struct power
    {
        int m_number, m_exponent;

        power(int number, int exponent) :
            m_number(number), m_exponent(exponent)
        { }

        typedef int yield_type;

        template<typename Yield>
        void operator()(Yield yield) const
        {
            int counter = 0;
            int result = 1;
            while (counter++ < m_exponent) {
                result = result * m_number;
                yield(result);
            }
        }
    };

    void test()
    {
        power(2, 8)(std::cout << boost::lambda::_1 << ',');

        BOOST_FOREACH (int x, block(power(2, 8)))
            std::cout << x << ',';
    }

[heading See also]
* [@http://en.csharp-online.net/ECMA-334:_26.1_Iterator_blocks Iterator blocks at C# Online.Net]

[endsect]




[section comprehension]

[heading Description]
保留。 `comprehension` は set-builder notation を模倣する。

[heading Header]
* `<pstade/oven/comprehension.hpp>`

[heading Model of]
* _static_function_object_

[heading Notation]
* `d(I) = distance(_rngI)`
* `a(1,j)` は `makerng1()` の `j` 番目の要素である。
* もし `I >= 2` であるならば、 `a(I,j)` は `makerngI(a(I-1, u))` の `j` 番目の要素である。

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`comprehension(_fun, _prd, makerng1,...,makerngN)`]
        [
			\_prd でフィルターされた _forward_ _lvalue_ _constant_ `{_fun(a(1,1),a(2,1),...a(N,1)),_fun(a(1,1),a(2,1),...a(N,2)),...,_fun(a(1,1),a(2,1),...a(N,d(N))),...}` 。
        ]
    ]
    [
        [`always_return`]
        [
            _static_function_object_
        ]
    ]
    [
        [`always_return(b)`]
        [
            `boost::lambda::constant(b)`
        ]
    ]
    [
        [`always_return(_rng)`]
        [
            `boost::lambda::constant([_begin(_rng), _end(_rng)))`
        ]
    ]
]

[note `_fun(...)` の結果はコピーされるが、 `makerngI` が返す range は `comprehension(...)` より長い生存期間を持たなければならない。] 

[heading Preconditions]
* `N <= 3`
* `_fun` は `N`-ary _polymorphic_function_object_ か _boost_lambda_ ファンクタである。
* `_typeof(_fun(...))` は _copy_constructible_ である。
* どんな `I` についても、 `makerngI` は `I-1`-ary _polymorphic_function_object_ か _range_ を返す _boost_lambda_ ファンクタである。
* `_prd` は `N`-ary である。
* `_typeof(b)` は `bool` である。

[heading Example]
    namespace bll = boost::lambda;

    typedef
        boost::tuple<int, int, int>
    triple_t;

    struct make_triple
    {
        typedef triple_t result_type;

        result_type operator()(int x, int y, int z) const
        {
            return result_type(x, y, z);
        }
    };

    typedef
        any_range<triple_t, boost::forward_traversal_tag>
    triples_t;

    triples_t triples(int n)
    {
        return
            comprehension(
                ::make_triple(),
                bll::_1 * bll::_1 + bll::_2 * bll::_2 == bll::_3 * bll::_3, // guard
                bll::bind(counting, 1, n + 1),                              // -> _1
                bll::bind(counting, bll::_1, n + 1),                        // -> _2
                bll::bind(counting, bll::_2, n + 1)                         // -> _3
            );
    }

    void test()
    {
        std::stringstream sout;
        sout << ::triples(20);
        BOOST_CHECK(sout.str() == "{(3 4 5),(5 12 13),(6 8 10),(8 15 17),(9 12 15),(12 16 20)}");
    }

[heading See also]
* [@http://en.wikipedia.org/wiki/List_comprehension List comprehension]

[endsect]




[section counting]

[heading Description]
`counting` は _lvalue_ _range_ ではない `boost::counting_iterator` range を作る。

[heading Header]
* `<pstade/oven/counting.hpp>`

[heading Model of]
* _static_function_object_

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`X_counting<X1,...,XN>`]
        [
            _major_function_object_ 型
        ]
    ]
    [
        [`X_counting<X1,...,XN>()(i, j)`]
        [
            `[T(i), T(j))`
        ]
    ]
    [
        [`counting(i, j)`]
        [`X_counting<>()(i, j)`]
    ]
    [
        [`counting(i, max_count)`]
        [`X_counting<>()(i, std::numeric_limits<_typeof(i)>::max())`]
    ]
]

[heading Preconditions]
* `0 <= N && N <= 2`
* `T` は `T(i)` and `T(j)` が有効な式となる `boost::counting_iterator<_typeof(j), X1,...,XN>` である。

[heading Example]
    int ans[] = { 2, 3, 4, 5, 6 };
    BOOST_CHECK( equal(counting(2, 7), ans) );

    std::vector<int> vec;
    BOOST_FOREACH (int i, counting(0, 5)) {
        vec.push_back(i);
    }

[heading See also]
* [@http://www.boost.org/libs/iterator/doc/counting_iterator.html boost::counting_iterator]

[endsect]




[section generation]

[heading Description]
`generation` は _stoppable_generator_ から _single_pass_ _range_ を作る。

[heading Header]
* `<pstade/oven/generation.hpp>`

[heading Model of]
* _static_function_object_

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`generation(g)`]
        [
            `g()` が /uninitialized/ ではない場合、最長の _single_pass_ `{*g(),*g(),*g(),...,*g()}` を生成する。
        ]
    ]
]

[heading Preconditions]
* `g` は nullary _stoppable_generator_ である。
* `g` は _assignable_ である。
* `_typeof(*g())` は _copy_constructible_ かつ _assignable_ である。

[heading Example]
    struct rand_generator
    {
        typedef boost::optional<long> result_type;

        result_type operator()()
        {
            long result = std::rand();
            if (result % 3 == 0)
                return result_type(); // stop generating.

            return result;
        }
    };

    void test()
    {
        rand_generator X;
        BOOST_FOREACH (long x, generation(X)) {
            std::cout << x << std::endl;
        }
    }

[heading See also]
* [@http://www.boost.org/libs/utility/generator_iterator.htm boost::generator_iterator]
* _oven_iteration_
* _oven_unfold_
* _oven_nonstop_
* _oven_regular_
* _oven_regular_ref_

[endsect]




[section hetero]

[heading Description]
`hetero` は "tuple" を走査する。

[heading Header]
* `<pstade/oven/hetero.hpp>`

[heading Model of]

[heading Notation]
* `N` は `boost::fusion::result_of::size<_typeof(tup)>::type::value` である。

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`X_hetero<Ref>`]
        [
            _major_function_object_ 型
        ]
    ]
    [
        [`X_hetero<Ref>()(tup)`]
        [
            _random_access_ `{(Ref)boost::fusion::at_c<0>(tup),...,(Ref)boost::fusion::at_c<N-1>(tup)}`
        ]
    ]
    [
        [`oven::hetero<Ref>`]
        [
            `X_hetero<Ref>()`
        ]
    ]
]

[heading Preconditions]
* `tup` は _fusion_forward_sequence_ か `boost::tuple<...>` である。
* `0 <= N && N < 20`.
* `0 <= I && I < N` を満たす全ての `I` について、`Ref` は rvalue への reference を束縛していなければ `boost::fusion::result_of::at_c<_typeof(tup), I>::type` と交換可能である。

[heading Example]
    rectangle r; triangle t; circle c;
    boost::tuple<rectangle*, triangle*, circle*> tup(&r, &t, &c);
    BOOST_FOREACH (shape *s, oven::hetero<shape *>(tup)) {
        s->draw();
    }

[heading See also]
* _boost_fusion_

[endsect]




[section initial_values]

[heading Description]
`initial_values` は initializer-lists を模倣する。

[heading Header]
* `<pstade/oven/initial_values.hpp>`

[heading Model of]
* _static_function_object_

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`X_initial_values<T>`]
        [
            _major_function_object_ 型
        ]
    ]
    [
        [`X_initial_values<T>()(a1,...,aN)`]
        [
            _random_access_ _readable_ _lvalue_ _constant_ `{a1,...,aN}`
        ]
    ]
    [
        [`Rng rng = X_initial_values<T>()(a1,...,aN);`]
        [
            `Rng rng = X_initial_values<T>()(a1,...,aN)|copied;`
        ]
    ]
    [
        [`Rng2 rng2(X_initial_values<T>()(a1,...,aN));`]
        [
            `Rng2 rng2(X_initial_values<T>()(a1,...,aN)|copied);`
        ]
    ]
    [
        [`initial_values`]
        [
            `X_initial_values<t>()` 、この文脈において `t` は最初の引数から推論される。
        ]
    ]
]

[note 全ての `aK` はコピーされる。このため、以降これらは Oven から参照されない。]

[heading Preconditions]
* `1 <= N && N <= 20`
* `_typeof(aK)` は `1 <= K && K <= N` を満たす全ての `K` について _copy_constructible_ である。
* `_typeof(aK)` は `2 <= K && K <= N` を満たす全ての `K` について `_typeof(a1)` と交換可能である。
* `Rng rng = X_initial_values<T>()(a1,...,aN)|copied;` は有効な式である。
* `Rng2 rng2(X_initial_values<T>()(a1,...,aN)|copied);` は有効な式である。

[tip `initial_values` は軽量な `boost::array` の初期化を行うために引数の制限を設けた。また、 `initial_values` は引数が _assignable_ でなくてもよい。]

[heading Example]
    int const ans[] = { 1,5,3,6,1,3,7,1,4,2,2 };
    std::vector<int> vec = initial_values(1,5,3,6,1,3,7,1,4,2,2);
    BOOST_CHECK( equals(vec, ans) );

[heading See also]
* _boost_array_
* _boost_assign_
* _oven_copied_

[endsect]




[section iteration]

[heading Description]
`iteration` は第一引数が最初の項目となり、以降の項目は一つ前の項目に関数を適用した結果となるような無限の _forward_ _range_ を作る。

[note 厳密には _range_ の概念は無限の _range_ を認めていない。よって、ここでは end iterator は begin iterator から天文学的にインクリメントすれば到達可能であると見做す。]

[heading Header]
* `<pstade/oven/iteration.hpp>`

[heading Model of]
* _static_function_object_

[heading Notation]
* `just` は `y -> boost::optional<_typeof(x)>(y)` となる架空の関数オブジェクトである。

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`iteration(x, _fun)`]
        [
            `unfold(x, just, _fun)`
        ]
    ]
]

[heading Preconditions]
* 対応するセマンティクスは有効な式である。

[heading Example]
    int answer[] = { 1,2,4,8,16 };
    BOOST_CHECK( equals(answer,
        iteration(1, regular(boost::lambda::_1 * 2))|taken(5)
    ) );

[heading See also]
* _oven_unfold_
* _oven_generation_
* _oven_taken_

[endsect]




[section make_range]

[heading Description]
Oven で定義される型は非常に厳密であるためサードパーティの _range_ から `any_range` を /copy-initialize/ できない。このため、時として `make_range` を呼ぶ必要に迫られるかもしれない。これは外部の range を Oven 互換の iterator-range に変換する。

[heading Header]
* `<pstade/oven/make_range.hpp>`

[heading Model of]
* _static_function_object_

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`make_range(_rng)`]
        [
            `[_begin(_rng), _end(_rng))`
        ]
    ]
    [
        [`make_range(i, j)`]
        [
            `[i, j)`
        ]
    ]
]

[heading Preconditions]
* 対応するセマンティクスは有効な式である。

[heading See also]
* _oven_any_range_
* _oven_any_indexed_

[endsect]




[section recursion]

[heading Description]
保留。 `recursion` は _oven_any_range_ と組み合わせて再帰 range を作る。

[heading Header]
* `<pstade/oven/recursion.hpp>`

[heading Model of]
* _static_function_object_

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`recursion(_fwdrng)`]
        [
            up-to-_bidirectional_ `[_begin(_fwdrng), _end(_fwdrng))`
        ]
    ]
]

[heading Preconditions]
* `_fwdrng` は `any_range` である。
* 基となる range の全ての `memoized` は、独自の `memo_table` オブジェクトを持つ。

[heading Example]
    typedef any_range<int const&, boost::forward_traversal_tag> range_t;
    range_t fibs;
    memo_table tb;
    int const start[] = { 1, 1 };
    fibs =
        start
            | rvalues // for jointed precondition
            | jointed(
                boost::make_tuple(recursion(fibs), recursion(fibs)|dropped(1))
                    | zipped_with(regular(boost::lambda::_1 + boost::lambda::_2))
                )
            | memoized(tb)
    ;

    std::cout << (fibs|taken(howMany));

[note 再帰 range では、 `memoized` は必ず `memo_table` という名前のオブジェクトをもつ。再帰 range はメモ化なしでは非効率になる傾向がある。]

[heading See also]
* _oven_any_range_
* _oven_memoized_

[endsect]




[section shared]

[heading Description]
`shared` はヒープにアロケートされた range へのポインタから range を作る。また、 iterator はアロケーションを管理する。

[heading Header]
* `<pstade/oven/shared.hpp>`

[heading Model of]
* _static_function_object_

[heading Notation]
* `shared_range_iterator` は `boost::shared_container_iterator` のように機能する架空のイテレータである。ただし、 `shared_range_iterator` は container の代わりに range を利用する。

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`shared(p)`]
        [
            `[T(_begin(*p), sp), T(_end(*p), sp))`
        ]
    ]
]

[heading Preconditions]
* `sp(p)` が有効な式の場合、 `sp` は `boost::shared_ptr<_typeof(*p)>(p)` である。
* `T(_begin(*p), sp)` が有効な式の場合、 `T` は `shared_range_iterator<_typeof(*p)>` である。

[heading Example]
    BOOST_FOREACH (char ch, std::string("dangling")|identities) {
        // will crash; 'std::string' object doesn't exist anymore. 
        std::cout << ch;
    }

    BOOST_FOREACH (char ch, shared(new std::string("ok"))|identities) {
        // works fine.
        std::cout << ch;
    }

[heading See also]
* [@http://www.boost.org/libs/utility/shared_container_iterator.html shared_container_iterator]
* _oven_shared_single_

[endsect]




[section single]

[heading Description]
`single` はあるオブジェクトの range 表現となる _random_access_ _range_ を作る。

[heading Header]
* `<pstade/oven/single.hpp>`

[heading Model of]
* _static_function_object_

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`single(x)`]
        [`[&x, &x + 1)`]
    ]
]

[note セマンティクスがほのめかすように、 iterator は `x` が破棄されるまで有効である。もし基となったオブジェクトの有効期間を管理する iterator が必要なら、 _oven_shared_single_ を利用する。]

[heading Example]
    BOOST_CHECK( equals(single('a'), std::string("a")) );

[heading See also]
* _oven_shared_single_

[endsect]




[section shared_single]

[heading Description]
`shared_single` はヒープにアロケートされたオブジェクトへのポインタを基に、 pointee の range 表現を提供する。

[heading Header]
* `<pstade/oven/shared_single.hpp>`

[heading Model of]
* _static_function_object_

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`shared_single(p)`]
        [`[&*p, &*p + 1)`]
    ]
]

[heading Preconditions]
* `boost::shared_ptr<_typeof(*p)>(p)` は有効な式である。

[heading Example]
    boost::result_of<T_shared_single(char *)>::type
    make_rng()
    {
        return shared_single(new char('a'));
    }

[heading See also]
* _oven_single_

[endsect]




[section stream_lines]

[heading Description]
`stream_lines` は `std::cout` などから `std::string` の _single_pass_ _range_ を作る。

[heading Header]
* `<pstade/oven/stream_lines.hpp>`

[heading Model of]
* _static_function_object_

[heading Notation]
* `DefaultA` は `std::allocator<_typeof(s)::char_type>` である。

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`X_stream_lines<A = DefaultA>`]
        [
            _major_function_object_ 型
        ]
    ]
    [
        [`X_stream_lines<A>()(s)`]
        [
           `[T(s), T())`
        ]
    ]
    [
        [`stream_lines`]
        [
           `X_stream_lines<>()`
        ]
    ]
]

[heading Preconditions]
* `T(s)` が有効な式の場合、 `T` は `hamigaki::istream_line_iterator<_typeof(s)::char_type, _typeof(s)::traits_type, A>` である。

[heading Example]

[heading See also]
* [@http://hamigaki.sourceforge.jp/doc/html/istream_line_iterator.html hamigaki::istream_line_iterator]
* _oven_stream_read_

[endsect]




[section stream_read]

[heading Description]
`stream_read` は `std::cout` などから _single_pass_ _range_ を作る。

[heading Header]
* `<pstade/oven/stream_read.hpp>`

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`X_stream_read<V, D = std::ptrdiff_t>`]
        [
            _major_function_object_ 型
        ]
    ]
    [
        [`X_stream_read<V, D>()(s)`]
        [
           `[T(s), T())`
        ]
    ]
    [
        [`oven::stream_read<V>()(s)`]
        [
           `X_stream_read<V>()(s)`
        ]
    ]
]

[important 予期しない ADL を回避するために、 `stream_read<V>(s)` は `oven::` で修飾されている事に注意。]

[heading Preconditions]
* `T(s)` が有効な式の場合、 `T` は `std::istream_iterator<V, _typeof(s)::char_type, _typeof(s)::traits_type, D>` である。

[heading Example]
    std::string src("hello,stream_read!");

    std::stringstream ss;
    ss << src;

    std::string result;
    copy(oven::stream_read<char>(ss), std::back_inserter(result));

    BOOST_CHECK( equals(result, src) );

[heading See also]
* [@http://www.sgi.com/tech/stl/istream_iterator.html std::istream_iterator]
* _oven_file_range_
* _oven_stream_lines_
* _oven_stream_writer_

[endsect]




[section streambuf_read]

[heading Header]
* `<pstade/oven/stream_read.hpp>`

[heading Model of]
* _static_function_object_

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`streambuf_read(s)`]
        [
            `[T(s), T())`
        ]
    ]
    [
        [`streambuf_read(p)`]
        [
            `[U(p), U())`
        ]
    ]
]

[heading Preconditions]
* `T(s)` が有効な式の場合、 `T` は `std::istreambuf_iterator<_typeof(s)::char_type, _typeof(s)::traits_type>` である。
* `U(p)` が有効な式の場合、 `U` は `std::istreambuf_iterator<_typeof(*p)::char_type, _typeof(*p)::traits_type>` である。

[endsect]




[section unfold]

[heading Description]
`unfold` はシードから range を作る。

[heading Header]
* `<pstade/oven/unfold.hpp>`

[heading Model of]
* _static_function_object_

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`unfold(z, f, g)`]
		[
            `f(...)` が /uninitialized/ でない場合、最長の _forward_ `{f(z),f(g(z)),f(g(g(z))),f(g(g(g(z)))),...}` を生成する。
		]
	]
]

[note `z` はコピーされる。このため、以降これらは Oven から参照されない。]

[heading Preconditions]
* `z`, `f(...)` および `g` は _assignable_, _copy_constructible_ and _default_constructible_ である。
* `f` は unary _stoppable_generator_ である。
* `_typeof(z) z1 = z` のとき `z1 = g(z1)` が適格である場合、 `g` は _function_object_ である。
* `f` および `g` は [@http://planetmath.org/encyclopedia/Mapping.html mapping]。 つまり `a == b` ならば `f(a) == f(b)` である。

[heading Example]
    boost::optional<int> mod(int i)
    {
        if (i == 0)
            return boost::optional<int>();

        return i % 10;
    }

    void test()
    {
        int const answer[] = { 1,5,4,1,9,2,3,6,1 };
        BOOST_CHECK( equals(unfold(163291451, &mod, lambda::_1 / 10), answer) );
    }

[heading See also]
* _oven_generation_
* _oven_iteration_

[endsect]




[endsect]
