[section Extending Boost.Range]

Pending section...




[section Concept-like extension]

[heading Description]
Ovenは、 _boost_range_ のConceptライク拡張をエミュレートする。

[heading Header]
* `<pstade/oven/extension.hpp>`

[heading Notation]
* `X` は、 _boost_range_ を拡張する型である。
* `x` は、(const-qualifiedされた) `X` のオブジェクトである。
* `ER` は、 `::pstade_oven_extension::Range<X>` である。
* `XS` は、 typename `X` の _boost_preprocessor_ シーケンスである。
* `N` は、全てのテンプレート引数が typename である場合のみ有効な、 `X` のテンプレート引数の数である。
* `S` は、 `X` のテンプレート引数のシーケンスである。

[heading Effects]
* `X` は、 _range_ のモデルとなる。

[heading Preconditions]
* `ER::associate<X>::mutable_iterator` は、 `X` の mutable iterator 型である。
* `ER::associate<X>::constant_iterator` は、 `X` の constant iterator 型である。
* `ER::begin<_iter_of<typeof(x)>::type>(x)` は、 begin iterator を返す有効な式である。
* `ER::end<_iter_of<typeof(x)>::type>(x)` は、 end iterator を返す有効な式である。
* `X` が型である場合、 `PSTADE_OVEN_EXTENSION_OF_TYPE(X)` はグローバル名前空間に置かれる。
* `X` がテンプレートである場合、 `PSTADE_OVEN_EXTENSION_OF_TEMPLATE(XS, N)` もしくは `PSTADE_OVEN_EXTENSION_OF_TEMPLATE(XS, S)` はグローバル名前空間に置かれる。

[heading Example]
    namespace Foo {

        template< class T >
        struct Pair
        {
            T first, last;
        };

    } // namespace Foo

    namespace pstade_oven_extension {

        template< class T >
        struct Range< Foo::Pair<T> >
        {
            // X == Foo::Pair<T>
            template< class X >
            struct associate
            {
                typedef T mutable_iterator;
                typedef T constant_iterator;
            };

            // if X is not const, Iterator == mutable_iterator;
            // otherwise, Iterator == constant_iterator.
            template< class Iterator, class X >
            Iterator begin(X& x)
            {
                return x.first;
            }

            template< class Iterator, class X >
            Iterator end(X& x)
            {
                return x.last;
            }
        };

    } // namespace pstade_oven_extension

    PSTADE_OVEN_EXTENSION_OF_TEMPLATE((Foo)(Pair), (class))
    // PSTADE_OVEN_EXTENSION_OF_TEMPLATE((Foo)(Pair), 1) // also ok.

[heading See also]
* [@http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2196.html Wording for range-based for-loop]
* [@http://www.generic-programming.org/software/ConceptGCC/ ConceptGCC]
* _boost_preprocessor_

[endsect]




[section ATL extension]

[heading Header]
* `<pstade/oven/atl.hpp>`

[heading See]
* [@../../ms/doc/mfc_atl.html MFC/ATL Extension]

[endsect]




[section MFC extension]

[heading Header]
* `<pstade/oven/mfc.hpp>`

[heading See]
* [@../../ms/doc/mfc_atl.html MFC/ATL Extension]

[endsect]




[section WTL extension]

[heading Header]
* `<pstade/oven/wtl.hpp>`

[endsect]




[endsect]
