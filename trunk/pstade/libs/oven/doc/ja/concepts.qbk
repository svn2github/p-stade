[section Concepts]




[section Pipable Adaptor]

[heading Description]
_pipable_adaptor_ は、関連する _static_function_object_ の使用する `make_` プレフィックスを持つ _pipable_fuction_object_ である。

[heading Refinement of]
* _pipable_fuction_object_

[heading Requirements]
refinements において定められる要件に加えて、任意の _pipable_adaptor_ `p` は以下を満たさなければならない:

* `_typeof(p)` は /POD/ 型であり、 `p` は静的初期化( /statically initialized/ )される。
* `make_++p(x, x1,...,xN)` が有効な式である場合、 `x|p(x1,...,xN)` もまた有効な式である。
* `x|p(x1,...,xN)` と `make_++p(x, x1,...,xN)` は同じ効果を持つ。
* `make_++p` は _static_function_object_ である。
* `N` が `0` である場合、 `x|p` と `make_++p(x)` は同じ効果を持つ有効な式である。

[heading Models]
* _oven_filtered_
* _oven_transformer_

[endsect]




[section Resettable Object]

[heading Description]
_resettable_object_は、構築後に変更可能なオブジェクトである。

[heading Refinement of]

[heading Notation]
* `r` : _resettable_object_
* `R` : `_typeof(r)`
* `s` : `R` 型のオブジェクト
* `aI` : オブジェクト
* `bI` : `_typeof(aI)` 型のオブジェクト

[heading Requirements]
* `s = b0;` が有効な式である場合、 `R r(a0);` は有効な式である。
* `s.reset(b1,...bN);` が有効な式である場合、`R r(a1,...,aN);` は有効な式である。
* 上記の2つの等式が評価された後、すべての引数が同じ状態持つならば、 `s` と `r` は同じ状態を持つ。
* `R s = boost::none;` が有効な式である場合、 `R r;` は有効な式である。
* `s.reset();` が有効な式である場合、 `R r;` は有効な式である。
* `s = boost::none;` が有効な式である場合、 `R r;` は有効な式である。
* 上記の3つの等式が評価された後、 `s` と `r` は同じ状態を持つ。

[heading Example]

[heading Models]
* _oven_any_range_
* _oven_any_indexed_
* _oven_any_output_iterator_

[heading See also]

[endsect]




[section Stoppable Generator]

[heading Description]
_stoppable_generator_ は _boost_optional_ を使用することで生成の停止を指定することができる _polymorphic_function_object_ である。

[heading Refinement of]
* _polymorphic_function_object_

[heading Requirements]
任意の _stoppable_generator_ `g` は、refinementsによって定義された要件に加えて、以下も満たさなければならない:

* `_typeof(g(...))` は `boost::optional` である。
* 未初期化の結果は生成停止と見なされる。

[heading Models]
* あらゆる _polymorphic_function_object_ に対して _oven_nonstop_ を返す。

[endsect]




[section Iteration Block]

[heading Description]
_iteration_block_ は値の順序付けされたシーケンスを産出(yield)する単項の _function_object_ である。

[heading Refinement of]
* _function_object_

[heading Requirements]
任意の _iteration_block_ `b` は、 _function_object_ で定義された要件に加えて、以下も満たさなければならない:

* 未規定の単項 _function_object_ `y` において、 `b(y)` は有効な式である。
* `_typeof(b)::yield_type` は、 `y` に渡されたオブジェクトの型である。

[heading Models]

[endsect]




[section Constant Range]

[heading Description]
_constant_ _range_ は、その要素が変更可能ではない _range_ である。

[heading Refinement of]
* _single_pass_ _s_ _range_

[heading Requirements]
任意の _constant_ _range_ `r` は、refinementsによって定義された要件に加えて、以下も満たさなければならない:

* `boost::implicit_cast<_value_of<_typeof(r)>::type&>(*_begin(_r))` は不適格である。
* `r` は _writable_ でも _swappable_ でもない。

[heading Models]
* `std::list<int> const`
* `int const[10]`

[endsect]




[section Contiguous Range]

[heading Description]
_contiguous_ _range_ は、要素が連続して格納される _random_access_ _range_ である。

[heading Refinement of]
* _random_access_ _s_ _range_
* _lvalue_ _s_ _range_

[heading Requirements]
任意の _contiguous_ _range_ `r` は、refinementsによって定義された要件に加えて、以下も満たさなければならない:

* 全ての `n` について、 `&*(_begin(r) + n) == &*(_begin(r)) + n` は `0 <= n &&  n < _end(r) - _begin(r)` である。

[heading Models]
* `std::vector<int>`
* `boost::array<char, 50>`

[endsect]




[section Parallel Safe]

[heading Description]
_parallel_safe_ 型は、組み込み型としてスレッド安全性と同じレベルを提供する。

[heading Refinement of]

[heading Requirements]
任意の _parallel_safe_ 型 `t` は、以下を満たさなければならない:

* `t` の異なるインスタンスは、複数のスレッドから(これらのインスタンスがコピーである場合でも)同時にアクセスできる。

[heading Models]
* `int`
* `boost::shared_ptr<int>`

[endsect]




[endsect]
