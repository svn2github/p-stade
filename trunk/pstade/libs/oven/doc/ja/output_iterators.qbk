[section Output Iterators]

Oven は、いくつかの有用な Output Iterator を提供する。




[section any_output_iterator]

[heading Description]
`any_output_iterator` は、あらゆる _output_iterator_ でも代入可能な _output_iterator_ である。

[heading Header]
* `<pstade/oven/any_output_iterator.hpp>`

[heading Model of]
* _output_iterator_
* _default_constructible_
* _resettable_

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`any_output_iterator<V>(_outit)`]
        [イテレータ操作が `_outit` に転送される _output_iterator_ である。]
    ]
]

[heading Preconditions]
* `V` は、 `_outit` に出力される (おそらく参照) 型を指定する。

[heading Example]
    int const in[] = { 1,2,3,4,5,6,7,8,9,10 };
    int const answer[] = {2*3,4*3,6*3,8*3,10*3};
    std::vector<int> out;
    any_output_iterator<int> o1, o2;
    o1 = filterer(regular(bll::_1 % 2 == 0)) |= std::back_inserter(out);
    o2 = transformer(regular(bll::_1 * 3)) |= o1;
    copy(in,  o2);
    BOOST_CHECK( equals(out, answer) );

[heading See also]
* _oven_any_range_

[endsect]




[section applier]

[heading Description]
`applier` は、引数として渡された単項の関数を各要素に割り当てる _output_iterator_ を返す。

[heading Header]
* `<pstade/oven/applier.hpp>`

[heading Model of]
* _static_function_object_

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`applier(_fun)`]
        [
            `T(_fun)`
        ]
    ]
]

[heading Preconditions]
* `boost::function_output_iterator<typeof(_fun)>` である `T` において、 `T(_fun)` は有効な式である。
* `_fun` は _assignable_ である。

[heading Example]

[heading See also]
* [@http://www.boost.org/libs/iterator/doc/function_output_iterator.html boost::function_output_iterator]
* _oven_applied_

[endsect]




[section eater]

[heading Description]
`eater` は、入力を無視する _output_iterator_ を返す。

[heading Header]
* `<pstade/oven/eater.hpp>`

[heading Model of]
* _static_function_object_

[heading Notation]
* `f_` は、 `v -> (void)v` のように振舞う _function_object_ である。

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`eater()`]
        [
            `applier(f_)`
        ]
    ]
]

[heading Preconditions]
* 対応するセマンティクスは有効な式である。

[heading Example]

[heading See also]
* _oven_applier_
* _oven_intercepter_

[endsect]




[section stream_writer]

[heading Description]
`stream_writer` は、 `std::ostream_iterator` の短い表記のバージョンの _output_iterator_ である。
これは、出力するべき `value_type` を指定するために明示的なテンプレートパラメータを必要としない。しかし、以下の特別な事前条件を満たさなければならない。しかしそれは、 `converter` を使用することによって容易に保証することができる。

[heading Header]
* `<pstade/oven/stream_writer.hpp>`

[heading Model of]
* _static_function_object_

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`stream_writer(s, d)`]
        [
            `T(s, d)`
        ]
    ]
    [
        [`stream_writer(s)`]
        [
            `stream_writer(s, 0)`
        ]
    ]
]

[注： `stream_writer` は、最後の要素の後に余分な区切り文字を書きこむ。]

[heading Preconditions]
* `hamigaki::ostream_iterator<unspecified, _typeof(s)::char_type, _typeof(s)::traits_type>` である `T` において、 `T(s, d)` は有効な式である。
* `_typeof(stream_writer(s))::operator=` に渡されるオブジェクトは、 _output_streamable_ である。

[heading Example]
    std::vector<std::string> sample
        = initial_values("hello", "oven", "stream_writer");

    {
        std::ofstream fout("read.txt");
        copy(sample, stream_writer(fout, " "));
    }

    {
        std::ifstream fin("read.txt");
        BOOST_CHECK( equals(
            oven::stream_read<std::string>(fin),
            sample
        ) );
    }

[heading See also]
* [@http://hamigaki.sourceforge.jp/doc/html/ostream_iterator.html hamigaki::ostream_iteraotor]
* [@http://www.sgi.com/tech/stl/ostream_iterator.html std::ostream_iterator]
* _oven_delimited_
* _oven_stream_read_
* _oven_converter_

[endsect]




[section streambuf_writer]

[heading Description]
`streambuf_writer` は、 `std::ostreambuf_iterator` のオブジェクトジェネレータである。

[heading Header]
* `<pstade/oven/stream_writer.hpp>`

[heading Model of]
* _static_function_object_

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`streambuf_writer(s)`]
        [
            `T(s)`
        ]
    ]
    [
        [`streambuf_writer(p)`]
        [
            `U(p)`
        ]
    ]
]

[heading Preconditions]
* `std::ostreambuf_iterator<typeof(s)::char_type, typeof(s)::traits_type>` である `T` において、 `T(s)` は有効な式である。
* `std::ostreambuf_iterator<typeof(*p)::char_type, typeof(*p)::traits_type>` である `U` において、 `U(p)` は有効な式である。

[heading Example]

[heading See also]

[endsect]




[section std_stream_writer]

[heading Description]
`std_stream_writer` は、 `std::ostream_iterator` のように振舞う _output_iterator_ を返す。

[heading Header]
* `<pstade/oven/stream_writer.hpp>`

[heading Model of]
* _static_function_object_

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`std_stream_writer(s, d)`]
        [
            `stream_writer(s, d)` だが、終了区切り文字である `d` を出力する。
        ]
    ]
    [
        [`std_stream_writer(s)`]
        [
            `stream_writer(s)`
        ]
    ]
]

[heading Preconditions]
* 対応するセマンティクスは有効な式である。

[注： `std_stream_writer` は出力のためにテンプレートパラメータとして `value_type` をとらない。それを指定したい場合は `converter` を使用すること。 ]

[heading Example]

[heading See also]
* [@http://www.sgi.com/tech/stl/ostream_iterator.html std::ostream_iterator]
* _oven_stream_writer_
* _oven_converter_

[endsect]




[endsect]
