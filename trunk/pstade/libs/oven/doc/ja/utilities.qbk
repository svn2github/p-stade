[section Utilities]

Ovenと他のライブラリの間の溝を埋めるためにいくつかのヘルパー関数オブジェクトが用意されている。

[section:adapted_to_base adapted_to/to_base]

[heading Description]
`adapted_to` は ベースのイテレータをアダプトされたものから取り出す。

[heading Header]
* `<pstade/oven/adapted_to_base.hpp>`

[heading Model of]
* `to_base` は _ambi_ _static_function_object_ である。

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`oven::adapted_to<B>(a)`]
        [`_typeof(a.base().base() ... .base())` が `B` に変換可能な `a.base().base() ... .base()` のうち、最も短いものを返す。]
    ]
    [
        [`B b = to_base(a);`]
        [`B b = oven::adapted_to<B>(a);`]
    ]
]

[heading Preconditions]
* `B` は _copy_constructible_ である。
* `_typeof(a)` は `boost::is_convertible` に対して正しくはたらく。
* `_typeof(a.base().base() ... .base())` が `B` であるような、(空であり得る)aの列 `{ base(), ..., base() }` が存在する。

[heading Example]
    std::string src("cjaigvwzenqhe");
    std::string::const_iterator it =
        max_element(
            src
                | filtered(regular(boost::lambda::_1 != 'z'))
                | filtered(regular(boost::lambda::_1 != 'w'))
        )|to_base;

    BOOST_CHECK( *it == 'v' );

[endsect]




[section expression]

[heading Description]
_oven_any_range_ はあらゆるイテレータの操作に仮想関数呼び出しのオーバヘッドを負っている。
もしあなたの使っているコンパイラがネイティブなtypeofをサポートしているならば _boost_typeof_ の力を借りてこのオーバヘッドを除去できる。
`expression` は range を _boost_typeof_ に適合するものに変換し、可能であればオーバヘッドを除去する。

[heading Header]
* `<pstade/oven/expression.hpp>`

[heading Model of]
* _static_function_object_

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`expression(_rng)`]
        [_boost_typeof_ マクロに使用しうる `[_begin(_rng), _end(_rng))` 。]
    ]
]

[heading Preconditions]
* `_typeof(*boost::begin(_rng))` は `_value_of<_typeof(_rng)>::type` と等しい。
* `_value_of<_typeof(_rng)>::type` は _boost_typeof_ に登録されている。

[note たとえネイティブなtypeofが使用できなくても precondition が適合する限り、 _boost_typeof_ マクロを使用した `expression` は可搬性がある。]

[heading Example]
    BOOST_AUTO(factorials,
        expression(counting(1, max_count)|scanned(1, regular(boost::lambda::_1 * boost::lambda::_2))) );

[heading See also]
* _boost_typeof_
* _oven_any_range_

[endsect]




[section FOREACH]

[heading Description]
`PSTADE_OVEN_FOREACH` は `BOOST_FOREACH` に似ているが, イテレート時の参照型を書く必要がない。

[heading Header]
* `<pstade/oven/foreach.hpp>`

[heading Notation]
* `auto` は `auto x = y;` が `_typeof(y) x = y;` に等しくなるような架空のオペレータである。

[heading Valid expression and Semantics]
    PSTADE_OVEN_FOREACH(var, _rng)
        statement

は概念的に以下と等価である。

    auto __rng = expression(_rng);
    for (auto __begin = boost::begin(__rng), __end = boost::end(__rng); __begin != __end; ++__begin) {
         boost::iterator_reference<_typeof(__begin)>::type var = *__begin;
         statement
    }

ここで `__rng`, `__begin`, `__end` は解説用にのみ定義された変数である。

[important この構文は range の参照が `PSTADE_OVEN_FOREACH` 文を超える寿命を持つ必要が有る事を暗に示している。 `BOOST_FOREACH` と違い、こちらはrvalueである `_rng` をコピーしない。]

[heading Preconditions]
*`expression(_rng)` における preconditions。
* 対応するセマンティクスの振る舞いが明確に定義されている。
* もし `_rng` が依存名であるならば、 `PSTADE_OVEN_FOREACH_TPL` の方を使わなければならない。

[heading Example]
    std::string hello("Hello, world!");
    PSTADE_OVEN_FOREACH (ch, hello) {
        std::cout << ch;
    }

[heading See also]
* [@http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2243.html Wording for range-based for-loop]
* _boost_typeof_
* _oven_expression_

[endsect]




[section io.hpp]

[heading Description]
ヘッダ `<pstade/oven/io.hpp>` は Oven の range を _input_streamable_ かつ _output_streamable_ にする。

[heading Header]
* `<pstade/oven/io.hpp>`

[heading Effects]
Oven で定義されていて Oven によって返される全ての range が _input_streamable_ かつ _output_streamable_ になる。

[heading Example]
    std::string src("abc");
    std::stringstream ss;
    ss << (src|identities);
    BOOST_CHECK( ss.str() == "{a,b,c}" );

[endsect]




[section optional.hpp]

[heading Description]
ヘッダ `<pstade/oven/optional.hpp>` は `boost::optional` を "one element range" として扱えるように _range_ のモデルにする。

[heading Header]
* `<pstade/oven/optional.hpp>`

[heading Effects]
* `boost::optional` は _random_access_ _s_ _range_ になる。

[heading Invariants]
* 未初期化の `boost::optional` は 空の range である。

[heading See also]
* _boost_optional_

[endsect]




[section regex.hpp]

[heading Description]
ヘッダ `<pstade/oven/regex.hpp>` は `boost::sub_match` を _range_ のモデルにする。

[heading Header]
* `<pstade/oven/regex.hpp>`

[heading Effects]
* `boost::sub_match` は _range_ になる。

[heading See also]
* _boost_regex_
* _oven_concatenated_

[endsect]




[section xpressive.hpp]

[heading Description]
ヘッダ `<pstade/oven/xpressive.hpp>` は `boost::xpressive::sub_match` を _range_ のモデルにする。

[heading Header]
* `<pstade/oven/xpressive.hpp>`

[heading Effects]
* `boost::xpressive::sub_match` は _range_ になる。

[heading See also]
* _boost_xpressive_
* _oven_concatenated_

[endsect]


[section nonstop]

[heading Description]
_oven_generation_ が要求する _stoppable_generator_ コンセプトは _generator_ コンセプトと僅かに違いが有る。 `nonstop` は _generator_ を _oven_generation_ に適合するように変換する。

[heading Header]
* `<pstade/oven/generation.hpp>`

[heading Model of]
* _static_function_object_

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`nonstop(g)`]
        [`g` を _stoppable_generator_ に変換する。]
    ]
]

[heading Preconditions]
* `g` は _generator_ かつ _polymorphic_function_object_ である。

[heading Example]
    BOOST_FOREACH (long x, generation(nonstop(&std::rand))|taken(30)) {
        std::cout << "," << x;
    }

[heading See also]
* _oven_generation_

[endsect]




[section pack]

[heading Description]
`pack` は iterator range の tuple をつくる。これは _oven_zipped_ を使うときに重宝する。

[heading Header]
* `<pstade/oven/pack.hpp>`

[heading Model of]
* _static_function_object_

[heading Notation]

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`pack(_rng1,...,_rngN)`]
        [
            `boost::make_tuple(make_range(_rng1),...,make_range(_rngN))`
        ]
    ]
]

[heading Preconditions]
* `1 <= N && N <= 5`
* 対応するセマンティクスは有効な式である。

[heading Example]

[heading See also]
* _oven_zipped_
* _oven_fuzipped_
* _oven_zipped_with_
* _oven_make_range_

[endsect]




[section partitioned]

[heading Description]
`partitioned` は 遅延評価の `std::partitioned` としてはたらく。

[heading Header]
* `<pstade/oven/partitioned.hpp>`

[heading Model of]
* _pipable_adaptor_

[heading Notation]
* `not_` は 述語を否定する架空の関数を表す。

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`_fwdrng|partitioned(_prd)`]
        [
            `std::make_pair(_fwdrng|filtered(_prd), _fwdrng|filtered(not_(_prd)))`
        ]
    ]
]

[heading Preconditions]
* `_fwdrng|filtered(_prd)` は有効な式である。

[heading Example]

[heading See also]
* _oven_filtered_
* _oven_split_at_

[endsect]




[section regular]

[heading Description]
_boost_lambda_ ファンクタは _default_constructible_ でも _assignable_ でもないため、そのファンクタを保持しているイテレータは _input_iterator_ にすら適合する事ができない。`regular` はそのようなイテレータを適合可能なものに変換する。

[heading Header]
* `<pstade/oven/regular.hpp>`

[heading Model of]
* _static_function_object_

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`regular(f)`]
        [`f` を _default_constructible_ かつ _assignable_ な _major_function_object_ に変換する。]
    ]
]

[heading Preconditions]
* `f` は _boost_lambda_ ファンクタか _polymorphic_function_object_ である。

[heading Example]
    BOOST_CHECK( equals(
        std::string("abcdefg")
            | filtered(regular(boost::lambda::_1 != 'c'))
            | filtered(regular(boost::lambda::_1 != 'f')),
        std::string("abdeg")
    ) );

[heading See also]
* _boost_lambda_
* _oven_filtered_
* _oven_regular_ref_
* _oven_shared_regular_
* _oven_transformed_

[endsect]




[section regular_ref]

[heading Description]
乱数ジェネレータのような _polymorphic_function_object_ は copyable ではない場合が有るが、多くのアルゴリズムはそれらが copyable であることを要求している。
`regular_ref` は noncopyable な _polymorphic_function_object_ の参照を保持し、copyable であるかのように振る舞う。

[heading Header]
* `<pstade/oven/regular.hpp>`

[heading Model of]
* _static_function_object_

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`regular_ref(f)`]
		[copyable な _major_function_object_ 。全ての呼び出しは `f` に向けられる。]
    ]
]

[heading Preconditions]
* `f` は コピー可能でないことがあり得る、 _polymorphic_function_object_ である。 
* `f` は `regular_ref(f)` が呼び出される間は破棄されない。


[heading See also]
* _oven_regular_
* _oven_shared_regular_

[endsect]




[section shared_regular]

[heading Description]
`shared_regular` は `regular_ref` と似ているが、`regular_ref` が _function_object_ のオブジェクト自体を取るのに対し、`shared_regular` はヒープ上のポインタとして取る。

[heading Header]
* `<pstade/oven/shared_regular.hpp>`

[heading Model of]
* _static_function_object_

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`shared_regular(pf)`]
		[copyable な _major_function_object_ 。全ての呼び出しは `*pf` に向けてなされる。]
    ]
]

[heading Preconditions]
* `_typeof(*pf)` はコピー可能でないことがあり得る、 _polymorphic_function_object_ である。 
* `boost::shared_ptr<_typeof(*pf)>(pf)` は有効な式である。

[heading See also]
* _oven_regular_
* _oven_regular_ref_

[endsect]




[section split_at]

[heading Description]

[heading Header]
* `<pstade/oven/split_at.hpp>`

[heading Model of]
* _pipable_adaptor_

[heading Notation]
* `rng2` は `_fwdrng|dropped(n)` である。

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`_fwdrng|split_at(n)`]
        [
            `std::make_pair([_begin(_fwdrng), _begin(rng2)), rng2)`
        ]
    ]
]

[heading Preconditions]
* `_fwdrng|dropped(n)` は有効な式である。

[heading Example]
    typedef
        any_range<int const&, boost::forward_traversal_tag>
    range;

    range merge_sort(range rng)
    {
        typedef boost::result_of<T_distance(range&)>::type diff_t;

        diff_t const d = distance(rng);
        if (d < 2)
            return rng;
        else {
            boost::result_of<T_make_split_at(range&, diff_t)>::type
                xs_ys = make_split_at(rng, d/2);

            return make_merged(
                merge_sort(xs_ys.first),
                merge_sort(xs_ys.second)
            );
        }
    }


[heading See also]
* _oven_dropped_
* _oven_partitioned_

[endsect]




[section zipped]

[heading Description]
`zipped` は range の tuple を取り、対応する tuple の range を返す。

[heading Header]
* `<pstade/oven/zipped.hpp>`

[heading Model of]
* _pipable_adaptor_

[heading Notation]
* `(_rng1 _rng2 ... _rngN)` は `u` である。

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`u|zipped`]
        [
            `[T(boost::make_tuple(_begin(_rng1),...,_begin(_rngN))), T(boost::make_tuple(_end(_rng1),...,_end(_rngN))))`
        ]
    ]
]

[heading Preconditions]
* `T` は `T(boost::make_tuple(_begin(_rng1),...,_begin(_rngN)))` が有効な式であるような `boost::zip_iterator<_typeof(boost::make_tuple(_begin(_rng1),...,_begin(_rngN)))>` である。

[heading Example]
    std::cout <<
        (
            boost::make_tuple(
                boost::assign::list_of(1)(2)(3),
                boost::assign::list_of(2)(3)(4)
            )
                | zipped
        );

    // output> {(1 2),(2 3),(3 4)}

[heading See also]
* [@http://www.boost.org/libs/iterator/doc/zip_iterator.html boost::zip_iterator]
* _oven_pack_
* _oven_unzipped_
* _oven_fuzipped_
* _oven_unfuzipped_
* _oven_zipped_with_

[endsect]




[section unzipped]

[heading Description]
`unzipped` は `zipped` を逆にする。

[heading Header]
* `<pstade/oven/unzipped.hpp>`

[heading Model of]
* _pipable_adaptor_

[heading Notation]
* `{(a11 a12 ... a1N),(a21 a22 ... a2N),...,(aM1 aM2 ... aMN)}` is `_rng`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`_rng|unzipped`]
        [
            `({a11,a21,...,aM1} {a12,a22,...,aM2} ... {a1N,a2N,...,aMN})`
        ]
    ]
]

[heading Preconditions]
* `_value_of<_typeof(_rng)>::type` は `boost::tuple` である。

[heading Example]
    std::cout <<
        (
            boost::assign::list_of
                (boost::make_tuple(1,2))
                (boost::make_tuple(2,3))
                (boost::make_tuple(3,4))
                | unzipped
        );

    // output> ({1,2,3} {2,3,4})


[heading See also]
* _oven_zipped_
* _oven_fuzipped_
* _oven_unfuzipped_
* _oven_zipped_with_

[endsect]




[section fuzipped]

[heading Description]
`fuzipped` は range の _fusion_sequence_ を取り、_fusion_sequence_ の range を返す。

[heading Header]
* `<pstade/oven/fuzipped.hpp>`

[heading Model of]
* _pipable_adaptor_

[heading Notation]
* `(_rng1 _rng2 ... _rngN)` は `u` である。
* `fuzip_iterator` は `boost::zip_iterator` のようにはたらき、`value_type` が _fusion_random_access_sequence_ であるような架空の iterator である。

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`u|fuzipped`]
        [
            `[T(boost::fusion::make_vector(_begin(_rng1),...,_begin(_rngN))), T(boost::fusion::make_vector(_end(_rng1),...,_end(_rngN))))`
        ]
    ]
]

[heading Preconditions]
* `T` は `T(boost::fusion::make_vector(_begin(_rng1),...,_begin(_rngN)))` が有効な式であるような `fuzip_iterator<_typeof(boost::make_tuple(_begin(_rng1),...,_begin(_rngN)))>` である。

[heading Example]

[heading See also]
* [@http://www.boost.org/libs/iterator/doc/zip_iterator.html boost::zip_iterator]
* _oven_pack_
* _oven_unfuzipped_
* _oven_zipped_
* _oven_unzipped_
* _oven_zipped_with_

[endsect]




[section unfuzipped]

[heading Description]
`unfuzipped` は `fuzipped` を逆にする。

[heading Header]
* `<pstade/oven/unfuzipped.hpp>`

[heading Model of]
* _pipable_adaptor_

[heading Notation]
* `{a1,...,aN}` は `_rng` である。
* `at<RefSeq, I>::type` は `boost::mpl::at_c<RefSeq, I>::type` である。

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`X_make_unfuzipped<RefSeq = boost::use_default>`]
        [
            A _major_function_object_ type
        ]
    ]
    [
        [`X_make_unfuzipped<RefSeq = boost::use_default>()(_rng)`]
        [
            A _fusion_random_access_sequence_ `(X_make_elements_c<0, at<RefSeq, 0>::type>()(a1) ... X_make_elements_c<N-1, at<RefSeq, N-1>::type>()(aN))`
        ]
    ]
    [
        [`_rng|unfuzipped`]
        [
            `X_make_unfuzipped<>()(_rng)`
        ]
    ]
]

[heading Preconditions]
* 対応するセマンティクスは有効な式である。

[heading See also]
* _oven_elements_
* _oven_elements_c_
* _oven_fuzipped_
* _oven_zipped_
* _oven_unzipped_
* _oven_zipped_with_

[endsect]



[section zipped_with]

[heading Description]
`zipped` は `boost::tuple` を取る関数をパラメータとして受け取るが、そのような関数は一般的ではない。`zipped_with` は "一般的な" 関数を受け取り、それを `zipped` に渡す前に `zipped` が受け取れるようなものに変換する。

[heading Header]
* `<pstade/oven/zipped_with.hpp>`

[heading Model of]
* _pipable_adaptor_

[heading Notation]
* `fuse` は受け取った引数を、`boost::tuple` を引数に取る関数へ変換する、架空の関数である。

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`X_make_zipped_with<R>`]
        [
            A _major_function_object_ type
        ]
    ]
    [
        [`X_make_zipped_with<R>()(u, _fun)`]
        [
            `u|fuzipped|X_make_transformed<R>()(fuse(_fun))`
        ]
    ]
    [
        [`X_make_zipped_with<>()(u, _cal)`]
        [
            `u|fuzipped|X_make_transformed<>()(fuse(_cal))`
        ]
    ]
    [
        [`u|zipped_with(_cal)`]
        [
            `X_make_zipped_with<>()(u, _cal)`
        ]
    ]
]

[heading Preconditions]
* `u` は `boost::tuple` であるか _fusion_forward_sequence_ である。
* `u|zipped|X_make_transformed<R>(fuse(_fun))` あるいは `u|fuzipped|X_make_transformed<R>(fuse(_fun))` は有効な式である。
* `u|zipped|transformed(fuse(_cal))` あるいは `u|fuzipped|transformed(fuse(_cal))` は有効な式である。

[heading See also]
* _oven_pack_
* _oven_zipped_
* _oven_unzipped_
* _oven_fuzipped_
* _oven_unfuzipped_

[endsect]




[endsect]
