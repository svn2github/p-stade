[section Range Adaptors]




[section filtered]

[h3 Description]

[h3 Header]
* `<pstade/oven/filtered.hpp>`

[h3 Model of]
* _pipable_object_

[h3 Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`rng|filtered(prd)`]
        [
            `[T(prd, boost::begin(rng), boost::end(rng)), T(prd, boos::end(rng), boost::end(rng)))`
        ]
    ]
]

[h3 Preconditions]
* `T` is `boost::filter_iterator<typeof(prd), typeof(boost::begin(rng))>` such that `T(prd, boost::begin(rng), boost::end(rng))` is a valid expression.

[h3 Example]

[h3 See also]
* [@http://www.boost.org/libs/iterator/doc/filter_iterator.html filter_iterator]

[endsect]




[section transformed]

[h3 Description]

[h3 Header]
* `<pstade/oven/transformed.hpp>`

[h3 Model of]

[h3 Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`op_make_transformed<R>`]
        [
           A _callable_object_ type
        ]
    ]
    [
        [`op_make_transformed<R>()(rng, fun)`]
        [
            `[T(boost::begin(rng), fun), T(boost::end(rng), fun))`
        ]
    ]
    [
        [`op_make_transformed<>`]
        [
           A type whose object is a _callable_object_.
        ]
    ]
    [
        [`op_make_transformed<>()(rng, cal)`]
        [
            `[U(boost::begin(rng), cal), U(boost::end(rng), cal))`
        ]
    ]
    [
        [`make_transformed(rng, cal)`]
        [
            `op_make_transformed<>()(rng, cal)`
        ]
    ]
    [
        [`rng|transformed(cal)`]
        [
            `make_transformed(rng, cal)`
        ]
    ]
]

[h3 Preconditions]
* `T` is `boost::transform_iterator<typeof(fun), typeof(boost::begin(rng)), R>` such that `T(boost::begin(rng), fun)` is a valid expression.
* `U` is `boost::transform_iterator<typeof(cal), typeof(boost::begin(rng)), boost::result_of<typeof(cal)(*boost::begin(rng))>::type>` such that `U(boost::begin(rng), cal)` is a valid expression.

[h3 Example]

[endsect]




[endsect]
