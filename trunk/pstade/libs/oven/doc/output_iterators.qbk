[section Output Iterators]

Oven provides some useful Output Iterators.




[section any_output_iterator]

[h3 Description]
`any_output_iterator` is an _output_iterator_ to which any _output_iterator_ can be assigned.

[h3 Header]
* `<pstade/oven/any_output_iterator.hpp>`

[h3 Model of]

[h3 Notation]
* `ao` is an `any_output_iterator<V>` object.
* `_outit` is not an `any_output_iterator<V>` object.

[h3 Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`any_output_iterator<V>`]
        [An _output_iterator_]
    ]
    [
        [`any_output_iterator<V> ao(_outit)`]
        [`ao` holds `_outit`.]
    ]
    [
        [`ao = _outit`]
        [`ao` holds `_outit`.]
    ]
]

[h3 Preconditions]
* `V` specifies a type which is outputted to `ao`.

[h3 Example]

[h3 See also]

[endsect]




[section applier]

[h3 Description]
`applier` returns an _output_iterator_ which passes each item assigned as an argument to the unary function.

[h3 Header]
* `<pstade/oven/applier.hpp>`

[h3 Model of]
* _static_function_object_

[h3 Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`applier(_fun)`]
        [
            `T(_fun)`
        ]
    ]
]

[h3 Preconditions]
* `T` is `boost::function_output_iterator<typeof(_fun)>` such that `T(_fun)` is a valid expression.
* `_fun` is _assignable_.

[h3 Example]

[h3 See also]
* [@http://www.boost.org/libs/iterator/doc/function_output_iterator.html boost::function_output_iterator]
* _oven_applied_

[endsect]




[section checker]

[h3 Description]
`checker` is a shortcut of `checked|begin`.

[h3 Header]
* `<pstade/oven/checker.hpp>`

[h3 Model of]
* _static_function_object_

[h3 Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`checker(_fwdrng, _cal)`]
        [
            `_cal(_fwdrng|checked)`
        ]
    ]
    [
        [`checker(_fwdrng)`]
        [
            `_begin(_fwdrng|checked)`
        ]
    ]
]

[h3 Preconditions]
* The corresponding semantics is a valid expression.

[h3 Example]

[h3 See also]
* _oven_checked_

[endsect]




[section eater]

[h3 Description]
`eater` returns an _output_iterator_ ignores inputs.

[h3 Header]
* `<pstade/oven/eater.hpp>`

[h3 Model of]
* _static_function_object_

[h3 Notation]
* `f_` is an imaginary _function_object_ which behaves as if it were `v -> (void)v`.

[h3 Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`eater()`]
        [
            `applier(f_)`
        ]
    ]
]

[h3 Preconditions]
* The corresponding semantics is a valid expression.

[h3 Example]

[h3 See also]
* _oven_applier_
* _oven_intercepter_

[endsect]




[section stream_writer]

[h3 Description]
`stream_writer` returns an _output_iterator_ which is a shorthand version of `std::ostream_iterator`.
It needs no explicit template parameter to specify the `value_type` to output,
but one extra precondition below must be met. It can be easily guaranteed by using `converter`, though.

[h3 Header]
* `<pstade/oven/stream_writer.hpp>`

[h3 Model of]
* _static_function_object_

[h3 Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`stream_writer(s, d)`]
        [
            `T(s, d)`
        ]
    ]
    [
        [`stream_writer(s)`]
        [
            `stream_writer(s, 0)`
        ]
    ]
]

[note `stream_writer` doesn't write an extra delimiter after the last element.]

[h3 Preconditions]
* `T` is `hamigaki::ostream_iterator<unspecified, _typeof(s)::char_type, _typeof(s)::traits_type>` such that `T(s, d)` is a valid expressin.
* An object which is passed to `_typeof(stream_writer(s))::operator=` is _output_streamable_.

[h3 Example]
    std::vector<std::string> sample
        = initial_values("hello", "oven", "stream_writer");

    {
        std::ofstream fout("read.txt");
        copy(sample, stream_writer(fout, " "));
    }

    {
        std::ifstream fin("read.txt");
        BOOST_CHECK( equals(
            oven::stream_read<std::string>(fin),
            sample
        ) );
    }

[h3 See also]
* [@http://hamigaki.sourceforge.jp/doc/html/ostream_iterator.html hamigaki::ostream_iteraotor]
* [@http://www.sgi.com/tech/stl/ostream_iterator.html std::ostream_iterator]
* _oven_delimited_
* _oven_stream_read_
* _oven_converter_

[endsect]




[section streambuf_writer]

[h3 Description]
`streambuf_writer` is the object generator of `std::ostreambuf_iterator`.

[h3 Header]
* `<pstade/oven/stream_writer.hpp>`

[h3 Model of]
* _static_function_object_

[h3 Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`streambuf_writer(s)`]
        [
            `T(s)`
        ]
    ]
    [
        [`streambuf_writer(p)`]
        [
            `U(p)`
        ]
    ]
]

[h3 Preconditions]
* `T` is `std::ostreambuf_iterator<typeof(s)::char_type, typeof(s)::traits_type>` such that `T(s)` is a valid expression.
* `U` is `std::ostreambuf_iterator<typeof(*p)::char_type, typeof(*p)::traits_type>` such that `U(p)` is a valid expression.

[h3 Example]

[h3 See also]

[endsect]




[section std_stream_writer]

[h3 Description]
`std_stream_writer` returns an _output_iterator_ which behaves as if it were `std::ostream_iterator`.

[h3 Header]
* `<pstade/oven/stream_writer.hpp>`

[h3 Model of]
* _static_function_object_

[h3 Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`std_stream_writer(s, d)`]
        [
            `stream_writer(s, d)` but it outputs a trailing delimiter `d`.
        ]
    ]
    [
        [`std_stream_writer(s)`]
        [
            `stream_writer(s)`
        ]
    ]
]

[h3 Preconditions]
* The corresponding semantics is a valid expression.

[note `std_stream_writer` doesn't take a template parameter for output `value_type`. Use `converter` when you want to specify it.]

[h3 Example]

[h3 See also]
* [@http://www.sgi.com/tech/stl/ostream_iterator.html std::ostream_iterator]
* _oven_stream_writer_
* _oven_converter_

[endsect]




[endsect]
