[section Range Makers]


Before applying a [link oven.range_adaptors range adaptor], you can prepare the base range by using the following functions.




[section as_array]

[h3 Description]
Some versions of _boost_range_ regard `char` array as literal, which `as_array` works around.

[h3 Header]
* `<pstade/oven/as_array.hpp>`

[h3 Model of]
* _auxiliary_interface_

[h3 Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`as_array(a)`]
        [
            [@http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2059.html#as-array as_array proposal]
        ]
    ]
]

[h3 Preconditions]
* `a` is an array.

[h3 See also]
* _string_algo_proposal_
* [link oven.as_c_str as_c_str]
* [link oven.as_literal as_literal]

[endsect]




[section as_c_str]

[h3 Description]
`as_c_str` makes a _random_access_ _range_ from null-terminated c-style string.

[h3 Header]
* `<pstade/oven/as_c_str.hpp>`

[h3 Model of]
* _auxiliary_interface_

[h3 Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`as_c_str(s)`]
        [
            `[s, s + strlen(s))`
        ]
    ]
    [
        [`as_c_str(_rng)`]
        [
            `[_begin(_rng), std::find(_begin(_rng), _end(_rng), 0))`
        ]
    ]
]

[h3 Preconditions]
* `_typeof(s)` is convertible to `char *` or `char const *`.
* `_typeof(_rng)` is neither convertible to `char *` nor `char const *`.

[h3 See also]
* _string_algo_proposal_
* [link oven.as_array as_c_array]
* [link oven.as_literal as_literal]

[endsect]




[section as_literal]

[h3 Description]
`as_literal` makes a _random_access_ _range_ from character array.

[h3 Header]
* `<pstade/oven/as_literal.hpp>`

[h3 Model of]
* _auxiliary_interface_

[h3 Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`as_literal(a)`]
        [
            `[&a[0], &a[0] + sz-1)`, where `sz` is the size of array `a`.
        ]
    ]
    [
        [`as_literal(x)`]
        [
            `x`
        ]
    ]
]

[h3 Preconditions]
* `a` is an array.
* `x` is not an array.

[important `as_literal` doesn't use `strlen`, while _string_algo_proposal_ does.]

[h3 See also]
* _string_algo_proposal_
* [link oven.as_array as_array]
* [link oven.as_c_str as_c_str]

[endsect]




[section counting]

[h3 Description]
`counting` makes a `boost::counting_iterator` range, which is not a _lvalue_ _range_.

[h3 Header]
* `<pstade/oven/counting.hpp>`

[h3 Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`op_counting<X1,..,XN>`]
        [
            A _bindable_ _deferred_callable_object_ type
        ]
    ]
    [
        [`op_counting<X1,..,XN>()(i, j)`]
        [
            `[T(i), T(j))`
        ]
    ]
    [
        [`counting(i, j)`]
        [`op_counting<>()(i, j)`]
    ]
    [
        [`counting(i, max_count)`]
        [`op_counting<>()(i, std::numeric_limits<_typeof(i)>::max())`]
    ]
]

[h3 Preconditions]
* `0 <= N && N <= 2`
* `T` is `boost::counting_iterator<_typeof(j), X1,..,XN>` such that `T(i)` and `T(j)` is a valid expression.

[h3 Example]
    int ans[] = { 2, 3, 4, 5, 6 };
    BOOST_CHECK( equal(counting(2, 7), ans) );

    std::vector<int> vec;
    BOOST_FOREACH (int i, counting(0, 5)) {
        vec.push_back(i);
    }

[h3 See also]
* [@http://www.boost.org/libs/iterator/doc/counting_iterator.html boost::counting_iterator]

[endsect]




[section generation]

[h3 Description]
`generation` makes a _single_pass_ _range_ from a _stoppable_generator_.

[h3 Header]
* `<pstade/oven/generation.hpp>`

[h3 Model of]
* _operatable_object_

[h3 Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`generation(g)`]
        [
            The longest _single_pass_ `{*g(),*g(),*g(),..,*g()}` such that `g()` is not /uninitialized/.
        ]
    ]
]

[h3 Preconditions]
* `g` is a _stoppable_generator_.
* `g` is _assignable_.
* `_typeof(*g())` is _copy_constructible_ and _assignable_.

[h3 Example]
    struct rand_generator
    {
        typedef boost::optional<long> result_type;

        result_type operator()()
        {
            long result = std::rand();
            if (result % 3 == 0)
                return result_type(); // stop generating.

            return result;
        }
    };

    void test()
    {
        rand_generator X;
        BOOST_FOREACH (long x, generation(X)) {
            std::cout << x << std::endl;
        }
    }

[h3 See also]
* [@http://www.boost.org/libs/utility/generator_iterator.htm boost::generator_iterator]
* [link oven.nonstop nonstop]
* [link oven.regular regular]
* [link oven.regular_ref regular_ref]

[endsect]




[section initial_values]

[h3 Description]
`initial_values` emulates initializer-lists.

[h3 Header]
* `<pstade/oven/initial_values.hpp>`

[h3 Model of]
* _operatable_object_

[h3 Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`op_initial_values<T>`]
        [
            A _bindable_ _deferred_callable_object_ type
        ]
    ]
    [
        [`op_initial_values<T>()(a1,..,aN)`]
        [
            A _random_access_ _readable_ _lvalue_ _constant_ `{a1,..,aN}`
        ]
    ]
    [
        [`Rng rng = op_initial_values<T>()(a1,..,aN);`]
        [
            `Rng rng = op_initial_values<T>()(a1,..,aN)|copied;`
        ]
    ]
    [
        [`Rng2 rng2(op_initial_values<T>()(a1,..,aN));`]
        [
            `Rng2 rng2(op_initial_values<T>()(a1,..,aN)|copied);`
        ]
    ]
    [
        [`initial_values`]
        [
            `op_initial_values<t>()`, where `t` is deduced from the first argument.
        ]
    ]
]

[note Every `aK` is copied, meaning that they are not referenced from Oven later.]

[h3 Preconditions]
* `1 <= N && N <= 20`
* `_typeof(aK)` is _copy_constructible_ for all `K` such that `1 <= K && K <= N`.
* `_typeof(aK)` is convertible to `_typeof(a1)` for all `K` such that `2 <= K && K <= N`.
* `Rng rng = op_initial_values<T>()(a1,..,aN)|copied;` is a valid expression.
* `Rng2 rng2(op_initial_values<T>()(a1,..,aN)|copied);` is a valid expression.

[tip `initial_values` trades unlimited arity for the lightweight initialization of `boost::array`.
      Also, it doesn't require the arguments to be _assignable_.]

[h3 Example]
    int const ans[] = { 1,5,3,6,1,3,7,1,4,2,2 };
    std::vector<int> vec = initial_values(1,5,3,6,1,3,7,1,4,2,2);
    BOOST_CHECK( equals(vec, ans) );

[h3 See also]
* _boost_array_
* _boost_assign_
* [link oven.copied copied]

[endsect]




[section iteration]

[h3 Description]
`iteration` makes an infinite _forward_ _range_ where the first item is calculated by applying the function
on the first argument, the second item by applying the function on the previous result and so on.

[note Strictly speaking, the range concept doesn't allow an infinite range.
      So assume here the end iterator is reachable from the begin iterator in the googolplex number of increments.]

[h3 Header]
* `<pstade/oven/iteration.hpp>`

[h3 Model of]
* _operatable_object_

[h3 Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`iteration(x, _fun)`]
        [
            An infinite _forward_ _readable_ non-_lvalue_ _constant_ `{x,_fun(x),_fun(_fun(x)),_fun(_fun(_fun(x))),...}`
        ]
    ]
]

[note `x` is copied, meaning that it is not referenced from Oven later.]

[h3 Preconditions]
* `x` is _assignable_, _default_constructible_, _copy_constructible_, and _equality_comparable_.
* `x1 = _fun(x1)` is well-formed, where `_typeof(x) x1 = x`.
* `_fun` is _assignable_ and _default_constructible_.
* `_fun` is a [@http://mathworld.wolfram.com/Map.html Map], meaning that `a == b` implies `_fun(a) == _fun(b)`.

[h3 Example]
    int answer[] = { 1,2,4,8,16 };
    BOOST_CHECK( equals(answer,
        iteration(1, regular(boost::lambda::_1 * 2))|taken(5)
    ) );

[h3 See also]
* [link oven.taken taken]

[endsect]




[section recursion]

[h3 Description]
`recursion`, collaborating with [link oven.any_range any_range], creates a recursive range.

[h3 Header]
* `<pstade/oven/recursion.hpp>`

[h3 Model of]
* _operatable_object_

[h3 Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`recursion(_fwdrng)`]
        [
            An up-to-_bidirectional_ `[_begin(_fwdrng), _end(_fwdrng))`
        ]
    ]
]

[h3 Preconditions]
* `_fwdrng` is an `any_range`.
* Every `memoized` in the base range takes its own `memo_table` object.

[h3 Example]
    typedef any_range<int const&, boost::forward_traversal_tag> range_t;
    range_t fibs;
    memo_table tb;
    int const start[] = { 1, 1 };
    fibs =
        start
            | rvalues // for jointed precondition
            | jointed(
                boost::make_tuple(recursion(fibs), recursion(fibs)|dropped(1))
                    | zipped_with(regular(boost::lambda::_1 + boost::lambda::_2))
                )
            | memoized(tb)
    ;

    std::cout << (fibs|taken(howMany));

[note In a recursive range, `memoized` must take a named `memo_table` object.
      A recursive range tends to be inefficient without memoization.]

[h3 See also]
* [link oven.any_range any_range]
* [link oven.memoized memoized]

[endsect]




[section shared]

[h3 Description]
`shared` makes a range from a pointer to a heap allocated range,
and the iterators manage the allocation.

[h3 Header]
* `<pstade/oven/shared.hpp>`

[h3 Model of]
* _operatable_object_

[h3 Notation]
* `shared_range_iterator` is an imaginary iterator which works like
  `boost::shared_container_iterator` but uses a range instead of a container.

[h3 Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`shared(p)`]
        [
            `[T(_begin(*p), sp), T(_end(*p), sp))`
        ]
    ]
]

[h3 Preconditions]
* `sp` is a `boost::shared_ptr<_typeof(*p)>(p)` such that `sp(p)` is a valid expression.
* `T` is a `shared_range_iterator<_typeof(*p)>` such that `T(_begin(*p), sp)` is a valid expression.

[h3 Example]
    BOOST_FOREACH (char ch, std::string("dangling")|identities) {
        // will crash; 'std::string' object doesn't exist anymore. 
        std::cout << ch;
    }

    BOOST_FOREACH (char ch, shared(new std::string("ok"))|identities) {
        // works fine.
        std::cout << ch;
    }

[h3 See also]
* [@http://www.boost.org/libs/utility/shared_container_iterator.html shared_container_iterator]
* [link oven.shared_single shared_single]

[endsect]




[section shared_single]

[h3 Description]
`shared_single`, given a pointer to a heap allocated object, delivers a range presentation of the pointee.

[h3 Header]
* `<pstade/oven/shared_single.hpp>`

[h3 Model of]
* _operatable_object_

[h3 Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`shared_single(p)`]
        [`[&*p, &*p + 1)`]
    ]
]

[h3 Preconditions]
* `boost::shared_ptr<_typeof(*p)>(p)` is a valid expression.

[h3 Example]
    boost::result_of<op_shared_single(char *)>::type
    make_rng()
    {
        return shared_single(new char('a'));
    }

[h3 See also]
* [link oven.single single]

[endsect]




[section single]

[h3 Description]
`single` makes a _random_access_ _range_ which delivers a range presentation of one object.

[h3 Header]
* `<pstade/oven/single.hpp>`

[h3 Model of]
* _operatable_object_

[h3 Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`single(x)`]
        [`[&x, &x + 1)`]
    ]
]

[note As the semantics implies, the iterators are valid as long as `x` is not destructed.
      If you want the iterators to manage the base object lifetime, use [link oven.shared_single shared_single].]

[h3 Example]
    BOOST_CHECK( equals(single('a'), std::string("a")) );

[h3 See also]
* [link oven.shared_single shared_single]

[endsect]




[section stream_lines]

[h3 Description]
`stream_lines` makes a `std::string` _single_pass_ _range_ from `std::cout` etc.

[h3 Header]
* `<pstade/oven/stream_lines.hpp>`

[h3 Notatio]
* `DefaultA` is `std::allocator<_typeof(s)::char_type>`.

[h3 Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`op_stream_lines<A = DefaultA>`]
        [
            A _bindable_ _deferred_callable_object_ type
        ]
    ]
    [
        [`op_stream_lines<A>()(s)`]
        [
           `[T(s), T())`
        ]
    ]
]

[h3 Preconditions]
* `T` is `hamigaki::istream_line_iterator<_typeof(s)::char_type, _typeof(s)::traits_type, A>` suct that `T(s)` is a valid expression.

[h3 Example]

[h3 See also]
* [@http://hamigaki.sourceforge.jp/doc/html/istream_line_iterator.html hamigaki::istream_line_iterator]
* [link oven.stream_read stream_read]

[endsect]




[section stream_read]

[h3 Description]
`stream_read` makes a _single_pass_ _range_ from `std::cout` etc.

[h3 Header]
* `<pstade/oven/stream_read.hpp>`

[h3 Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`op_stream_read<V, D = std::ptrdiff_t>`]
        [
            A _bindable_ _deferred_callable_object_ type
        ]
    ]
    [
        [`op_stream_read<V, D>()(s)`]
        [
           `[T(s), T())`
        ]
    ]
]

[important Notice that `stream_read<V>(s)` is qualified with `oven::` to avoid unintentional ADL.]

[h3 Preconditions]
* `T` is `std::istream_iterator<V, _typeof(s)::char_type, _typeof(s)::traits_type, D>` suct that `T(s)` is a valid expression.

[h3 Example]
    std::string src("hello,stream_read!");

    std::stringstream ss;
    ss << src;

    std::string result;
    copy(oven::stream_read<char>(ss), std::back_inserter(result));

    BOOST_CHECK( equals(result, src) );

[h3 See also]
* [@http://www.sgi.com/tech/stl/istream_iterator.html std::istream_iterator]
* [link oven.file_range file_range]
* [link oven.stream_lines stream_lines]
* [link oven.stream_writer stream_writer]

[endsect]




[section streambuf_read]

[h3 Header]
* `<pstade/oven/stream_read.hpp>`

[h3 Model of]
* _operatable_object_

[h3 Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`streambuf_read(s)`]
        [
            `[T(s), T())`
        ]
    ]
    [
        [`streambuf_read(p)`]
        [
            `[U(p), U())`
        ]
    ]
]

[h3 Preconditions]
* `T` is `std::istreambuf_iterator<_typeof(s)::char_type, _typeof(s)::traits_type>` such that `T(s)` is a valid expression.
* `U` is `std::istreambuf_iterator<_typeof(*p)::char_type, _typeof(*p)::traits_type>` such that `U(p)` is a valid expression.

[endsect]




[endsect]
