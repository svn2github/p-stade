[section Output Iterator Adaptors]




[section applier]

[h3 Description]
`applier` returns an _output_iterator_ which passes each item assigned as an argument to the unary function.

[h3 Header]
* `<pstade/oven/applier.hpp>`

[h3 Model of]
* _bindable_ _s_ _operatable_object_

[h3 Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`applier(_fun)`]
        [
            `T(_fun)`
        ]
    ]
]

[h3 Preconditions]
* `T` is `boost::function_output_iterator<typeof(_fun)>` such that `T(_fun)` is a valid expression.

[h3 Example]

[h3 See also]
* [@http://www.boost.org/libs/iterator/doc/function_output_iterator.html boost::function_output_iterator]
* [link oven.applied applied]

[endsect]




[section stream_writer]

[h3 Description]
`stream_writer` returns an _output_iterator_ which is a shorthand version of `std::ostream_iterator`.
It needs no explicit template parameter to specify the `value_type` to output,
but one extra precondition below must be met. It can be easily guaranteed by using `transformed`, though.

[h3 Header]
* `<pstade/oven/stream_writer.hpp>`

[h3 Model of]
* _bindable_ _s_ _operatable_object_

[h3 Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`stream_writer(s, d)`]
        [
            `T(s, d)`
        ]
    ]
    [
        [`stream_writer(s)`]
        [
            `stream_writer(s, 0)`
        ]
    ]
]

[note `stream_writer` doesn't write an extra delimiter after the last element.]

[h3 Preconditions]
* `T` is `hamigaki::ostream_iterator<unspecified, _typeof(s)::char_type, _typeof(s)::traits_type>` such that `T(s, d)` is a valid expressin.
* An object which is passed to `_typeof(stream_writer(s))::operator=` is _output_streamable_.

[h3 Example]
    std::vector<std::string> sample
        = initial_values("hello", "oven", "stream_writer");

    {
        std::ofstream fout("read.txt");
        copy(sample, stream_writer(fout, " "));
    }

    {
        std::ifstream fin("read.txt");
        BOOST_CHECK( equals(
            oven::stream_read<std::string>(fin),
            sample
        ) );
    }

[h3 See also]
* [@http://hamigaki.sourceforge.jp/doc/html/ostream_iterator.html hamigaki::ostream_iteraotor]
* [@http://www.sgi.com/tech/stl/ostream_iterator.html std::ostream_iterator]
* [link oven.delimited delimited]
* [link oven.stream_read stream_read]
* [link oven.transformed transformed]

[endsect]




[section utf8_encoder]

[h3 Description]
Pending...

[h3 Header]
* `<pstade/oven/utf8_encoder.hpp>`

[h3 Model of]
* _bindable_ _s_ _operatable_object_

[h3 Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`utf8_encoder(x)`]
        [
            `T(x)`
        ]
    ]
]

[h3 Preconditions]
* `T` is `boost::utf8_output_iterator<typeof(x)>` such that `T(x)` is a valid expression.

[h3 Example]

[h3 See also]
* [link oven.utf8_decoded utf8_decoded]

[endsect]




[section utf16_encoder]

[h3 Description]
Pending...

[h3 Header]
* `<pstade/oven/utf16_encoder.hpp>`

[h3 Model of]
* _bindable_ _s_ _operatable_object_

[h3 Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`utf16_encoder(x)`]
        [
            `T(x)`
        ]
    ]
]

[h3 Preconditions]
* `T` is `boost::utf16_output_iterator<typeof(x)>` such that `T(x)` is a valid expression.

[h3 Example]

[h3 See also]
* [link oven.utf16_decoded utf16_decoded]

[endsect]




[endsect]
