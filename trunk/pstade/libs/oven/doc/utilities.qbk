[section Utilities]

Some helper _function_object_s are given to fill the gap between Oven and other libraries.




[section:adapted_to_base adapted_to/to_base]

[h3 Description]
`adapted_to` pulls the base iterator from the adapted one.

[h3 Header]
* `<pstade/oven/adapted_to_base.hpp>`

[h3 Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`oven::adapted_to<B>(a)`]
        [Calls `a.base()` until `_typeof(a.base())` becomes the same as `B`.]
    ]
    [
        [`B b = x|to_base;`]
        [`B b = oven::adapted_to<B>(a);`]
    ]
]

[h3 Preconditions]
* `B` is _copy_constructible_.
* `_typeof(a)` correctly works with `boost::is_convertible`.
* There is a (possibly empty) sequence `{ base(), .., base() }` such that `_typeof(a.base().base()...base())` is `B`.

[h3 Example]
    std::string src("cjaigvwzenqhe");
    std::string::const_iterator it =
        max_element(
            src
                | filtered(regular(boost::lambda::_1 != 'z'))
                | filtered(regular(boost::lambda::_1 != 'w'))
        )|to_base;

    BOOST_CHECK( *it == 'v' );

[endsect]




[section expression]

[h3 Description]
[link oven.any_range any_range] incurs an overhead for calling a `virtual` function every iterator operation.
The overhead can be removed with the help of _boost_typeof_ if your compiler supports the native typeof.
`expression` converts a range into _boost_typeof_ compatible one, then removes the overhead if possible.

[h3 Header]
* `<pstade/oven/expression.hpp>`

[h3 Model of]
* _operatable_object_

[h3 Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`expression(_rng)`]
        [Returns a _range_ which can be used with _boost_typeof_ macros.]
    ]
]

[h3 Preconditions]
* `boost::range_value<_typeof(_rng)>::type` and `boost::range_difference<_typeof(_rng)>::type` are registered to _boost_typeof_.

[note As far as the two types are registered, `expression` with _boost_typeof_ macros is portable
 even where native typeof isn't available.]

[h3 Example]
    BOOST_AUTO(factorials,
        expression(counting_from(1)|scanned(1, regular(boost::lambda::_1 * boost::lambda::_2))) );

[h3 See also]
* [link oven.any_range any_range]

[endsect]




[section io.hpp]

[h3 Description]
The header `<pstade/oven/io.hpp>` lets _range_s Oven returns be _input_streamable_ and _output_streamable_.

[h3 Header]
* `<pstade/oven/io.hpp>`


[h3 Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`#include <pstade/oven/io.hpp>`]
        [All the _range_ Oven defines and returns become a model of _input_streamable_ and _output_streamable_.]
    ]
]

[h3 Example]
    std::string src("abc");
    std::stringstream ss;
    ss << (src|identities);
    BOOST_CHECK( ss.str() == "{a,b,c}" );

[endsect]




[section nonstop]

[h3 Description]
The _stoppable_generator_ concept which [link oven.generation generation] requires is slightly different
from the _generator_ concept. `nonstop` turns a _generator_ into a [link oven.generation generation] conforming one.

[h3 Header]
* `<pstade/oven/generation.hpp>`

[h3 Model of]
* _operatable_object_

[h3 Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`nonstop(g)`]
        [Converts `g` into a _stoppable_generator_.]
    ]
]

[h3 Preconditions]
* `g` is a both _generator_ and _callable_object_.

[h3 Example]
    BOOST_FOREACH (long x, generation(nonstop(&std::rand))|taken(30)) {
        std::cout << "," << x;
    }

[h3 See also]
* [link oven.generation generation]

[endsect]




[section regular]

[h3 Description]
A _boost_lambda_ functor is neither _default_constructible_ nor _assignable_.
An iterator holding such a functor can't conform to even _input_iterator_.
`regular` converts it to comfortable one for iterators.

[h3 Header]
* `<pstade/oven/regular.hpp>`

[h3 Model of]
* _operatable_object_

[h3 Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`regular(f)`]
        [Converts `f` into a _callable_object_ which is _default_constructible_ and _assignable_.]
    ]
]

[h3 Preconditions]
* `f` is a _boost_lambda_ functor or _callable_object_.

[h3 Example]
    BOOST_CHECK( equals(
        std::string("abcdefg")
            | filtered(regular(boost::lambda::_1 != 'c'))
            | filtered(regular(boost::lambda::_1 != 'f')),
        std::string("abdeg")
    ) );

[he See also]
* _boost_lambda_

[endsect]




[section regular_ref]

[h3 Description]
A _callable_object_ like a random number generator may not be copyable, while many algorithms require to be.
`regular_ref`, holding a reference to noncopyable _callable_object_, behaves as copyable one.

[h3 Header]
* `<pstade/oven/regular.hpp>`

[h3 Model of]
* _operatable_object_

[h3 Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`regular_ref(_fun)`]
        [Converts `_fun` into a copyable _callable_object_. All the calls are forwarded to `_fun`.]
    ]
]

[endsect]




[section to_upper/to_lower]

[h3 Description]
`to_upper` and `to_lower` is the _callable_object_ version of `std::toupper` and `std::tolower` respectively.

[h3 Header]
* `<pstade/oven/locale.hpp>`

[h3 Model of]
* _callable_object_

[h3 Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`to_upper(c, l)`]
        [`std::toupper(c, l)`]
    ]
    [
        [`to_upper(c_)`]
        [`to_upper(c_, std::locale())`]
    ]
    [
        [`to_lower(c, l)`]
        [`std::tolower(c, l)`]
    ]
    [
        [`to_lower(c_)`]
        [`to_lower(c_, std::locale())`]
    ]
]

[h3 Preconditions]
* `std::to_upper(c, l)` is a valid expression.
* `std::to_upper(c_, std::locale())` is a valid expression.

[h3 Example]
    BOOST_CHECK( equals(
        std::string("ABCDE"),
        std::string("abCde")|transformed(to_upper)
    ));

[note `to_upper` and `to_lower` is a _callable_object_, hence you need not to
      care whether the base _range_ is `std::string` or `std::wstring`.]

[h3 See also]
* [link oven.transformed transformed]

[endsect]




[section unzipped]

[h3 Description]
`unzipped` reverses `zipped`.

[h3 Header]
* `<pstade/oven/unzipped.hpp>`

[h3 Model of]
* _pipable_object_

[h3 Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`_rng|unzipped`]
        [
            `({a11,a21,..,aM1} {a12,a22,..,aM2} .. {a1N,a2N,..,aMN})`
        ]
    ]
]

[h3 Preconditions]
* `boost::range_value<_typeof(_rng)>::type` is a `boost::tuple`.
* There is a `a` such that `{(a11 a12 .. a1N),(a21 a22 .. a2N),..,(aM1 aM2 .. aMN)}` is `_rng`.

[h3 Example]
	std::cout <<
	    (
	        boost::assign::list_of
	            (boost::make_tuple(1,2))
	            (boost::make_tuple(2,3))
	            (boost::make_tuple(3,4))
	            | unzipped
	    );

	// output> ({1,2,3} {2,3,4})


[h3 See also]
* [link oven.zipped zipped]

[endsect]




[section zipped]

[h3 Description]
`zipped` takes a tuple of ranges and returns a _range_ of corresponding tuples.
If one input _range_ is short, excess elements of the longer range are discarded.

[h3 Header]
* `<pstade/oven/zipped.hpp>`

[h3 Model of]
* _pipable_object_

[h3 Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`u|zipped`]
        [
            `[T(boost::make_tuple(_begin(_rng1),..,_begin(_rngN))), T(boost::make_tuple(_end(_rng1),..,_end(_rngN))))`
        ]
    ]
]

[h3 Preconditions]
* `u` is a `boost::tuple` such that `(_rng1 _rng2 .. _rngN)`.
* `T` is `boost::zip_iterator<_typeof(boost::make_tuple(_begin(_rng1),..,_begin(_rngN)))>` such that `T(boost::make_tuple(_begin(_rng1),..,_begin(_rngN)))` is a valid expression.

[h3 Example]
	std::cout <<
	    (
	        boost::make_tuple(
	            boost::assign::list_of(1)(2)(3),
	            boost::assign::list_of(2)(3)(4)
	        )
	            | zipped
	    );

	// output> {(1 2),(2 3),(3 4)}

[h3 See also]
* [@http://www.boost.org/libs/iterator/doc/zip_iterator.html zip_iterator]
* [link oven.zipped_with zipped_with]
* [link oven.unzipped unzipped]

[endsect]




[section zipped_with]

[h3 Description]
Though `zipped` accepts a function taking a `boost::tuple` as the parameter, it is not so common.
`zipped_with` accepts a "normal" function, then turns it into comfortable one for `zipped` before passing.

[h3 Header]
* `<pstade/oven/zipped_with.hpp>`

[h3 Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`op_make_zipped_with<R>`]
        [
            A _callable_object_ type
        ]
    ]
    [
        [`op_make_zipped_with<R>()(u, _fun)`]
        [
            `u|zipped|op_make_transformed<R>()(fuse(_fun))`
        ]
    ]
    [
        [`op_make_zipped_with<>()(u, _cal)`]
        [
            `u|zipped|op_make_transformed<>()(fuse(_cal))`
        ]
    ]
    [
        [`u|zipped_with(_cal)`]
        [
            `op_make_zipped_with<>()(u, _cal)`
        ]
    ]
]

[h3 Preconditions]
* `u|zipped|op_make_transformed<R>(fuse(_fun))` is a valid expressin.
* `u|zipped|transformed(fuse(_cal))` is a valid expressin.
* `fuse` is an imaginary function which turns a _function_object_ into the one taking a `boost::tuple` as the parameter.

[endsect]




[endsect]
