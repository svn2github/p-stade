[section Function Builders]

Function builders build __MAJOR_FUNCTION_OBJECT__ type,
which can be used with `boost::lambda::bind` and `boost::result_of`.

[import ../example/function_builders.cpp]
[import ../example/variadic_print.cpp]




[section function]

[heading Description]
`function` is the "kernel" class template which builds a __LITTLE_FUNCTION__ into __MAJOR_FUNCTION_OBJECT__ type.

[heading Header]
* `<pstade/egg/function.hpp>`

[heading Synopsys]
    template<class Little, class Stg = _default>
    struct function
    {
        typedef function function_type;

        typedef Little little_type;
        typedef Stg strategy_type;

        Little lit; // exposition only
        Little const& little() const { return lit; }

        // unspecified
        // ...
    };

[heading Notation]
* `f` is an object of `function<_Lit, _Stg>`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`function<_Lit, _Stg>`]
        [A __MAJOR_FUNCTION_OBJECT__ /aggregate/ type]
    ]
    [
        [`f(a1,...,aN)`]
        [`f.little().call<_Lit::apply<_Lit const, _meta_arg_list(a, _Stg)>::type>(_arg_list(a, _Stg))`]
    ]
    [
        [`f()`]
        [`f.little().call<_Lit::nullary_result_type>()`]
    ]
]

[heading Preconditions]
* `_Lit` is __COPY_CONSTRUCTIBLE__.
* The corresponding semantics is a valid expression.

[heading Invariants]
* `function<_Lit, _Stg>` is a /POD/ type if and only if `_Lit` is a /POD/ type.
* `function<_Lit, _Stg>` is __DEFAULT_CONSTRUCTIBLE__ if and only if `_Lit` is __DEFAULT_CONSTRUCTIBLE__.
* `function<_Lit, _Stg>` is __ASSIGNABLE__ if and only if `_Lit` is __ASSIGNABLE__.

[heading Example]
[code_function_example]

[heading See also]
* __EGG_FORWARDING_STRATEGIES__
* __EGG_FUNCTION_FACADE__
* __EGG_DEDUCED_FORM__
* __EGG_MAKE_FUNCTION__

[endsect]




[section function_facade]

[heading Description]
`function_facade` creates a new __MAJOR_FUNCTION_OBJECT__ type using "CRTP".
Though a type built from `function_facade` can't be a /POD/ type, it can have non-default constructors.

[heading Header]
* `<pstade/egg/function_facade.hpp>`

[heading Notation]
* ...

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`_lit`]
        [A __MAJOR_FUNCTION_OBJECT__]
    ]
    [
        [`_lit(a1,...,aN)`]
        [`_lit.call<_typeof(_lit)::apply<_typeof(_lit) const, _meta_arg_list(a, _Stg)>::type>(_arg_list(a, _Stg))`]
    ]
    [
        [`_lit()`]
        [`_lit.call<R0>()`]
    ]
]

[heading Preconditions]
* `_lit` is an object whose type is derived from `function_facade<_typeof(_lit), _Stg = _default, R0 = _default>`.
* The corresponding semantics is a valid expression.

[heading Example]
[code_function_facade_example]

[heading See also]
* __EGG_FORWARDING_STRATEGIES__
* __EGG_FUNCTION__
* __EGG_DEDUCED_FORM__

[endsect]




[section deferred]

[heading Description]
`deferred` is akin to `boost::detail::functionN` family.
It is useful because `operator()` can use nested typedefs.

[heading Header]
* `<pstade/egg/deferred.hpp>`

[heading Notation]
* `f` is an object of `deferred<Lam, _Stg>::type`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`deferred<Lam, _Stg = _default>::type`]
        [A __MAJOR_FUNCTION_OBJECT__ /POD/ type]
    ]
    [
        [`PSTADE_EGG_DEFERRED()`]
        [A braced initializer of `deferred<Lam, _Stg>::type`]
    ]
    [
        [`f(a1,...,aN)`]
        [`boost::mpl::apply<Lam, _meta_arg_list(a, _Stg)>::type()(_arg_list(a, _Stg))`]
    ]
]

[heading Preconditions]
* `1 <= N && N <= BOOST_MPL_LIMIT_METAFUNCTION_ARITY`, which has a default value `5`.
* `boost::mpl::apply<Lam, _meta_arg_list(a, _Stg)>::type::result_type` is a valid expression.
* The corresponding semantics is a valid expression.

[heading Invariants]
* Non-local object `f` with /static storage duration/ is /statically initialized/ if initialized using `PSTADE_EGG_DEFERRED()`.
* `f` is __DEFAULT_CONSTRUCTIBLE__ and __ASSIGNABLE__.

[caution For some compiler bug, `deferred` randomly fails to work as a __POLYMORPHIC_FUNCTION_OBJECT__ under msvc-8.0.
         Use `PSTADE_EGG_DEFER` and `PSTADE_EGG_DEFER_BY` if you need portability. ]


[heading Example]
[code_deferred_example]

[heading See also]
* __EGG_FORWARDING_STRATEGIES__
* __EGG_DEFER__

[endsect]




[section generator]

[heading Description]
`generator` builds "object generator".

[heading Header]
* `<pstade/egg/generator.hpp>`

[heading Notation]
* `C(Lam)` is
    * a type which behaves like `Lam` without no nested `type` if `Lam` is an __MPL_PLACEHOLDER_EXPRESSION__.
    * `Lam` itself otherwise.
* `g` is an object of `generator<Lam, _Stg, Cons, R0>::type`.
* `T` is `boost::mpl::apply<C(Lam), _meta_arg_list(a, _Stg)>::type`.
* `Cst(U)` is `mpl::apply<X_construct<boost::mpl::_1, boost::mpl::_2>, U, _Stg>::type` if `Cons` is `_default`, `mpl::apply<Cons, U, _Stg>::type` otherwise.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`generator<Lam, _Stg = _default, Cons = _default, R0 = _default>::type`]
        [A __MAJOR_FUNCTION_OBJECT__ /POD/ type]
    ]
    [
        [`PSTADE_EGG_GENERATOR()`]
        [A braced initializer of `generator<Lam, _Stg, Cons, R0>::type`]
    ]
    [
        [`g(a1,...,aN)`]
        [`Cst(T)()(_safe_arg_list(a, _Stg))`]
    ]
    [
        [`g()`]
        [`Cst(R0)()()`]
    ]
]

[heading Preconditions]
* `Lam` is an (possibly /cv-qualified/) __MPL_LAMBDA_EXPRESSION__.
* The corresponding semantics is a valid expression.

[heading Invariants]
* Non-local object `g` with /static storage duration/ is /statically initialized/ if initialized using `PSTADE_EGG_GENERATOR()`.
* `g` is __DEFAULT_CONSTRUCTIBLE__ and __ASSIGNABLE__.

[note `Lam` is not instantiated while invoking `boost::mpl::apply`, so that any static assertion in generated type doesn't fail.]

[heading Deducers]
Some basic and useful __METAFUNCTION_CLASS__ types are provided for better error messages.
You can place any elaborate __MPL_LAMBDA_EXPRESSION__ in generating type, though.

[heading Valid expressions of Deducers]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`deduce<A, As>`]
        [` boost::mpl::apply<As, A>` if the corresponding argument is passed; ill-formed otherwise.]
    ]
    [
        [`deduce<A, As, Def>`]
        [` boost::mpl::apply<As, A>` if the corresponding argument is passed; `boost::mpl::identity<Def>` otherwise.]
    ]
    [
        [`as_ref`]
        [`boost::add_reference<boost::mpl::_>`]
    ]
    [
        [`as_cref`]
        [`boost::add_reference< boost::add_const<boost::mpl::_> >`]
    ]
    [
        [`as_value`]
        [`boost::remove_cv< boost::decay<boost::mpl::_> >`]
    ]
    [
        [`as_qualified`]
        [`boost::mpl::identity<boost::mpl::_>`]
    ]
]

[heading Example]
[code_generator_example]

[heading See also]
* __EGG_FORWARDING_STRATEGIES__
* __EGG_CONSTRUCT__
* __EGG_CONSTRUCT_BRACED1__
* __EGG_CONSTRUCT_BRACED2__
* __EGG_CONSTRUCT_VARIADIC1__

[endsect]




[section automatic]

[heading Description]
`automatic` adds automatic conversion support to a cast form function.

[heading Header]
* `<pstade/egg/automatic.hpp>`

[heading Notation]
* `u` is an object of `automatic<Lam, _Stg>::type`.
* `F` is `boost::mpl::apply<Lam, _typeof(to), _Stg>::type`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`automatic<Lam, _Stg = _default>::type`]
        [A __MAJOR_FUNCTION_OBJECT__ /POD/ type]
    ]
    [
        [`PSTADE_EGG_AUTOMATIC()`]
        [A braced initializer of `automatic<Lam, _Stg>::type`]
    ]
    [
        [`To to = u(a1,...,aN);`]
        [`To to = boost::implicit_cast<_typeof(to)>( fuse(F())(X_fusion_pack<_Stg>()(a1,...,aN)) );`]
    ]
]

[heading Preconditions]
* `F` is a __POLYMORPHIC_FUNCTION_OBJECT__ type.
* `boost::is_convertible<unspecified, _typeof(to)>::value == false`.
* The corresponding semantics is a valid expression.
* `u` is not placed in a default argument list.

[note These valid expressions imply that the automatic deduction is available everywhere /copy-initialization/ is invoked.
      For example, you can place `u` in /return-statement/. The last precondition comes from a bug of GCC.]

[heading Invariants]
* Non-local object `u` with /static storage duration/ is /statically initialized/ if initialized using `PSTADE_EGG_AUTOMATIC()`.
* `u` is __DEFAULT_CONSTRUCTIBLE__ and __ASSIGNABLE__.

[heading Example]
[code_automatic_example]

[heading See also]
* __EGG_FORWARDING_STRATEGIES__

[endsect]




[section static_]

[heading Description]
`static_` builds /POD/ __FUNCTION_OBJECT__ from __DEFAULT_CONSTRUCTIBLE__ one.
Note that Egg's __FUNCTION_OBJECT__ class templates which begin with `X_` are not guaranteed
to be /statically initialized/ without `static_`.

[heading Header]
* `<pstade/egg/static.hpp>`

[heading Notation]
* `u` is an object of `static_<Lam, _Stg>::type`.
* `F` is `boost::mpl::apply<Lam, _Stg>::type`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`static_<Lam, _Stg = _default>::type`]
        [A __MAJOR_FUNCTION_OBJECT__ /POD/ type]
    ]
    [
        [`PSTADE_EGG_STATIC()`]
        [A braced initializer of `static_<Lam, _Stg>::type`]
    ]
    [
        [`u(a1,...,aN)`]
        [`F()(_safe_arg_list(a, _Stg))`]
    ]
]

[heading Preconditions]
* `F` is a __POLYMORPHIC_FUNCTION_OBJECT__ type.
* The corresponding semantics is a valid expression.

[heading Invariants]
* Non-local object `u` with /static storage duration/ is /statically initialized/ if initialized using `PSTADE_EGG_STATIC()`.
* `u` is __DEFAULT_CONSTRUCTIBLE__ and __ASSIGNABLE__.

[heading Example]
[code_static_example]

[heading See also]
* __EGG_FORWARDING_STRATEGIES__

[endsect]




[section variadic]

[heading Description]
`variadic` emulates __VARIADIC_FUNCTION__ in C++98.
In fact, this is a syntax sugar of __EGG_UNFUSE__.

[heading Header]
* `<pstade/egg/variadic.hpp>`

[heading Notation]
* ...

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`variadic<_Lit, _Stg = _default, R0 = _default>::type`]
        [`result_of_unfuse<function<_Lit, by_cref>, _default, R0, _Stg>::type`]
    ]
    [
        [`PSTADE_EGG_VARIADIC_L _lit PSTADE_EGG_VARIADIC_R`]
        [A braced initializer of `variadic<_typeof(_lit),...>::type`]
    ]
    [
        [`PSTADE_EGG_VARIADIC(L)`]
        [`PSTADE_EGG_VARIADIC_L L PSTADE_EGG_VARIADIC_R`]
    ]
]

[heading Preconditions]
* The corresponding semantics is a valid expression.

[heading Invariants]
* What the corresponding semantics implies.

[heading Example]
[code_variadic_print]

[heading See also]
* __EGG_FORWARDING_STRATEGIES__
* __EGG_UNFUSE__
* __EGG_CONSTRUCT_VARIADIC1__

[endsect]




[section make_function]

[heading Description]
`make_function` is the object generator of `function<>`.
This is useful when you need a "self" __MAJOR_FUNCTION_OBJECT__ in __LITTLE_FUNCTION__`call`.

[heading Header]
* `<pstade/egg/make_function.hpp>`

[heading Model of]
* __STATIC_FUNCTION_OBJECT__

[heading Notation]
* ...

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`X_make_function<_Stg = _default>`]
        [A __MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_make_function<_Stg>()(_lit)`]
        [`function<_typeof(_lit), _Stg> f = {_lit}; return f;`]
    ]
    [
        [`make_function`]
        [`X_make_function<>()`]
    ]
]

[heading Preconditions]
* The corresponding semantics is a valid expression.

[heading Example]
...

[heading See also]
* __EGG_FORWARDING_STRATEGIES__
* __EGG_FUNCTION__

[endsect]




[/

[section Nullary result_of registration]

[heading Description]
__BOOST_RESULT_OF__ treats nullary-callable type as special case.
A nullary __FUNCTION_OBJECT__ which doesn't have nested `result_type`
must inform __BOOST_RESULT_OF__ about its nullary return type by (possibly partially) specializing `boost::result_of`.
The following macros assist such routine work.

[note If a __FUNCTION_OBJECT__ is a template specialization of `function<...>`, these macros are not needed at all.
      But a nullary __FUNCTION_OBJECT__ derived from `function<...>` needs these. ]

[heading Header]
* `<pstade/egg/register_nullary_result.hpp>`

[heading Model of]
* ...

[heading Notation]
* ...

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`PSTADE_EGG_RESISTER_NULLARY_RESULT_OF_TYPE(T)`]
        [`T` becomes __POLYMORPHIC_FUNCTION_OBJECT__ which is nullary-callable.]
    ]
    [
        [`PSTADE_EGG_RESISTER_NULLARY_RESULT_OF_TEMPLATE(X, S)`]
        [`X<...>` becomes __POLYMORPHIC_FUNCTION_OBJECT__ which is nullary-callable.]
    ]
]

[heading Preconditions]
* These macros must be used in the global namespace.
* `T` and `X<...>` is a nullary-callable __FUNCTION_OBJECT__ type.
* `BOOST_TYPEOF_REGISTER_TYPE(T)` is a valid expression.
* `BOOST_TYPEOF_REGISTER_TEMPLATE(X, S)` is a valid expression.
* If `T` is a type which is derived from neither `function<...>` nor `function_facade<...>`,
    * `T::nullary_result_type` and `T::mutable_nullary_result_type` must be a valid expression.
* If `X<...>` is a template specialization which is derived from neither `function<...>` nor `function_facade<...>`,
    * `X<...>::nullary_result_type` and `X<...>::mutable_nullary_result_type` must be a valid expression.

[heading Example]
...

[heading See also]
* __EGG_FUNCTION__
* __EGG_FUNCTION_FACADE__
* __BOOST_TYPEOF__

[endsect]

]




[endsect]
