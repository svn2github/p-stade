[section Function Objects]

It is difficult or even impossible to get a __FUNCTION_OBJECT__ from a function template.
Egg no longer considers function templates to be useful, so that it provides
"objectified" functions which replace some famous function templates.


[import ../example/infix_apply.cpp]
[import ../example/nested_lambda.cpp]


[/

[section Functionals]

[heading Description]
Egg provides the __POLYMORPHIC_FUNCTION_OBJECT__ version of `<functional>`.

[heading Header]
* `<pstade/egg/functional.hpp>`

[heading Model of]
* ...

[heading Notation]
* `do_` is an imaginary operator which applies the corresponding operator.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`X_##op<R = _ud, _Stg = _ud>`]
        [A __MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_##op<R, _Stg>()(a1,...,aN)`]
        [`do_(op, _fwd_arg_list(a, _Stg))`]
    ]
    [
        [`op`]
        [__STATIC_FUNCTION_OBJECT__ which behaves as if it were `X_##op<>()`.]
    ]
]

[heading Preconditions]
* `op` is one of the [@http://boost-sandbox.sourceforge.net/libs/proto/doc/html/boost_proto/users_guide/expression_construction/tags_and_meta_functions.html tag names] of __BOOST_PROTO__.
* `R` specifies operator return type. If `R` is `_ud`, it is deduced by using __BOOST_LAMBDA__ [@http://www.boost.org/doc/html/lambda/extending.html deduction system].
* The corresponding semantics is a valid expression.

[heading Example]
    BOOST_CHECK(plus(1, 2) == 1 + 2);

[heading See also]
* ...

[endsect]

]




[section adapted_to]

[heading Description]
`adapted_to` provides the way to access underlying base __FUNCTION_OBJECT__ or __LITTLE_FUNCTION__ from adapted __FUNCTION_OBJECT__.

[heading Header]
* `<pstade/egg/adapted_to.hpp>`

[heading Model of]
* ...

[heading Notation]
* `b` is a base object such that `_decltype(b)` is `B const &`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`X_adapted_to<B>`]
        [A __MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_adapted_to<B>()(f)`]
        [Extracts `b` from `f`.]
    ]
    [
        [`egg::adapted_to<B>(f)`]
        [`X_adapted_to<B>()(f)`]
    ]
]

[heading Preconditions]
* `f` is a __FUNCTION_OBJECT__ which __EGG_FUNCTION_ADAPTORS__ or __EGG_FUNCTION_BUILDERS__ makes.
* `B` is a base __FUNCTION_OBJECT__ or __LITTLE_FUNCTION__ type.
* The corresponding semantics is a valid expression.

[heading Example]
[code_adapted_to_comparison]

[heading See also]
* ...

[endsect]




[section always]

[heading Description]
`always` returns a __FUNCTION_OBJECT__ always returning the same object.

[heading Header]
* `<pstade/egg/always.hpp>`

[heading Model of]
* __STATIC_FUNCTION_OBJECT__

[heading Notation]
* `bound(x)` is `_fwd_arg_list([x], by_value)`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`always(x)`]
        [A __MAJOR_FUNCTION_OBJECT__ which holds `bound(x)`.]
    ]
    [
        [`always(x)(a1,...,aN)`]
        [`_arg_list(bound(x), by_cref)`]
    ]
    [
        [`always_ref`]
        [__STATIC_FUNCTION_OBJECT__]
    ]
    [
        [`always_ref(x)`]
        [A __MAJOR_FUNCTION_OBJECT__]
    ]
    [
        [`always_ref(x)(a1,...,aN)`]
        [`_arg_list([x], by_perfect)`]
    ]
]

[heading Preconditions]
* `0 <= N && N <= PSTADE_EGG_MAX_LINEAR_ARITY`.
* The corresponding semantics is a valid expression.

[heading Example]
...

[heading See also]
* ...

[endsect]




[section apply]

[heading Description]
`apply` calls a function with trailing arguments.

[heading Header]
* `<pstade/egg/apply.hpp>`

[heading Model of]
* __STATIC_FUNCTION_OBJECT__

[heading Notation]
* ...

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`X_apply<_Stg = _ud>`]
        [A __MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_apply<_Stg>()(_pfo,a1,...,aN)`]
        [`_const(_pfo)(_fwd_arg_list(a, _Stg))` ]
    ]
    [
        [`apply`]
        [`X_apply<>()`]
    ]
]

[heading Preconditions]
* `_arg_list([_pfo,a1,...,aN], _Stg)` is a valid expression.
* The corresponding semantics is a valid expression.


[heading Example]
[code_infix_apply_example]

[heading See also]
* ...

[endsect]




[/

[section auto_new]

[heading Description]
`auto_new` returns a `std::auto_ptr<>`.

[heading Header]
* `<pstade/egg/auto_new.hpp>`

[heading Model of]
* ...

[heading Notation]
* ...

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`X_auto_new<T, _Stg = _ud>`]
        [A __MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_auto_new<T, _Stg>()(a1,...,aN)`]
        [`std::auto_ptr<T>(new T(_fwd_arg_list(a, _Stg)))`]
    ]
    [
        [`egg::auto_new<T>(a1,...,aN)`]
        [`X_auto_new<T>()(a1,...,aN)`]
    ]
]

[heading Preconditions]
* The corresponding semantics is a valid expression.

[heading Example]
...

[heading See also]
* ...

[endsect]




[section shared_new]

[heading Description]
`shared_new` returns a `boost::shared_ptr<>`.

[heading Header]
* `<pstade/egg/shared_new.hpp>`

[heading Model of]
* ...

[heading Notation]
* ...

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`X_shared_new<T, _Stg = _ud>`]
        [A __MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_shared_new<T, _Stg>()(a1,...,aN)`]
        [`boost::shared_ptr<T>(new T(_fwd_arg_list(a, _Stg)))`]
    ]
    [
        [`egg::shared_new<T>(a1,...,aN)`]
        [`X_shared_new<T>()(a1,...,aN)`]
    ]
]

[heading Preconditions]
* The corresponding semantics is a valid expression.

[heading Example]
...

[heading See also]
* ...

[endsect]

]



[section bll_bind]

[heading Description]
`bll_bind` is a __STATIC_FUNCTION_OBJECT__ which represents `boost::lambda::bind`.

[heading Header]
* `<pstade/egg/bll/bind.hpp>`

[heading Model of]
* __STATIC_FUNCTION_OBJECT__

[heading Notation]
* ...

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`bll_bind(a1,...,aN)`]
        [__POLYMORPHIC__ `boost::lambda::bind(_fwd_arg_list(a, by_cref))`]
    ]
]

[heading Preconditions]
* The corresponding semantics is a valid expression.

[heading Example]
[code_bll_bind_example]

[heading See also]
* __BOOST_LAMBDA__
* __EGG_LAZY__

[endsect]




[section bll_N]

[heading Description]
`bll_N` is a __STATIC_FUNCTION_OBJECT__ which represents `boost::lambda::_N`.

[heading Header]
* `<pstade/egg/bll/placeholders.hpp>`

[heading Model of]
* __STATIC_FUNCTION_OBJECT__ but not /statically initialized/.

[heading Notation]
* ...

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`bll_##N`]
        [__POLYMORPHIC__ `boost::lambda::_##N`]
    ]
]

[heading Preconditions]
* The corresponding semantics is a valid expression.

[heading Example]
...

[heading See also]
* __BOOST_LAMBDA__

[endsect]




[section construct]

[heading Description]
`X_construct` is constructor as __FUNCTION_OBJECT__.

[heading Header]
* `<pstade/egg/construct.hpp>`

[heading Model of]
* ...

[heading Notation]
* ...

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`X_construct<T, _Stg = _ud>`]
        [A __MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_construct<T, _Stg>()(a1,...,aN)`]
        [`T(_fwd_arg_list(a, _Stg))`]
    ]
    [
        [`X_construct<>`]
        [`X_construct<_mpl::_1, _mpl::_2>`]
    ]
]

[heading Preconditions]
* The corresponding semantics is a valid expression.

[heading Example]
...

[heading See also]
* __EGG_GENERATOR__

[endsect]




[section construct_braced1]

[heading Description]
`X_construct_braced1` constructs object using braced-initializer.

[heading Header]
* `<pstade/egg/construct_braced1.hpp>`

[heading Model of]
* ...

[heading Notation]
* ...

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`X_construct_braced1<T, _Stg = _ud>`]
        [A __MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_construct_braced1<T, _Stg>()(a1,...,aN)`]
        [`T t = {_fwd_arg_list(a, _Stg)}; return t;`]
    ]
    [
        [`X_construct_braced1<>`]
        [`X_construct_braced1<_mpl::_1, _mpl::_2>`]
    ]
]

[heading Preconditions]
* The corresponding semantics is a valid expression.

[heading Example]
...

[heading See also]
* __EGG_GENERATOR__

[endsect]




[section construct_braced2]

[heading Description]
`X_construct_braced2` constructs object using braced-initializer.

[heading Header]
* `<pstade/egg/construct_braced2.hpp>`

[heading Model of]
* ...

[heading Notation]
* ...

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`X_construct_braced2<T, _Stg = _ud>`]
        [A __MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_construct_braced2<T, _Stg>()(a1,...,aN)`]
        [`T t = {{_fwd_arg_list(a, _Stg)}}; return t;`]
    ]
    [
        [`X_construct_braced2<>`]
        [`X_construct_braced2<_mpl::_1, _mpl::_2>`]
    ]
]

[heading Preconditions]
* The corresponding semantics is a valid expression.

[heading Example]
...

[heading See also]
* __EGG_GENERATOR__

[endsect]



[/

[section construct_unfused1]

[heading Description]
`X_construct_unfused1` constructs result of __EGG_UNFUSE__ using braced-initializer.

[heading Header]
* `<pstade/egg/construct_unfused1.hpp>`

[heading Model of]
* ...

[heading Notation]
* ...

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`X_construct_unfused1<T, _Stg = _ud>`]
        [A __MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_construct_unfused1<T, _Stg>()(a1,...,aN)`]
        [`T t = PSTADE_EGG_UNFUSE_L {_fwd_arg_list(a, _Stg)} PSTADE_EGG_UNFUSE_R; return t;`]
    ]
    [
        [`X_construct_unfused1<>`]
        [`X_construct_unfused1<_mpl::_1, _mpl::_2>`]
    ]
]

[heading Preconditions]
* The corresponding semantics is a valid expression.

[heading Example]
...

[heading See also]
* __EGG_UNFUSE__
* __EGG_GENERATOR__

[endsect]

]




[section construct_variadic1]

[heading Description]
`X_construct_variadic1` constructs __EGG_VARIADIC__ object using braced-initializer.

[heading Header]
* `<pstade/egg/construct_variadic1.hpp>`

[heading Model of]
* ...

[heading Notation]
* ...

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`X_construct_variadic1<T, _Stg = _ud>`]
        [A __MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_construct_variadic1<T, _Stg>()(a1,...,aN)`]
        [`T t = PSTADE_EGG_VARIADIC_L {_fwd_arg_list(a, _Stg)} PSTADE_EGG_VARIADIC_R; return t;`]
    ]
    [
        [`X_construct_variadic1<>`]
        [`X_construct_variadic1<_mpl::_1, _mpl::_2>`]
    ]
]

[heading Preconditions]
* The corresponding semantics is a valid expression.

[heading Example]
...

[heading See also]
* __EGG_VARIADIC__
* __EGG_GENERATOR__

[endsect]




[section get]

[heading Description]
`get<N>` is akin to `boost::tuples::get<N::value>`.

[heading Header]
* `<pstade/egg/get.hpp>`

[heading Model of]
* ...

[heading Notation]
* `fusion` is `boost::fusion`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`X_get<N>`]
        [A __MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_get<N>()(t)`]
        [`fusion::deref(fusion::advance<N>(fusion::begin(t)))`]
    ]
    [
        [`X_get_c<n>`]
        [`X_get< _mpl::int_<n> >`]
    ]
    [
        [`egg::get<N>(t)`]
        [`X_get<N>()(t)`]
    ]
    [
        [`egg::get_c<n>(t)`]
        [`X_get_c<n>()(t)`]
    ]
]

[heading Preconditions]
* `t` can be `boost::tuple<...>` or `std::pair<...>`.
* The corresponding semantics is a valid expression.

[heading Example]
...

[heading See also]
* __BOOST_FUSION__
* __BOOST_TUPLE__

[endsect]




[section identity]

[heading Description]
`identity` returns argument unchanged.

[heading Header]
* `<pstade/egg/identity.hpp>`

[heading Model of]
* __STATIC_FUNCTION_OBJECT__

[heading Notation]
* ...

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`X_identity<_Stg = _ud>`]
        [A __MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_identity<_Stg>()(a1)`]
        [`_fwd_arg_list([a1], _Stg)` ]
    ]
    [
        [`identity`]
        [`X_identity<>()`]
    ]
]

[heading Preconditions]
* The corresponding semantics is a valid expression.

[heading Example]
...

[heading See also]
* ...

[endsect]




[section pack]

[heading Description]
`pack` makes `boost::tuple<...>` for argument forwarding.

[heading Header]
* `<pstade/egg/pack.hpp>`

[heading Model of]
* __STATIC_FUNCTION_OBJECT__

[heading Notation]
* `dts_(c1,...,cK)` is `_decltype(c1),...,_decltype(cK)`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`X_pack<_Stg = _ud>`]
        [A __MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_pack<_Stg>()(a1,...,aN)`]
        [`boost::tuple<dts_(_fwd_arg_list(a, _Stg))>(_arg_list(a, _Stg))`]
    ]
    [
        [`pack`]
        [`X_pack<>()`]
    ]
]

[heading Preconditions]
* If `_bytag_at(_Stg, N, I)` is `by_value`, `_typeof(aI)` is __COPY_CONSTRUCTIBLE__.
* The corresponding semantics is a valid expression.

[heading Example]
...

[heading See also]
* __BOOST_FUSION__
* __BOOST_TUPLE__

[endsect]




[/

[section fusion_pack]

[heading Description]
`fusion_pack` makes `boost::fusion::vector<>` for arguments for forwarding.

[heading Header]
* `<pstade/egg/fusion/pack.hpp>`

[heading Model of]
* __STATIC_FUNCTION_OBJECT__

[heading Notation]
* `dts_(c1,...,cK)` is `_decltype(c1),...,_decltype(cK)`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`X_fusion_pack<_Stg = _ud>`]
        [A __MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_fusion_pack<_Stg>()(a1,...,aN)`]
        [`boost::fusion::vector<dts_(_fwd_arg_list(a, _Stg))>(_arg_list(a, _Stg))`]
    ]
    [
        [`fusion_pack`]
        [`X_fusion_pack<>()`]
    ]
]

[heading Preconditions]
* If `_bytag_at(_Stg, N, I)` is `by_value`, `_typeof(aI)` is __COPY_CONSTRUCTIBLE__.
* The corresponding semantics is a valid expression.

[heading Example]
...

[heading See also]
* __BOOST_FUSION__
* __BOOST_TUPLE__

[endsect]

]




[endsect]
