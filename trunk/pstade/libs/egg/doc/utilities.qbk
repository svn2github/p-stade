[section Utilities]

[/ [import ../example/infix_apply.cpp] ]
[import ../example/typeof_meets_type_erasure.cpp]




[section expr]

[heading Description]
"typeof" and "type-erasure" are not conflicting forces.
`expr` performs type-erasure using __BOOST_FUNCTION__ when native typeof isn't available.
So that, type registrations into __BOOST_TYPEOF__ can be minimized.

[heading Header]
* `<pstade/egg/expr.hpp>`

[heading Model of]
* ...

[heading Notation]
* ...

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`egg::expr<Sig>(_pfo)`]
        [`X_mono<Sig>()(_pfo)` which can be used with __BOOST_TYPEOF__.]
    ]
]

[heading Preconditions]
* Except for `boost::use_default` and `boost::function<...>`, types in `Sig` is registered to __BOOST_TYPEOF__.
* The corresponding semantics is a valid expression.

[heading Example]
[code_typeof_meets_type_erasure]

[heading See also]
* __BOOST_FUNCTION__
* __BOOST_TYPEOF__

[endsect]




[section bll/result_of.hpp]

[heading Description]
This header lets a __BOOST_LAMBDA__ functor be a __POLYMORPHIC_FUNCTION_OBJECT__.

[heading Header]
* `<pstade/egg/bll/result_of.hpp>`

[heading Model of]
* ...

[heading Notation]
* ...

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`#include <pstade/egg/bll/result_of.hpp>`]
        [A __BOOST_LAMBDA__ functor becomes a __POLYMORPHIC_FUNCTION_OBJECT__.]
    ]
]

[heading Preconditions]
* ...

[heading Example]
...

[heading See also]
* __BOOST_LAMBDA__

[endsect]




[section infix]

[heading Description]
Egg provides __FCPP__ infix operator syntax.

[heading Header]
* `<pstade/egg/infix.hpp>`

[heading Model of]
* ...

[heading Notation]
* ...

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`a1 ^_pfo^ a2`]
        [`_pfo(_arg_list(a1, by_perfect), _arg_list(a2, by_perfect))`]
    ]
]

[heading Preconditions]
* `using namespace infix;` is placed before the valid expression.
* The corresponding semantics is a valid expression.

[heading Invariants]
* `^_pfo^` behaves as if it had left to right associativity.

[heading Example]
[code_infix_plus_example]

[heading See also]
* __FCPP__
* __EGG_PIPABLE__

[endsect]




[endsect]
