[section Utilities]

It is difficult or even impossible to get a __FUNCTION_OBJECT__ from a function template.
Egg no longer considers function templates to be useful, so that it provides
"objectified" functions which replaces some famous function templates.

[import ../example/nested_lambda.cpp]




[section lambda_bind]

[heading Description]
`lambda_bind` is a __FUNCTION_OBJECT__ which represents `boost::lambda::bind`.

[heading Header]
* `<pstade/egg/lambda/bind.hpp>`

[heading Model of]
* __OPERATABLE_OBJECT__
* __BINDABLE_OBJECT__

[heading Notation]
* ...

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`lambda_bind(f, a1,...,aN)`]
        [`boost::lambda::bind(f, a1,...,aN)`]
    ]
]

[heading Preconditions]
* `0 <= N && N <= 9`.
* The corresponding semantics is a valid expression.

[heading Example]
...

[heading See also]
* __EGG_LAZY_LAMBDA_BIND__

[endsect]




[section:lazy_lambda_bind lambda_Bind]
Pending...

[heading Description]
`lambda_Bind` is a lazy `lambda_bind`, which lets a complicated lambda expression readable.

[heading Header]
* `<pstade/egg/lambda/lazy_bind.hpp>`

[heading Model of]
* __OPERATABLE_OBJECT__
* __BINDABLE_OBJECT__

[heading Notation]
* ...

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`lambda_Bind`]
        [`lazy(lambda_bind)`]
    ]
]

[heading Preconditions]
* The corresponding semantics is a valid expression.

[heading Example]
[code_lazy_lambda_bind_example]

[heading See also]
* __EGG_LAZY__
* __EGG_LAMBDA_BIND__

[endsect]




[section tuple_get]

[heading Description]
`tuple_get` is a __FUNCTION_OBJECT__ which represents `boost::tuples::get`.

[heading Header]
* `<pstade/egg/tuple/get.hpp>`

[heading Model of]
* ...

[heading Notation]
* ...

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`xp_tuple_get<N>`]
        [A __BINDABLE__ __DEFERRED_CALLABLE_OBJECT__ type]
    ]
    [
        [`xp_tuple_get<N>()(t)`]
        [`boost::tuples::get<N::value>(t)`]
    ]
    [
        [`egg::tuple_get<N>(t)`]
        [`xp_tuple_get<N>()(t)`]
    ]
]

[heading Preconditions]
* The corresponding semantics is a valid expression.

[heading Example]
...

[heading See also]
* __BOOST_TUPLE__

[endsect]




[section tuple_pack]

[heading Description]
`tuple_pack` is a __FUNCTION_OBJECT__ which represents `boost::tuples::tie` but /const-qualifier/ sensitive.

[heading Header]
* `<pstade/egg/tuple/pack.hpp>`

[heading Model of]
* __OPERATABLE_OBJECT__
* __BINDABLE_OBJECT__

[heading Notation]
* ...

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`tuple_pack(a1,...,aN)`]
        [`boost::tuples::tuple<_arg(a1)&,...,_arg(aN)&>(a1,...,aN)`]
    ]
]

[heading Preconditions]
* `0 <= N && N <= _MAX_ARITY`.
* The corresponding semantics is a valid expression.

[heading Example]
...

[heading See also]
* __BOOST_TUPLE__

[endsect]




[endsect]
