[section Overview]

[import ../example/introduction.cpp]




[section Preface]

["An Egg to day is better than a Hen to-morrow.] -- Benjamin Franklin

[endsect]




[section Introduction]

Egg is a header-only library for building __POLYMORPHIC_FUNCTION_OBJECT__ which can be used
with __BOOST_LAMBDA__. Such a function object is named __MAJOR_FUNCTION_OBJECT__.

Egg mainly provides three components:

* __EGG_FUNCTION_BUILDERS__ which build __LITTLE_FUNCTION__ into __MAJOR_FUNCTION_OBJECT__.
* __EGG_FUNCTION_ADAPTORS__ which take __POLYMORPHIC_FUNCTION_OBJECT__ then return adapted one.
* __EGG_FUNCTION_OBJECTS__ which are ports of famous function templates.

[code_introduction]

[endsect]




[section Motivation]

[heading What's Polymorphic Function Object?]
In short, __POLYMORPHIC_FUNCTION_OBJECT__ is __FUNCTION_OBJECT__ which can be used with __BOOST_RESULT_OF__.
__BOOST_RESULT_OF__ is a __METAFUNCTION__ to extract function return types without help of C++0x `decltype`,
so that it enables you to do the functional programming in C++03.

[heading Polymorphic Function Object Models]
Fortunately, __POLYMORPHIC_FUNCTION_OBJECT__ types are superset of __SGI_ADAPTABLE_FUNCTION_OBJECT__ types,
so that you don't need extra efforts to play with Egg if you're already familiar with that concept.
For example, the followings are trivially conforming __POLYMORPHIC_FUNCTION_OBJECT__ types:

* function pointers
* `std::less<int>`
* function objects `boost::bind(...)` returns.
* `boost::function<...>`

We can say these function objects "monomorphic", meaning that its return type doesn't depend on its argument types.
If you want to build such a function object into __BOOST_RESULT_OF__ conforming one, it is very easy:
[code_introduction_monomorphic]
A function object which has nested `result_type` is trivially conforming __POLYMORPHIC_FUNCTION_OBJECT__ (as monomorphic one),
which can be used with __BOOST_RESULT_OF__.

[heading Egg what for?]
Unfortunately, if you need a __POLYMORPHIC_FUNCTION_OBJECT__ whose return type depends on
its argument types, it is not easy. There are many compiler bugs, pitfalls, and key-typings.

Egg is the framework for building such function objects.

[endsect]




[section Requirements]

* __BOOST__ Version 1.34.0 or later (build not required)
* __PSTADE_RELEASE__ Version 1.03.9 or later (build not required)

[endsect]




[section Portability]

Egg is known to work on the following platforms:

* Microsoft Visual C++ .NET Version 7.1 SP1
* Microsoft Visual C++ 2005 Express Edition SP1
* Microsoft Visual C++ 2008 Express Edition
* MinGW with GCC 3.4.4
* MinGW with GCC 4.1.2
[/ * Intel C++ Compiler Professional Edition 10.1 for Windows ]

[endsect]




[section Rationale]

* Egg works around __FORWARDING_PROBLEM__.
* Egg framework provides a way of /static initialization/ if possible.
* Egg doesn't introduce any new "traits".

[endsect]




[section Acknowledgements]
* Special thanks to David Abrahams. __FORWARDING_PROBLEM__ workaround is based on his __DAVID_CALLABLE__.
* Special thanks to Eric Niebler, who pointed out importance of /static initialization/.
* Special thanks to Cryolite, Hitobashira, Takeshi Mouri, yotto-k, and Yusuke Kajimoto.
  These people are instrumental in the design and development of Egg.
* Special thanks to Dan Marsden, who is review manager of this library.

[endsect]




[section Notation]

This document uses the following notation.

[table
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`_decltype`]
        [An imaginary operator which is the same as `decltype` of C++0x.]
    ]
    [
        [`_typeof(a)`]
        [`boost::remove_cv<boost::remove_reference<_decltype(a)>::type>::type`]
    ]
    [
        [`_const(a)`]
        [`static_cast<_typeof(a) const>(a)`]
    ]
    [
        [`_pfo`]
        [A __POLYMORPHIC_FUNCTION_OBJECT__]
    ]
    [
        [`_PFo`]
        [A __POLYMORPHIC_FUNCTION_OBJECT__ type which is neither /reference/ nor /cv-qualified/.]
    ]
    [
        [`_lit`]
        [A __LITTLE_FUNCTION__ object]
    ]
    [
        [`_Lit`]
        [A __LITTLE_FUNCTION__ type which is neither /reference/ nor /cv-qualified/.]
    ]
    [
        [`_Stg`]
        [A type which is one of the __EGG_FORWARDING_STRATEGIES__.]
    ]
    [
        [`_Bytag`]
        [A type which is one of `by_perfect`, `by_ref`, `by_cref`, and `by_value`.]
    ]
    [
        [`_ud`]
        [`boost::use_default`]
    ]
    [
        [`_mpl`]
        [`boost::mpl`]
    ]
    [
        [`_PACK_MAX_SIZE`]
        [`10`]
    ]
    [
        [`[a1,...,aN]`]
        [An imaginary operator to construct parameter list.]
    ]
    [
        [`++`]
        [An imaginary operator to concatenate parameter lists.]
    ]
    [
        [`+++`]
        [An imaginary operator to concatenate tokens.]
    ]
]

Also, assume that every expression is placed after:

    namespace egg = pstade::egg;
    using namespace egg;

[endsect]




[endsect]
