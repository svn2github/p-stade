[section Concepts]




[section Operatable Object]

[heading Description]
An __OPERATABLE_OBJECT__ is a __DEFERRED_CALLABLE_OBJECT__ which can specify the type of itself by using prefix `op_`.

[heading Refinement of]
* __DEFERRED_CALLABLE_OBJECT__

[heading Requirements]
In addition to the requirements defined in __DEFERRED_CALLABLE_OBJECT__,
for any __OPERATABLE_OBJECT__ `f` the following must be met:

* `op_++f` is `_typeof(f)`.
* `f` is a /const-qualified/ but not /volatile-qualified/ lvalue.
* `f` is /statically initialized/ unless otherwise specified.
* `boost::result_of<op_++f(a1,...,aN)>::type` is the same as `boost::result_of<op_++f const(a1,...,aN)>::type`.

[heading Models]
* ...

[heading See also]
* ...

[endsect]




[section Auxiliary Interface]

[heading Description]
An __AUXILIARY_INTERFACE__ is a __DEFERRED_CALLABLE_OBJECT__ which supports a pipe-like syntax
used as if it were a /member function/.

[heading Refinement of]
* __DEFERRED_CALLABLE_OBJECT__

[heading Requirements]
In addition to the requirements defined in __DEFERRED_CALLABLE_OBJECT__,
for any __AUXILIARY_INTERFACE__ `i` the following must be met:

* `x|i(x1,..,xN)` is a valid expression if and only if `i(x, x1,..,xN)` is a valid expression.
* `x|i(x1,..xN)` and `i(x, x1,..,xN)` have the same effects.
* If `N` is `0`, `x|i()` and `x|i` are valid expressions which have the same effects.

[heading Models]
* ...

[heading See also]
* [@http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2004/n1742.pdf Auxiliary class interfaces]

[endsect]




[section Bindable Object]

[heading Description]
A __BINDABLE_OBJECT__ is a __FUNCTION_OBJECT__ which can be passed to `boost::lambda::bind`.

[heading Refinement of]
* __FUNCTION_OBJECT__

[heading Requirements]
In addition to the requirements defined in __FUNCTION_OBJECT__,
for any __BINDABLE_OBJECT__ `b` the following must be met:

* There is a `N` such that `boost::lambda::bind(b, boost::lambda::_1,...,boost::lambda::_++N)` is a valid expression.

[heading Models]
* ...

[heading See also]
* __BOOST_LAMBDA__

[endsect]




[section Baby Function]

[heading Description]
A __BABY_FUNCTION__ type is a type which __EGG_FUNCTION_MAKERS__ require.

[heading Refinement of]
* ...

[heading Requirements]
For any __BABY_FUNCTION__ type `B` the following must be met:

* `B` has a nested class template named `apply`.
* `B` has a /member function/ named `call` whose return type is explicitly specified by the first template parameter.

[heading Models]
* ...

[heading See also]
* __EGG_FUNCTION_MAKERS__
* __EGG_FORWARDING_STRATEGIES__

[endsect]




[import ../example/result_of_tutorial.cpp]

[section result_of tutorial]

[caution __BOOST_RESULT_OF__ document in boost.org is outdated.]

[heading How to call]

If you pass an lvalue argument, it must be a /reference type/; It can't be a /reference type/, otherwise:
[code_result_of_tutorial1]

Thanks to these two convention, you can easily write a "chain" of __BOOST_RESULT_OF__:
[code_result_of_tutorial2]

A /callable type/ can't be a /reference type/ but must be "const-correct",
meaning that you must add `const` to /const-qualified/ __FUNCTION_OBJECT__ type:
[code_result_of_tutorial3]

However, if a library guarantees the same behavior between /const-qualified/ type and
non-/const-qualified/ type (as __OPERATABLE_OBJECT__ does so), you could omit `const`:
[code_result_of_tutorial4]

[heading Bugs]

* msvc-7.1 and msvc-8.0 doesn't work with /POD/ templates.
* A /const-qualified/ function pointer doesn't work.

These bugs can be worked around by `pstade::result_of` in `<pstade/result_of.hpp>`.
The first bug is fixed with Boost1.35.

[heading See also]
* __PSTADE_RESULT_OF__

[endsect]




[endsect]
