[section Concepts]




[section Constant Object]

[heading Description]
A __CONSTANT_OBJECT__ is an object which is /const qualified/.

[heading Refinement of]
* ...

[heading Requirements]
For any __CONSTANT_OBJECT__ `x` the following must be met:

* `boost::remove_reference<_decltype(x)>::type` is `_typeof(x) const`.

[heading Example]
    int const x = 0; // x is a ConstantObject.

[heading Models]
* ...

[heading See also]
* ...

[endsect]




[section Lexically Typed Object]

[heading Description]
A __LEXICALLY_TYPED_OBJECT__ is a named lvalue whose type is referable by using prefix `T_`.

[heading Refinement of]
* ...

[heading Requirements]
For any __LEXICALLY_TYPED_OBJECT__ `x` the following must be met:

* `x` is a named lvalue.
* `T_++x` is `_typeof(x)`.

[heading Example]
    int x;
    typedef int T_x; // Now x is a LexicallyTypedObject.

[heading Models]
* ...

[heading See also]
* __STATIC_FUNCTION_OBJECT__

[endsect]




[section Bindable Object]

[heading Description]
A __BINDABLE_OBJECT__ is a __FUNCTION_OBJECT__ which can be passed to `boost::lambda::bind`.

[heading Refinement of]
* __FUNCTION_OBJECT__

[heading Requirements]
In addition to the requirements defined in the refinements,
for any __BINDABLE_OBJECT__ `b` the following must be met:

* There is a `N` such that `boost::lambda::bind(b, boost::lambda::_1,...,boost::lambda::_++N)` is a valid expression.

[heading Models]
* ...

[heading See also]
* __BOOST_LAMBDA__

[endsect]




[section Pipable Object]

[heading Description]
A __PIPABLE_OBJECT__ is an object which behaves as if it were a "pipe" using `operator|` and `operator|=`.

[heading Refinement of]
* __FUNCTION_OBJECT__

[heading Requirements]
In addition to the requirements defined in the refinements,
for any __PIPABLE_OBJECT__ `p` the following must be met:

* `x|p(x1,...,xN)` is a valid expresion if and only if `p(x1,...,xN)|=x` is a valid expression.
* `x|p(x1,...,xN)` and `p(x1,...,xN)|=x` have the same effects.
* If `N` is `0`, then `x|p()`, `x|p`, `p|=x`, and `p()|=x` are valid expressions which have the same effects.

[heading Models]
* ...

[heading See also]
* __AMBI_OBJECT__

[endsect]




[section Static Function Object]

[heading Description]
A __STATIC_FUNCTION_OBJECT__ is a __FUNCTION_OBJECT__ which is intended to replace normal functions.
Egg is a library which helps you define __STATIC_FUNCTION_OBJECT__.

[heading Refinement of]
* __BINDABLE_OBJECT__
* __CONSTANT_OBJECT__
* __DEFERRED_CALLABLE_OBJECT__
* __LEXICALLY_TYPED_OBJECT__

[heading Requirements]
In addition to the requirements defined in the refinements,
for any __STATIC_FUNCTION_OBJECT__ `f` the following must be met:

* `_typeof(f)` is a /POD/ type, and `f` is /statically initialized/.
* If `boost::result_of<_typeof(f) const(a1,...,aN)>::type` is a valid expression,
  `boost::result_of<_typeof(f)(a1,...,aN)>::type` is a valid expression which is the same type.

[heading Example]
    typedef int (*T_foo)(double d);
    int foo_impl(double d) { ... }
    T_foo const foo = &foo_impl; // foo is a StaticFunctionObject.

[heading Models]
* ...

[heading See also]
* __BOOST_RESULT_OF__

[endsect]




[section Ambi Object]

[heading Description]
An __AMBI_OBJECT__ is a __STATIC_FUNCTION_OBJECT__ which supports both free function syntax and `operator|`.

[heading Refinement of]
* __STATIC_FUNCTION_OBJECT__

[heading Requirements]
In addition to the requirements defined in the refinements,
for any __AMBI_OBJECT__ `i` the following must be met:

* `x|i(x1,...,xN)` is a valid expression if and only if `i(x, x1,...,xN)` is a valid expression.
* `x|i(x1,...xN)` and `i(x, x1,...,xN)` have the same effects.
* If `N` is `0`, then `x|i()` and `x|i` are valid expressions which have the same effects.

[heading Models]
* ...

[heading See also]
* __EGG_AMBI__
* __PIPABLE_OBJECT__

[endsect]



[section Baby Function]

[heading Description]
A __BABY_FUNCTION__ type is a type which __EGG_FUNCTION_MAKERS__ require.

[heading Refinement of]
* ...

[heading Requirements]
For any __BABY_FUNCTION__ type `B` the following must be met:

* `B` has a nested class template named `apply`, where `apply<...>::type` means return type of function calls.
* `B` has a const /member function/ named `call` whose return type is explicitly specified by the first template parameter.

[heading Models]
* ...

[heading See also]
* __EGG_FUNCTION_MAKERS__
* __EGG_FORWARDING_STRATEGIES__

[endsect]




[import ../example/result_of_tutorial.cpp]

[section result_of tutorial]

[caution __BOOST_RESULT_OF__ document in boost.org is outdated.]

[heading How to call]

If you pass an lvalue argument, it must be a /reference type/; It can't be a /reference type/, otherwise:
[code_result_of_tutorial1]

Thanks to these two convention, you can easily write a "chain" of __BOOST_RESULT_OF__:
[code_result_of_tutorial2]

A /callable type/ can't be a /reference type/ but must be "const-correct",
meaning that you must add `const` to /const-qualified/ __FUNCTION_OBJECT__ type:
[code_result_of_tutorial3]

However, if a library guarantees the same behavior between /const-qualified/ type and
non-/const-qualified/ type (as __STATIC_FUNCTION_OBJECT__ does so), you could omit `const`:
[code_result_of_tutorial4]

[heading Bugs]

* msvc-7.1 and msvc-8.0 doesn't work with /POD/ templates.
* A /const-qualified/ function pointer doesn't work.

These bugs can be worked around by `pstade::result_of` in `<pstade/result_of.hpp>`.
The first bug is fixed with Boost1.35.

[heading See also]
* __PSTADE_RESULT_OF__

[endsect]




[endsect]
