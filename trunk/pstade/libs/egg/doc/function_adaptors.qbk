[section Function Adaptors]

[import ../example/function_adaptors.cpp]
[import ../example/mono_lambda.cpp]
[import ../example/adapted_to_comparison.cpp]
[import ../example/unnamed_recursion.cpp]
[import ../example/freed_prisoner.cpp]
[import ../example/fusing.cpp]
[import ../example/composing.cpp]


Function Adaptor is a higher-order function that takes a "base" __FUNCTION_OBJECT__
and returns an "adapted" __FUNCTION_OBJECT__.
Function Adaptor provides, if possible, two interfaces: A normal higher-order __FUNCTION_OBJECT__, and
a __METAFUNCTION__ with the corresponding macro for /static initialization/.
An adapted non-local __FUNCTION_OBJECT__ with /static storage duration/ is /statically initialized/
if the base __FUNCTION_OBJECT__ type is a /POD/ type and an expression passed to the macro is a /constant expression/.
Also, Function Adaptors don't modify __DEFAULT_CONSTRUCTIBLE__ and __ASSIGNABLE__-ness of base __FUNCTION_OBJECT__ unless otherwise specified.

[ note If a macro argument is not guaranteed to contain no commas and recursions,
       you must use `PSTADE_EGG_XXX_L` and `PSTADE_EGG_XXX_R` instead of `PSTADE_EGG_XXX`. ]




[section ambiN]

[heading Description]
`ambi` family helps you to makes an __AMBI_FUNCTION_OBJECT__.

[heading Header]
* `<pstade/egg/ambi.hpp>`

[heading Model of]
* __STATIC_FUNCTION_OBJECT__

[heading Notation]
* `fc(d, _Bytag)` is an object of `result_of_ambi##N<_typeof(d), _Bytag>::type` initialized using `d` or an initializer.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`result_of_ambi##N<_PFo, _Bytag = _ud>::type`]
        [An __AMBI__ __MAJOR_FUNCTION_OBJECT__ type.]
    ]
    [
        [`PSTADE_EGG_AMBI_L init PSTADE_EGG_AMBI_R`]
        [A braced initializer of `result_of_ambi##N<_PFo,...>::type`]
    ]
    [
        [`PSTADE_EGG_AMBI(I)`]
        [`PSTADE_EGG_AMBI_L I PSTADE_EGG_AMBI_R`]
    ]
    [
        [`o|fc(d, _Bytag)(a1,...,aN)`]
        [`_const(d)(_fwd_arg_list([o]++a, _Bytag))`]
    ]
    [
        [`X_ambi##N<_Bytag = _ud>`]
        [A __MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_ambi##N<_Bytag>()(d)`]
        [`fc(d, _Bytag)`]
    ]
    [
        [`ambi##N`]
        [`X_ambi##N<>()`]
    ]
]

[heading Preconditions]
* `N <= _PACK_MAX_ARITY-1`
* There is a `d_` such that `_PFo d_ = init;` is a valid expression.
* If `_Bytag` is `by_value`, `_typeof(aI)` is __COPY_CONSTRUCTIBLE__.
* The corresponding expression is a valid expression.

[heading Invariants]
* `result_of_ambi##N<_PFo,...>::type` is a /POD/ type if and only if `_PFo` is a /POD/ type.

[heading Example]
[code_ambi_example]

[heading See also]
* __EGG_PIPABLE__

[endsect]




[section compose]

[heading Description]
`compose` is a Function Adaptor for function composition.

[heading Header]
* `<pstade/egg/compose.hpp>`

[heading Model of]
* __STATIC_FUNCTION_OBJECT__

[heading Notation]
* `fc(d1, d2, R0, _Stg)` is an object of `result_of_compose<_typeof(d1),_typeof(d2), R0, _Stg>::type`  initialized using `d1` and `d1` or these initializer.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`result_of_compose<_Dco1, _Dco2, R0 = _ud, _Stg = _ud>::type`]
        [A __MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`PSTADE_EGG_COMPOSE_L init1 , init2 PSTADE_EGG_COMPOSE_R`]
        [A braced initializer of `result_of_compose<_Dco1, _Dco2,...>::type`]
    ]
    [
        [`PSTADE_EGG_COMPOSE(I1, I2)`]
        [`PSTADE_EGG_COMPOSE_L I1 , I2 PSTADE_EGG_COMPOSE_R`]
    ]
    [
        [`fc(d1, d2, R0, Stg)(a1,...,aN)`]
        [`_const(d1)(_const(d2)(_fwd_arg_list(a, _Stg)))`]
    ]
    [
        [`X_compose<R0 = _ud, _Stg = _ud>`]
        [A __MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_compose<R0, _Stg>()(d1, d2)`]
        [`fc(d1, d2, R0, _Stg)`]
    ]
    [
        [`compose`]
        [`X_compose<>()`]
    ]
]

[heading Preconditions]
* `0 <= N && N <= _PACK_MAX_ARITY`.
* There is a `d1_` and `d2_` such that `_Dco1 d1_ = init1; _Dco2 d2_ = init2;` is a valid expression.
* The corresponding expression is a valid expression.
* `_decltype_r0(R0, d1(d2()))` is a valid expression which specifies the nullary return type.

[note The last precondition means that `fc(d1, d2, R0, _Stg)` is NOT nullary-callable if `R0` is `_ud`. ]

[heading Invariants]
* `result_of_compose<_Dco1, _Dco2,...>::type` is a /POD/ type if and only if `_Dco1` and `_Dco2` is a /POD/ type.

[heading Example]
[code_example_composing]

[heading See also]
* __EGG_DETERMINING_NULLARY_RETURN_TYPES__
* __EGG_INFIX__

[endsect]




[section curryN]

[heading Description]
`curry` family turns a base __FUNCTION_OBJECT__ into curried one.

[heading Header]
* `<pstade/egg/curry.hpp>`

[heading Model of]
* __STATIC_FUNCTION_OBJECT__

[heading Notation]
* `fc(d)` is an object of `result_of_curry##N<_typeof(d)>::type` initialized using `d` or an initializer.
* `b` is `_bound(a1),...,_bound(a(N-1))`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`result_of_curry##N<_PFo>::type`]
        [A __MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`PSTADE_EGG_CURRY##N##_L init PSTADE_EGG_CURRY##N##_R`]
        [A braced initializer of `result_of_curry##N<_PFo>::type`]
    ]
    [
        [`PSTADE_EGG_CURRY##N(I)`]
        [`PSTADE_EGG_CURRY##N##_L I PSTADE_EGG_CURRY##N##_R`]
    ]
    [
        [`fc(d)(a1)...(aN)`]
        [`_const(d)(_fwd_arg_list(b, by_cref)++_fwd_arg_list([aN], by_perfect))`]
    ]
    [
        [`curry##N(d)`]
        [`fc(d)`]
    ]
]

[heading Preconditions]
* `N` is the arity of `_PFo` such that `2 <= N && N <= PSTADE_EGG_MAX_ARITY`.
* There is a `d_` such that `_PFo d_ = init;` is a valid expression.
* The corresponding expression is a valid expression.

[heading Invariants]
* `result_of_curry##N<_PFo>::type` is a /POD/ type if and only if `_PFo` is a /POD/ type.

[heading Example]
[code_curry_example]

[heading See also]
* [@http://en.wikipedia.org/wiki/Currying Currying]
* __EGG_UNCURRY__
* __EGG_BOUND_ARGUMENTS__

[endsect]




[section uncurry]

[heading Description]
`uncurry` reverses `curry`.

[heading Header]
* `<pstade/egg/uncurry.hpp>`

[heading Model of]
* __STATIC_FUNCTION_OBJECT__

[heading Notation]
* `fc(d, _Stg)` is an object of `result_of_uncurry<_typeof(d), _Stg>::type` initialized using `d` or an initializer.
* `parens(b1,...,bN)` is `(b1)(b2),...,(bN)`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`result_of_uncurry<_PFo, _Stg = _ud>::type`]
        [A __MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`PSTADE_EGG_UNCURRY_L init PSTADE_EGG_UNCURRY_R`]
        [A braced initializer of `result_of_uncurry<_PFo>::type`]
    ]
    [
        [`PSTADE_EGG_UNCURRY(I)`]
        [`PSTADE_EGG_UNCURRY_L I PSTADE_EGG_UNCURRY_R`]
    ]
    [
        [`fc(d, _Stg)(a1,...,aN)`]
        [`_const(d)(parens(_fwd_arg_list(a, _Stg)))`]
    ]
    [
        [`X_uncurry<_Stg = _ud>`]
        [A __MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_uncurry<_Stg>()(d)`]
        [`fc(d, _Stg)`]
    ]
    [
        [`uncurry`]
        [`X_uncurry<>()`]
    ]
]

[heading Preconditions]
* `2 <= N && N <= PSTADE_EGG_MAX_ARITY`.
* There is a `d_` such that `_PFo d_ = init;` is a valid expression.
* The corresponding expression is a valid expression.

[heading Invariants]
* `result_of_uncurry<_PFo,...>::type` is a /POD/ type if and only if `_PFo` is a /POD/ type.

[heading See also]
* [@http://en.wikipedia.org/wiki/Currying Currying]
* __EGG_CURRY__

[endsect]




[section fix]

[heading Description]
`fix` is "fixed point combinator", which enables you to write recursive functions on the fly.

[heading Header]
* `<pstade/egg/fix.hpp>`

[heading Model of]
* __STATIC_FUNCTION_OBJECT__

[heading Notation]
* ...
[/ * `fc(d)` is an object of `result_of_fix<_typeof(d)>::type` initialized using `d` or an initializer. ]

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
[/
    [
        [`result_of_fix<_PFo>::type`]
        [A __MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`PSTADE_EGG_FIX_L init PSTADE_EGG_FIX_R`]
        [A braced initializer of `result_of_fix<_PFo>::type`]
    ]
    [
        [`PSTADE_EGG_FIX(I)`]
        [`PSTADE_EGG_FIX_L I PSTADE_EGG_FIX_R`]
    ]
]
    [
        [`fix(_pfo)(a1)`]
        [`_const(_pfo)(fix(_pfo))(_arg_list(a1, by_perfect))`]
    ]
    [
        [`fix2`]
        [__STATIC__ `compose(fix, curry2)`]
    ]
]

[heading Preconditions]
[/ * There is a `d_` such that `_PFo d_ = init;` is a valid expression. ]
* The corresponding semantics is a valid expression.

[note `fix(_pfo)` that is passed to `_pfo` as the first argument represents `_pfo` itself.
      Also notice that `_pfo` must be curried in advance. ]

[heading Example]
[code_unnamed_recursion]

[heading See also]
* [@http://en.wikipedia.org/wiki/Y_combinator Fixed point combinator]
* __EGG_CURRY__
* __EGG_MEMOIZE__
* __EGG_COMPOSE__

[endsect]




[section flip]

[heading Description]
`flip` flips the order of arguments.

[heading Header]
* `<pstade/egg/flip.hpp>`

[heading Model of]
* __STATIC_FUNCTION_OBJECT__

[heading Notation]
* `fc(d, _Stg)` is an object of `result_of_flip<_typeof(d), _Stg>::type` initialized using `d` or an initializer.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`result_of_flip<_PFo, _Stg = _ud>::type`]
        [A __MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`PSTADE_EGG_FLIP_L init PSTADE_EGG_FLIP_R`]
        [A braced initializer of `result_of_flip<_PFo,...>::type`]
    ]
    [
        [`PSTADE_EGG_FLIP(I)`]
        [`PSTADE_EGG_FLIP_L I PSTADE_EGG_FLIP_R`]
    ]
    [
        [`fc(d, _Stg)(a1, a2)`]
        [`_const(d)(_fwd_arg_list([a2, a1], _Stg))`]
    ]
    [
        [`X_flip<_Stg = _ud>`]
        [A __MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_flip<_Stg>()(d)`]
        [`fc(d, _ud)`]
    ]
    [
        [`flip`]
        [`X_flip<>()`]
    ]
]

[heading Preconditions]
* There is a `d_` such that `_PFo d_ = init;` is a valid expression.
* The corresponding semantics is a valid expression.

[heading Invariants]
* `result_of_flip<_PFo,...>::type` is a /POD/ type if and only if `_PFo` is a /POD/ type.

[heading Example]
...

[heading See also]
* ...

[endsect]




[/

[section free]

[heading Description]
`free` is akin to `boost::mem_fn`, which turns member pointers into __FUNCTION_OBJECT__.

[heading Header]
* `<pstade/egg/free.hpp>`

[heading Model of]
* __STATIC_FUNCTION_OBJECT__

[heading Notation]
* `fc(p)` is an object of `result_of_free<_typeof(p)>::type` initialized using `p` or an initializer.
* `C` is class type which `_typeof(p)` belongs to.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`result_of_free<MPtr>::type`]
        [A __MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`PSTADE_EGG_FREE_L init PSTADE_EGG_FREE_R`]
        [A braced initializer of `result_of_free<MPtr>::type`]
    ]
    [
        [`PSTADE_EGG_FREE(P)`]
        [`PSTADE_EGG_FREE_L P PSTADE_EGG_FREE_R`]
    ]
    [
        [`fc(p)(a1,...,aN)`]
        [`(a1.*p)(a2,...,aN)`]
    ]
    [
        [`fc(p)(b1,...,bN)`]
        [`(get_pointer(b1)->*p)(b2,...,bN)`]
    ]
    [
        [`fc(p)(a1)`]
        [`(a1.*p)`]
    ]
    [
        [`fc(p)(b1)`]
        [`(get_pointer(b1)->*p)`]
    ]
    [
        [`free(p)`]
        [`fc(p)`]
    ]
]

[heading Preconditions]
* `1 <= N && N <= PSTADE_EGG_MAX_LINEAR_ARITY`.
* `MPtr` is member pointer type.
* `a1` is convertible to `C const&`.
* `b1` is not convertible to `C const&`.
* There is a `p_` such that `Pco p_ = init;` is a valid expression.
* The corresponding semantics is a valid expression.

[heading Invariants]
* `result_of_free<MPtr>::type` is a /POD/ type.

[heading Example]
[code_freed_prisoner]

[heading See also]
* ...

[endsect]

]




[section fuse]

[heading Description]
`fuse` converts the base __FUNCTION_OBJECT__ into a unary __FUNCTION_OBJECT__ which takes a tuple.

[heading Header]
* `<pstade/egg/fuse.hpp>`

[heading Model of]
* __STATIC_FUNCTION_OBJECT__

[heading Notation]
* `fc(d)` is an object of `result_of_fuse<_typeof(d)>::type` initialized using `d` or an initializer.
* `t_` is `_fwd_arg_list(t, by_perfect)`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`result_of_fuse<_PFo>::type`]
        [A __MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`PSTADE_EGG_FUSE_L init PSTADE_EGG_FUSE_R`]
        [A braced initializer of `result_of_fuse<_PFo>::type`]
    ]
    [
        [`PSTADE_EGG_FUSE(I)`]
        [`PSTADE_EGG_FUSE_L I PSTADE_EGG_FUSE_R`]
    ]
    [
        [`fc(d)(t)`]
        [`_const(d)(boost::fusion::at_c<0>(t_),...,boost::fusion::at_c<N-1>(t_))`]
    ]
    [
        [`fc(d)(t0)`]
        [`_const(d)()`]
    ]
    [
        [`fuse(d)`]
        [`fc(d)`]
    ]
]

[heading Preconditions]
* `1 <= N && N <= _PACK_MAX_ARITY`.
* There is a `d_` such that `_PFo d_ = init;` is a valid expression.
* `t0` is an empty tuple.
* The corresponding semantics is a valid expression.

[heading Invariants]
* `result_of_fuse<_PFo>::type` is a /POD/ type if and only if `_PFo` is a /POD/ type.

[heading Example]
[code_fuse_example]

[heading See also]
* __BOOST_FUSION_FUNCTIONAL__
* __VARIADIC_TEMPLATES__
* __EGG_UNFUSE__

[endsect]




[section unfuse]

[heading Description]
`unfuse` reverses `fuse`.

[heading Header]
* `<pstade/egg/unfuse.hpp>`

[heading Model of]
* __STATIC_FUNCTION_OBJECT__

[heading Notation]
* `fc(d, R0, _Stg)` is an object of `result_of_unfuse<_typeof(d), R0, Pack, _Stg>::type` initialized using `d` or an initializer.
* `pack_` is `X_pack<_Stg>()` if `Pack` is `_ud`, `_mpl::apply<Pack, _Stg>::type()` otherwise.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`result_of_unfuse<_PFo, R0 = _ud, Pack = _ud, _Stg = _ud>::type`]
        [A __MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`PSTADE_EGG_UNFUSE_L init PSTADE_EGG_UNFUSE_R`]
        [A braced initializer of `result_of_unfuse<_PFo,...>::type`]
    ]
    [
        [`PSTADE_EGG_UNFUSE(I)`]
        [`PSTADE_EGG_UNFUSE_L I PSTADE_EGG_UNFUSE_R`]
    ]
    [
        [`fc(d, R0, _Stg)(a1,...,aN)`]
        [`_const(d)( pack_(_arg_list(a, _Stg)) )`]
    ]
    [
        [`X_unfuse<R0 = _ud, Pack = _ud, _Stg = _ud>`]
        [A __MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_unfuse<R0, Pack, _Stg>()(d)`]
        [`fc(d, R0, _ud)`]
    ]
    [
        [`unfuse`]
        [`X_unfuse<>()`]
    ]
]

[heading Preconditions]
* There is a `d_` such that `_PFo d_ = init;` is a valid expression.
* The corresponding semantics is a valid expression.
* `_decltype_r0(R0, d(pack_())` is a valid expression which specifies the nullary return type.
* If `Pack` isn't `_ud`, `_mpl::apply<Pack, by_ref>::type` is a valid expression.

[heading Invariants]
* `result_of_unfuse<_PFo,...>::type` is a /POD/ type if and only if `_PFo` is a /POD/ type.

[heading Example]
[code_unfuse_example]

[heading See also]
* __EGG_DETERMINING_NULLARY_RETURN_TYPES__
* __BOOST_FUSION_FUNCTIONAL__
* __VARIADIC_TEMPLATES__
* __EGG_FUSE__
* __EGG_VARIADIC__
* __EGG_PACK__
[/ * __EGG_CONSTRUCT_UNFUSED1__ ]

[endsect]




[section indirect]

[heading Description]
`indirect` takes a pointer-like object then calls it after dereferencing.

[heading Header]
* `<pstade/egg/indirect.hpp>`

[heading Model of]
* __STATIC_FUNCTION_OBJECT__

[heading Notation]
* `fc(p, _Stg)` is an object of `result_of_indirect<_typeof(p), _Stg>::type` initialized using `p` or an initializer.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`result_of_indirect<Pco, _Stg = _ud>::type`]
        [A __MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`PSTADE_EGG_INDIRECT_L init PSTADE_EGG_INDIRECT_R`]
        [A braced initializer of `result_of_indirect<Pco,...>::type`]
    ]
    [
        [`PSTADE_EGG_INDIRECT(P)`]
        [`PSTADE_EGG_INDIRECT_L P PSTADE_EGG_INDIRECT_R`]
    ]
    [
        [`fc(p, _Stg)(a1,...,aN)`]
        [`(*p)(_fwd_arg_list(a, _Stg))`]
    ]
    [
        [`X_indirect<_Stg = _ud>`]
        [A __MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_indirect<_Stg>()(p)`]
        [`fc(p, _Stg)`]
    ]
    [
        [`indirect`]
        [`X_indirect<>()`]
    ]
]

[heading Preconditions]
* `boost::pointee<Pco>::type` is __POLYMORPHIC_FUNCTION_OBJECT__ type.
* There is a `p_` such that `Pco p_ = init;` is a valid expression.
* The corresponding semantics is a valid expression.

[heading Invariants]
* `result_of_indirect<Pco,...>::type` is a /POD/ type if and only if `Pco` is a /POD/ type.

[heading Example]
[code_indirect_example]

[heading See also]
* __BOOST_INDIRECT_ITERATOR__

[endsect]




[section lazy]

[heading Description]
__BOOST_PHOENIX__ is able to make a lambda expression without a "bind function".
`lazy` turns a bindable __FUNCTION_OBJECT__ into such one which can be used with __BOOST_LAMBDA__.

[heading Header]
* `<pstade/egg/lazy.hpp>`

[heading Model of]
* __STATIC_FUNCTION_OBJECT__

[heading Notation]
* `fc(f)` is an object of `result_of_lazy<_typeof(f), Bind>::type` initialized using `f` or an initializer.
* `bind_` is `bll_bind` if `Bind` is `_ud`, `Bind()` otherwise.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`result_of_lazy<F, Bind = _ud>::type`]
        [A __MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`PSTADE_EGG_LAZY_L init PSTADE_EGG_LAZY_R`]
        [A braced initializer of `result_of_lazy<F>::type`]
    ]
    [
        [`PSTADE_EGG_LAZY(I)`]
        [`PSTADE_EGG_LAZY_L I PSTADE_EGG_LAZY_R`]
    ]
    [
        [`fc(f)(a1,...,aN)`]
        [__POLYMORPHIC__ `bind_(_fwd_arg_list([f]++a, by_cref))`]
    ]
    [
        [`lazy(f)`]
        [`fc(f)`]
    ]
]

[heading Preconditions]
* There is a `f_` such that `F f_ = init;` is a valid expression.
* The corresponding semantics is a valid expression.

[heading Invariants]
* `result_of_lazy<F>::type` is a /POD/ type if and only if `F` is a /POD/ type.

[heading Example]
[code_lazy_example]

[heading See also]
* __BOOST_PHOENIX__
* __BOOST_LAMBDA__

[endsect]




[section memoize]

[heading Description]
`memoize` stores the result of function for later reuse.

[heading Header]
* `<pstade/egg/memoize.hpp>`

[heading Model of]
* __STATIC_FUNCTION_OBJECT__

[heading Notation]
* `fixed` is an unspecified unary __FUNCTION_OBJECT__ which represents `_pfo` itself.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`memoize(_pfo)`]
        [A __MAJOR_FUNCTION_OBJECT__]
    ]
    [
        [`memoize(_pfo)(a1)`]
        [`_const(_pfo)(fixed, _fwd_arg_list(_fwd_arg_list(a, by_cref), by_value))`]
    ]
]

[note `memoize` can't offer the way to /statically initialize/ a memoized __FUNCTION_OBJECT__.]

[heading Preconditions]
* A __FUNCTION_OBJECT__ returned from `memoize(_pfo)` must always be called with the same type arguments.
* `_typeof(a1)` is __ASSIGNABLE__, __COPY_CONSTRUCTIBLE__ and __EQUALITY_COMPARABLE__.
* `_decltype( _pfo(fixed, _fwd_arg_list(a, by_cref)) )` is __COPY_CONSTRUCTIBLE__.
* The corresponding semantics is a valid expression.

[heading Example]
[code_memoize_example]

[heading See also]
* [@http://en.wikipedia.org/wiki/Y_combinator Fixed point combinator]
* __EGG_FIX__

[endsect]




[section mono]

[heading Description]
`mono` turns a base __FUNCTION_OBJECT__ into "monomorphic" one which contains no templates.

[heading Header]
* `<pstade/egg/mono.hpp>`

[heading Model of]
* ...

[heading Notation]
* `fc(f)` is an object of `result_of_mono<_typeof(f), Sig>::type` initialized using `f` or an initializer.
* `N` is an arity of `Sig`.
* `R` is a return type of `Sig`.
* `ParamOf(Sig, I)` is an imaginary operator which returns an `I`th parameter type of `Sig`.
* `bI` is `boost::implicit_cast<ParamOf(Sig, I)>(aI)`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`result_of_mono<Fun, Sig>::type`]
        [A __MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`PSTADE_EGG_MONO_L init PSTADE_EGG_MONO_R`]
        [A braced initializer of `result_of_mono<Fun,...>::type`]
    ]
    [
        [`PSTADE_EGG_MONO(I)`]
        [`PSTADE_EGG_MONO_L I PSTADE_EGG_MONO_R`]
    ]
    [
        [`fc(f)(a1,...,aN)`]
        [`_const(f)(b1,...,bN)`]
    ]
    [
        [`X_mono<Sig>`]
        [A __MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_mono<Sig>()(f)`]
        [`fc(f)`]
    ]
    [
        [`egg::mono<Sig>(f)`]
        [`X_mono<Sig>()(f)`]
    ]
]

[heading Preconditions]
* `Fun` is a __FUNCTION_OBJECT__ type.
* `Sig` is a /function/ type.
* There is a `f_` such that `Fun f_ = init;` is a valid expression.
* If `R` is `_ud`, `Fun` is a __POLYMORPHIC_FUNCTION_OBJECT__ type; `R` specifies a return type of `Fun`, otherwise.
* The corresponding semantics is a valid expression.

[heading Invariants]
* `result_of_mono<Fun,...>::type` is a /POD/ type if and only if `Fun` is a /POD/ type.
* `result_of_mono<Fun,...>::type` is __SGI_ADAPTABLE__ if and only if `N` is `1` or `2`.

[heading Example]
[code_mono_example]

[heading See also]
* __BOOST_FUSION_FUNCTIONAL__
* __SGI_ADAPTABLE__

[endsect]




[section perfect]

[heading Description]
`perfect` performs the "perfect forwarding".

[heading Header]
* `<pstade/egg/perfect.hpp>`

[heading Model of]
* __STATIC_FUNCTION_OBJECT__

[heading Notation]
* `fc(d)` is an object of `result_of_perfect<_typeof(d)>::type` initialized using `d` or an initializer.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`result_of_perfect<_PFo>::type`]
        [A __MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`PSTADE_EGG_PERFECT_L init PSTADE_EGG_PERFECT_R`]
        [A braced initializer of `result_of_perfect<_PFo>::type`]
    ]
    [
        [`PSTADE_EGG_PERFECT(I)`]
        [`PSTADE_EGG_PERFECT_L I PSTADE_EGG_PERFECT_R`]
    ]
    [
        [`fc(d)(a1,...,aN)`]
        [`_const(d)(_fwd_arg_list(a, by_perfect))`]
    ]
    [
        [`perfect(d)`]
        [`fc(d)`]
    ]
]

[heading Preconditions]
* There is a `d_` such that `_PFo d_ = init;` is a valid expression.
* The corresponding semantics is a valid expression.

[heading Invariants]
* `result_of_perfect<_PFo>::type` is a /POD/ type if and only if `_PFo` is a /POD/ type.

[heading Example]
    BOOST_CHECK( perfect(boost::lambda::_1)(12) == 12 );

[heading See also]
* ...

[endsect]




[section pipable]

[heading Description]
`pipable` adapts a base __FUNCTION_OBJECT__ into __PIPABLE_FUNCTION_OBJECT__.

[heading Header]
* `<pstade/egg/pipable.hpp>`

[heading Model of]
* __STATIC_FUNCTION_OBJECT__

[heading Notation]
* `fc(d, _Stg, _Bytag)` is an object of `result_of_pipable<_typeof(d), _Stg, _Bytag>::type` initialized using `d` or an initializer.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`result_of_pipable<_PFo, _Stg = _ud, _Bytag = _ud>::type`]
        [A __PIPABLE__ __MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`PSTADE_EGG_PIPABLE_L init PSTADE_EGG_PIPABLE_R`]
        [A braced initializer of `result_of_pipable<_PFo,...>::type`]
    ]
    [
        [`PSTADE_EGG_PIPABLE(I)`]
        [`PSTADE_EGG_PIPABLE_L I PSTADE_EGG_PIPABLE_R`]
    ]
    [
        [`o|fc(d, _Stg, _Bytag)(a1,...,aN)`]
        [`_const(d)(_fwd_arg_list(o, _Bytag)++_safe_arg_list(a, _Stg))`]
    ]
    [
        [`X_pipable<_Stg = _ud, _Bytag = _ud>`]
        [A __MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_pipable<_Stg, _Bytag>()(d)`]
        [`fc(d, _Stg, _Bytag)`]
    ]
    [
        [`pipable`]
        [`X_pipable<>()`]
    ]
]

[heading Preconditions]
* `0 <= N && N+1 <= PSTADE_EGG_MAX_LINEAR_ARITY`.
* `N+1 <= _PACK_MAX_ARITY`
* There is a `d_` such that `_PFo d_ = init;` is a valid expression.
* If `_bytag_at(_Stg, N, I)` is `by_value`, `_typeof(aI)` is __COPY_CONSTRUCTIBLE__.
* The corresponding semantics is a valid expression.

[heading Invariants]
* `result_of_pipable<_PFo,...>::type` is a /POD/ type if and only if `_PFo` is a /POD/ type.

[heading Example]
[code_pipable_example]

[tip According to Charles Brockman's research, "pipAble" is not misspelling of "pipEable". ]

[heading See also]
* __EGG_AMBI__
* __EXTENSION_METHOD__

[endsect]




[section regular]

[heading Description]
A __BOOST_LAMBDA__ functor is neither __DEFAULT_CONSTRUCTIBLE__ nor __ASSIGNABLE__.
An iterator holding such a functor can't conform to even __INPUT_ITERATOR__.
`regular` converts it into comfortable one for iterators.

[heading Header]
* `<pstade/egg/regular.hpp>`

[heading Model of]
* __STATIC_FUNCTION_OBJECT__

[heading Notation]
* ...

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`regular(f)`]
        [A __MAJOR_FUNCTION_OBJECT__ which is __DEFAULT_CONSTRUCTIBLE__ and __ASSIGNABLE__.]
    ]
    [
        [`regular(f)(a1,...,aN)`]
        [`_const(f)(_fwd_arg_list(a, by_perfect))`]
    ]
]

[heading Preconditions]
* `f` is a __BOOST_LAMBDA__ functor or __POLYMORPHIC_FUNCTION_OBJECT__.
* The corresponding semantics is a valid expression.

[heading Example]
...

[heading See also]
* __BOOST_ITERATOR__

[endsect]




[section return_]

[heading Description]
`return_` just calls a base __FUNCTION_OBJECT__ with possibly modified return type.

[heading Header]
* `<pstade/egg/return.hpp>`

[heading Model of]
* ...

[heading Notation]
* `fc(f, R, _Stg)` is an object of `result_of_return<_typeof(f), R, _Stg>::type` initialized using `f` or an initializer.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`result_of_return<Fun, R = _ud, _Stg = _ud>::type`]
        [A __MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`PSTADE_EGG_RETURN_L init PSTADE_EGG_RETURN_R`]
        [A braced initializer of `result_of_return<Fun,...>::type`]
    ]
    [
        [`PSTADE_EGG_RETURN(I)`]
        [`PSTADE_EGG_RETURN_L I PSTADE_EGG_RETURN_R`]
    ]
    [
        [`fc(f, R, _Stg)(a1,...,aN)`]
        [`_const(f)(_fwd_arg_list(a, _Stg))`]
    ]
    [
        [`X_return<R, _Stg = _ud>`]
        [A __MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`X_return<R, _Stg>()(f)`]
        [`fc(f, R, _Stg)`]
    ]
    [
        [`egg::return_<R>`]
        [`X_return<R>()`]
    ]
]

[heading Preconditions]
* `Fun` is a __FUNCTION_OBJECT__ type.
* `Fun` is a __POLYMORPHIC_FUNCTION_OBJECT__ type if `R` is `_ud`.
* There is a `f_` such that `Fun f_ = init;` is a valid expression.
* The corresponding semantics is a valid expression.

[heading Invariants]
* `result_of_return<Fun,...>::type` is a /POD/ type if and only if `Fun` is a /POD/ type.

[heading Example]
...

[heading See also]
* ...

[endsect]




[section tagged]

[heading Description]
`tagged` makes a new __FUNCTION_OBJECT__ type.

[heading Header]
* `<pstade/egg/tagged.hpp>`

[heading Model of]
* ...

[heading Notation]
* `fc(d, Tag, _Stg)` is an object of `result_of_tagged<_typeof(d), Tag, _Stg>::type` initialized using `d` or an initializer.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`result_of_tagged<_PFo, Tag, _Stg = _ud>::type`]
        [A __MAJOR_FUNCTION_OBJECT__ type]
    ]
    [
        [`PSTADE_EGG_TAGGED_L init PSTADE_EGG_TAGGED_R`]
        [A braced initializer of `result_of_tagged<_PFo,...>::type`]
    ]
    [
        [`PSTADE_EGG_TAGGED(I)`]
        [`PSTADE_EGG_TAGGED_L I PSTADE_EGG_TAGGED_R`]
    ]
    [
        [`fc(d, Tag, _Stg)(a1,...,aN)`]
        [`_const(d)(_fwd_arg_list(a, _Stg))`]
    ]
    [
        [`tag_of<F>::type`]
        [`Tag` if `F` is `_typeof(fc(d, Tag, _Stg))`, unspecified type otherwise.]
    ]
    [
        [`is_tagged_with<F, Tag>`]
        [`boost::is_same<tag_of<F>::type, Tag>`]
    ]
]

[heading Preconditions]
* `Tag` is any (possibly incomplete) type.
* There is a `d_` such that `_PFo d_ = init;` is a valid expression.
* The corresponding semantics is a valid expression.

[heading Invariants]
* `result_of_tagged<_PFo,...>::type` is a /POD/ type if and only if `_PFo` is a /POD/ type.
* `result_of_tagged<_PFo, Tag1,...>::type` is the same type as `result_of_tagged<_PFo, Tag2,...>::type` if and only if `Tag1` is the same type as `Tag2`.

[heading Example]
...

[heading See also]
* [@http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2141.html Strong Typedefs in C++09(Revisited)]

[endsect]




[endsect]
