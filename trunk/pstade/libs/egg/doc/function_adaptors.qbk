[section Function Adaptors]

[import ../example/function_adaptors.cpp]
[import ../example/mono_lambda.cpp]

Function Adaptor is a higher-order function that takes a __FUNCTION_OBJECT__
and returns an adapted __FUNCTION_OBJECT__.
Function Adaptor provides two interfaces: A normal higher-order __FUNCTION_OBJECT__, and
a __METAFUNCTION__ with the corresponding macro for /static initialization/.
An adapted __FUNCTION_OBJECT__ with /static storage duration/ is /statically initialized/
if the base __FUNCTION_OBJECT__ type is a /POD/ type and an expression passed to the macro is a /constant expression/.

[note These macros might be cumbersome on first glance, but initializers tend to contain commas (or even recur) and
      lazy expansion of /function-like/ macro is very limited even if using `BOOST_PP_IDENTITY` or whatever. ]




[section auxiliaryN]

[heading Description]
`auxiliary` family helps you to make an __AUXILIARY_CLASS_INTERFACE__.

[heading Header]
* `<pstade/egg/auxiliary.hpp>`

[heading Model of]
* ...

[heading Notation]
* `fc(d)` is an object of `result_of_auxiliary++N<_typeof(d)>::type` initialized using `d` or the initializer.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`result_of_auxiliary++N<_Dco>::type`]
        [A __BINDABLE__ __DEFERRED_CALLABLE__ type which meets __AUXILIARY_CLASS_INTERFACE__ expression requirements.]
    ]
    [
        [`PSTADE_EGG_AUXILIARY_L init PSTADE_EGG_AUXILIARY_R`]
        [A braced initializer of `result_of_auxiliary++N<_Dco>::type`]
    ]
    [
        [`fc(d)(a(1),...,a(N+1))`]
        [`d(_arg_list(a, by_perfect))`]
    ]
    [
        [`auxiliary++N`]
        [A __BINDABLE__ __STATIC_FUNCTION_OBJECT__]
    ]
    [
        [`auxiliary++N(d)`]
        [`fc(d)`]
    ]
]

[heading Preconditions]
* `N+1` is the arity of `_Dco` such that `0 <= N && N <= PSTADE_EGG_MAX_ARITY`.
* There is a `d_` such that `_Dco d_ = init;` is a valid expression.
* The corresponding expression is a valid expression.

[heading Invariants]
* `result_of_auxiliary++N<_Dco>::type` is a /POD/ type if and only if `_Dco` is a /POD/ type.

[note Arguments passed to `fc` are not copied.
      Those are bound to references, then forwarded to the base __FUNCTION_OBJECT__.]

[heading Example]
[code_auxiliary_example]

[heading See also]
* __EGG_PIPABLE__

[endsect]




[section compose1]

[heading Description]
`compose1` is a Function Adaptor for function composition.

[heading Header]
* `<pstade/egg/compose1.hpp>`

[heading Model of]
* __STATIC_FUNCTION_OBJECT__

[heading Notation]
* `fc(d1, d2, R0, _Stg)` is an object of `result_of_compose1<_typeof(d1),_typeof(d2), R0, _Stg>::type`  initialized using `d1` and `d1` or these initializer.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`result_of_compose1<_Dco1, _Dco2, R0 = _default, _Stg = _default>::type`]
        [A __BINDABLE__ __DEFERRED_CALLABLE_OBJECT__ type]
    ]
    [
        [`PSTADE_EGG_COMPOSE1_L init1 PSTADE_EGG_COMPOSE1_M init2 PSTADE_EGG_COMPOSE1_R`]
        [A braced initializer of `result_of_compose1<_Dco1, _Dco2, R0, _Stg>::type`]
    ]
    [
        [`fc(d1, d2, R0, Stg)(a1,...,aN)`]
        [`d1(d2(_arg_list(a, _Stg)))`]
    ]
    [
        [`X_compose1<R0 = _default>`]
        [A __BINDABLE__ __DEFERRED_CALLABLE_OBJECT__ type]
    ]
    [
        [`X_compose1<R0>()(d1, d2)`]
        [`fc(d1, d2, R0, _default)`]
    ]
    [
        [`compose1`]
        [`X_compose1<R0>()`]
    ]
]

[heading Preconditions]
* `0 <= N && N <= _TUPLE_MAX_SIZE`.
* There is a `d1_` and `d2_` such that `_Dco1 d1_ = init1; _Dco2 d2_ = init2;` is a valid expression.
* The corresponding expression is a valid expression.
* `_deduce_r0(R0, d1(d2()))` is a valid expression which specifies the nullary return type.

[heading Invariants]
* `result_of_compose1<_Dco1, _Dco2, R0, _Stg>::type` is a /POD/ type if and only if `_Dco1` and `_Dco2` is a /POD/ type.

[heading Example]
...

[heading See also]
* __EGG_DEDUCING_NULLARY_RETURN_TYPES__

[endsect]




[section curryN]

[heading Description]
`curry` family turns a base __FUNCTION_OBJECT__ into curried one.

[heading Header]
* `<pstade/egg/curry.hpp>`

[heading Model of]
* __STATIC_FUNCTION_OBJECT__

[heading Notation]
* `fc(d)` is an object of `result_of_curry++N<_typeof(d)>::type` initialized using `d` or the initializer.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`result_of_curry++N<_Dco>::type`]
        [A __BINDABLE__ __DEFERRED_CALLABLE_OBJECT__ type]
    ]
    [
        [`PSTADE_EGG_CURRY++N++_L init PSTADE_EGG_CURRY++N++_R`]
        [A braced initializer of `result_of_curry++N<_Dco>::type`]
    ]
    [
        [`fc(d)(a1)...(aN)`]
        [`d(_arg_list(_arg_list(a, by_cref), by_value))`]
    ]
    [
        [`curry++N`]
        [A __BINDABLE__ __STATIC_FUNCTION_OBJECT__]
    ]
    [
        [`curry++N(d)`]
        [`fc(d)`]
    ]
]

[heading Preconditions]
* `N` is the arity of `_Dco` such that `2 <= N && N <= 5`.
* There is a `d_` such that `_Dco d_ = init;` is a valid expression.
* The corresponding expression is a valid expression.

[heading Invariants]
* `result_of_curry++N<_Dco>::type` is a /POD/ type if and only if `_Dco` is a /POD/ type.

[heading Example]
[code_curry_example]

[heading See also]
* [@http://en.wikipedia.org/wiki/Currying Currying]
* __EGG_UNCURRY__

[endsect]




[section uncurry]

[heading Description]
`uncurry` reverses `curry`.

[heading Header]
* `<pstade/egg/uncurry.hpp>`

[heading Model of]
* __STATIC_FUNCTION_OBJECT__

[heading Notation]
* `fc(d, _Stg)` is an object of `result_of_uncurry<_typeof(d), _Stg>::type` initialized using `d` or the initializer.
* `parens(b1,...,bN)` is `(b1)(b2),...,(bN)`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`result_of_uncurry<_Dco, _Stg = _default>::type`]
        [A __BINDABLE__ __DEFERRED_CALLABLE_OBJECT__ type]
    ]
    [
        [`PSTADE_EGG_UNCURRY_L init PSTADE_EGG_UNCURRY_R`]
        [A braced initializer of `result_of_uncurry<_Dco>::type`]
    ]
    [
        [`fc(d, _Stg)(a1,...,aN)`]
        [`d(parens(_arg_list(a, _Stg)))`]
    ]
    [
        [`uncurry(d)`]
        [`fc(d, _default)`]
    ]
]

[heading Preconditions]
* `2 <= N && N <= PSTADE_EGG_MAX_ARITY`.
* There is a `d_` such that `_Dco d_ = init;` is a valid expression.
* The corresponding expression is a valid expression.

[heading Invariants]
* `result_of_uncurry<_Dco>::type` is a /POD/ type if and only if `_Dco` is a /POD/ type.

[heading See also]
* [@http://en.wikipedia.org/wiki/Currying Currying]
* __EGG_CURRY__

[endsect]




[section fuse]

[heading Description]
`fuse` converts the base __FUNCTION_OBJECT__ into a unary __FUNCTION_OBJECT__ which takes a tuple.

[heading Header]
* `<pstade/egg/fuse.hpp>`

[heading Model of]
* __STATIC_FUNCTION_OBJECT__

[heading Notation]
* `fc(d)` is an object of `result_of_fuse<_typeof(d)>::type` initialized using `d` or the initializer.
* `t_` is `_arg_list(t, by_perfect)`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`result_of_fuse<_Dco>::type`]
        [A __BINDABLE__ __DEFERRED_CALLABLE_OBJECT__ type]
    ]
    [
        [`PSTADE_EGG_FUSE_L init PSTADE_EGG_FUSE_R`]
        [A braced initializer of `result_of_fuse<_Dco>::type`]
    ]
    [
        [`fc(d)(t)`]
        [`d(boost::get<0>(t_),...,boost::get<N-1>(t_))`]
    ]
    [
        [`fc(d)(t0)`]
        [`d()`]
    ]
    [
        [`fuse(d)`]
        [`fc(d)`]
    ]
]

[heading Preconditions]
* `1 <= N && N <= _TUPLE_MAX_SIZE`.
* There is a `d_` such that `_Dco d_ = init;` is a valid expression.
* `t0` is an empty tuple.
* The corresponding semantics is a valid expression.

[heading Invariants]
* `result_of_fuse<_Dco>::type` is a /POD/ type if and only if `_Dco` is a /POD/ type.

[heading See also]
* __BOOST_FUSION_FUNCTIONAL__
* __VARIADIC_TEMPLATES__
* __EGG_UNFUSE__

[endsect]




[section unfuse]

[heading Description]
`unfuse` reverses `fuse`.

[heading Header]
* `<pstade/egg/unfuse.hpp>`

[heading Model of]
* __STATIC_FUNCTION_OBJECT__

[heading Notation]
* `fc(d, R0, _Stg)` is an object of `result_of_unfuse<_typeof(d), Pack, R0, _Stg>::type` initialized using `d` or the initializer.
* `ref(b1,...,bN)` is `b1&,...,bN&`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`result_of_unfuse<_Dco, Pack = _default, R0 = _default, _Stg = _default>::type`]
        [A __BINDABLE__ __DEFERRED_CALLABLE_OBJECT__ type]
    ]
    [
        [`PSTADE_EGG_UNFUSE_L init PSTADE_EGG_UNFUSE_M PSTADE_EGG_UNFUSE_DEFAULT_PACK PSTADE_EGG_UNFUSE_R`]
        [A braced initializer of `result_of_unfuse<_Dco, _default, R0, _Stg>::type`]
    ]
    [
        [`fc(d, R0, _Stg)(a1,...,aN)`]
        [`d( boost::tuple<ref(_meta_arg_list(a, by_ref))>(_arg_list(a, _Stg)) )`]
    ]
    [
        [`X_unfuse<R0 = _default>`]
        [`A __BINDABLE__ __DEFERRED_CALLABLE_OBJECT__ type`]
    ]
    [
        [`X_unfuse<R0>()(d)`]
        [`fc(d, R0, _default)`]
    ]
    [
        [`unfuse`]
        [`X_unfuse<>()`]
    ]
]

[heading Preconditions]
* `0 <= N && N <= _TUPLE_MAX_SIZE`.
* `Pack` is `_default` (for now).
* There is a `d_` such that `_Dco d_ = init;` is a valid expression.
* The corresponding semantics is a valid expression.
* `_deduce_r0(R0, _decltype(d( boost::tuple<>() ))` is a valid expression which specifies the nullary return type.

[heading Invariants]
* `result_of_unfuse<_Dco>::type` is a /POD/ type if and only if `_Dco` is a /POD/ type.

[heading Example]
...

[heading See also]
* __EGG_DEDUCING_NULLARY_RETURN_TYPES__
* __BOOST_FUSION_FUNCTIONAL__
* __VARIADIC_TEMPLATES__
* __EGG_FUSE__

[endsect]




[section indirect]

[heading Description]
`indirect` takes a pointer-like object then calls it after dereferencing.

[heading Header]
* `<pstade/egg/indirect.hpp>`

[heading Model of]
* __STATIC_FUNCTION_OBJECT__

[heading Notation]
* `fc(p, _Stg)` is an object of `result_of_indirect<_typeof(p), _Stg>::type` initialized using `p` or the initializer.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`result_of_indirect<Pco, _Stg = _default>::type`]
        [A __BINDABLE__ __DEFERRED_CALLABLE_OBJECT__ type]
    ]
    [
        [`PSTADE_EGG_INDIRECT_L init PSTADE_EGG_INDIRECT_R`]
        [A braced initializer of `result_of_indirect<Pco, _Stg>::type`]
    ]
    [
        [`PSTADE_EGG_INDIRECT(P)`]
        [`PSTADE_EGG_INDIRECT_L P PSTADE_EGG_INDIRECT_R`]
    ]
    [
        [`fc(p, _Stg)(a1,...,aN)`]
        [`(*p)(_arg_list(a, _Stg))`]
    ]
    [
        [`indirect(p)`]
        [`fc(p)(_default)`]
    ]
]

[heading Preconditions]
* `boost::pointee<Pco>::type` is __DEFERRED_CALLABLE_OBJECT__ type.
* There is a `p_` such that `Pco p_ = init;` is a valid expression.
* The corresponding semantics is a valid expression.

[heading Invariants]
* `result_of_indirect<Pco, _Stg>::type` is a /POD/ type if and only if `Pco` is a /POD/ type.

[heading Example]
[code_indirect_example]

[heading See also]
* __BOOST_INDIRECT_ITERATOR__

[endsect]




[section lazy]

[heading Description]
__BOOST_PHOENIX__ is able to make a lambda expression without a "bind function".
`lazy` turns a __BINDABLE_OBJECT__ into such one which can be used with __BOOST_LAMBDA__.

[heading Header]
* `<pstade/egg/lazy.hpp>`

[heading Model of]
* __STATIC_FUNCTION_OBJECT__

[heading Notation]
* `fc(b)` is an object of `result_of_lazy<_typeof(b)>::type` initialized using `b` or the initializer.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`result_of_lazy<Bin>::type`]
        [A __BINDABLE__ __DEFERRED_CALLABLE_OBJECT__ type]
    ]
    [
        [`PSTADE_EGG_LAZY_L init PSTADE_EGG_LAZY_R`]
        [A braced initializer of `result_of_lazy<Bin>::type`]
    ]
    [
        [`fc(b)(a1,...,aN)`]
        [`boost::lambda::bind(b, _arg_list(a, by_cref))`]
    ]
    [
        [`lazy(b)`]
        [`fc(b)`]
    ]
]

[heading Preconditions]
* `0 <= N && N <= 9`.
* `Bin` is __BINDABLE_OBJECT__ type.
* There is a `b_` such that `Bin b_ = init;` is a valid expression.
* The corresponding semantics is a valid expression.

[heading Invariants]
* `result_of_lazy<Bin>::type` is a /POD/ type if and only if `Bin` is a /POD/ type.

[heading Example]
[code_lazy_example]

[heading See also]
* __BOOST_PHOENIX__
* __BOOST_LAMBDA__

[endsect]




[section memoize]

[heading Description]
`memoize` stores the result of function for later reuse.

[heading Header]
* `<pstade/egg/memoize.hpp>`

[heading Model of]
* __STATIC_FUNCTION_OBJECT__

[heading Notation]
* `fixed` is an unspecified unary __FUNCTION_OBJECT__ which represents `_dco` itself.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`memoize(_dco)`]
        [A __BINDABLE__ __DEFERRED_CALLABLE_OBJECT__]
    ]
    [
        [`memoize(_dco)(a1)`]
        [`_dco(fixed, _arg_list(_arg_list(a, by_cref), by_value))`]
    ]
]

[note `memoize` can't offer the way to /statically initialize/ a memoized __FUNCTION_OBJECT__.]

[heading Preconditions]
* A __FUNCTION_OBJECT__ returned from `memoize(_dco)` must always be called with the same type arguments.
* `_typeof(a1)` is __ASSIGNABLE__, __COPY_CONSTRUCTIBLE__ and __EQUALITY_COMPARABLE__.
* `_decltype( _dco(fixed, _arg_list(a, by_cref)) )` is __COPY_CONSTRUCTIBLE__.
* The corresponding semantics is a valid expression.

[heading Example]
[code_memoize_example]

[heading See also]
* [@http://en.wikipedia.org/wiki/Y_combinator Fixed point combinator]

[endsect]




[section mono]

[heading Description]
`mono` turns a base __FUNCTION_OBJECT__ into "monomorphic" one which contains no templates.

[heading Header]
* `<pstade/egg/mono.hpp>`

[heading Model of]
* ...

[heading Notation]
* `fc(f)` is an object of `result_of_mono<_typeof(f), Seq, R>::type` initialized using `f` or the initializer.
* `N` is `boost::mpl::size<Seq>::value`.
* `arglist` is `b1,...,bN` such that `boost::mpl::at_c<Seq, 0>::type b1 = a1; ... boost::mpl::at_c<Seq, N-1> bN = aN;`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`result_of_mono<Fun, Seq, R = _default>::type`]
        [A __BINDABLE__ __DEFERRED_CALLABLE_OBJECT__ type]
    ]
    [
        [`PSTADE_EGG_MONO_L init PSTADE_EGG_MONO_R`]
        [A braced initializer of `result_of_mono<Fun, Seq, R>::type`]
    ]
    [
        [`fc(f)(a1,...,aN)`]
        [`f(arglist)`]
    ]
    [
        [`X_mono<Seq, R = _default>`]
        [A __BINDABLE__ __DEFERRED_CALLABLE_OBJECT__ type]
    ]
    [
        [`X_mono<Seq, R>()(fun)`]
        [`fc(fun)`]
    ]
    [
        [`egg::mono<Seq>`]
        [`X_mono<Seq>()`]
    ]
]

[heading Preconditions]
* `Fun` is a __FUNCTION_OBJECT__ type.
* `Seq` is an __MPL_FORWARD_SEQUENCE__.
* There is a `f_` such that `Fun f_ = init;` is a valid expression.
* If `R` is `_default`, `Fun` is a __DEFERRED_CALLABLE_OBJECT__ type; `R` specifies a return type of `Fun`, otherwise.
* The corresponding semantics is a valid expression.

[heading Invariants]
* `result_of_mono<Fun, Seq, R>::type` is a /POD/ type if and only if `Fun` is a /POD/ type.
* `result_of_mono<Fun, Seq, R>::type` is __SGI_ADAPTABLE__ if and only if `N` is `1` or `2`.

[heading Example]
[code_mono_example]

[heading See also]
* __BOOST_FUSION_FUNCTIONAL__
* __SGI_ADAPTABLE__

[endsect]




[section pipable]

[heading Description]
`pipable` adapts a base __FUNCTION_OBJECT__ into __PIPABLE_OBJECT__.

[heading Header]
* `<pstade/egg/pipable.hpp>`

[heading Model of]
* __STATIC_FUNCTION_OBJECT__

[heading Notation]
* `fc(d, _Stg)` is an object of `result_of_pipable<_typeof(d), _Stg>::type` initialized using `d` or the initializer.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`result_of_pipable<_Dco, _Stg = _default>::type`]
        [A __BINDABLE__ __PIPABLE_OBJECT__ type]
    ]
    [
        [`PSTADE_EGG_PIPABLE_L init PSTADE_EGG_PIPABLE_R`]
        [A braced initializer of `result_of_pipable<_Dco, _Stg>::type`]
    ]
    [
        [`a|fc(d, _Stg)(b1,...,bN)`]
        [`d(_arg_list(a, by_perfect), _arg_list(b, _Stg))`]
    ]
    [
        [`pipable(d)`]
        [`fc(d, _default)`]
    ]
]

[heading Preconditions]
* `1 <= N && N <= _TUPLE_MAX_SIZE-1`.
* There is a `d_` such that `_Dco d_ = init;` is a valid expression.
* The corresponding semantics is a valid expression.

[heading Invariants]
* `result_of_pipable<_Dco, _Stg>::type` is a /POD/ type if and only if `_Dco` is a /POD/ type.

[heading Example]
[code_pipable_example]

[note A pipable __FUNCTION_OBJECT__ can be overloaded with different arity, whereas __AUXILIARY_CLASS_INTERFACE__ cannot.]

[heading See also]
* __EGG_AUXILIARY__

[endsect]




[section ret]

[heading Description]
`ret` is akin to `boost::lambda::ret` in the context of __BOOST_RESULT_OF__.

[heading Header]
* `<pstade/egg/ret.hpp>`

[heading Model of]
* ...

[heading Notation]
* `fc(f, R, _Stg)` is an object of `result_of_ret<_typeof(f), R, _Stg>::type` initialized using `f` or the initializer.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`result_of_ret<Fun, R = _default, _Stg = _default>::type`]
        [A __BINDABLE__ __DEFERRED_CALLABLE_OBJECT__ type]
    ]
    [
        [`PSTADE_EGG_RET_L init PSTADE_EGG_RET_R`]
        [A braced initializer of `result_of_ret<Fun, R, _Stg>::type`]
    ]
    [
        [`fc(f, R, _Stg)(a1,...,aN)`]
        [`f(_arg_list(a, _Stg))`]
    ]
    [
        [`X_ret<R>`]
        [A __BINDABLE__ __DEFERRED_CALLABLE_OBJECT__ type]
    ]
    [
        [`X_ret<R>()(f)`]
        [`fc(f)(R, _default)`]
    ]
    [
        [`egg::ret<R>`]
        [`X_ret<R>()`]
    ]
]

[heading Preconditions]
* `Fun` is a __FUNCTION_OBJECT__ type.
* `Fun` is a __DEFERRED_CALLABLE_OBJECT__ type if `R` is `_default`.
* There is a `f_` such that `Fun f_ = init;` is a valid expression.
* The corresponding semantics is a valid expression.

[heading Invariants]
* `result_of_ret<Fun, R, _Stg>::type` is a /POD/ type if and only if `Fun` is a /POD/ type.

[heading Example]
...

[heading See also]
* ...

[endsect]




[section perfect]

[heading Description]
`perfect` performs the "perfect forwarding".

[heading Header]
* `<pstade/egg/perfect.hpp>`

[heading Model of]
* __STATIC_FUNCTION_OBJECT__

[heading Notation]
* `fc(d)` is an object of `result_of_perfect<_typeof(d)>::type` initialized using `d` or the initializer.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`result_of_perfect<_Dco>::type`]
        [A __BINDABLE__ __DEFERRED_CALLABLE_OBJECT__ type]
    ]
    [
        [`PSTADE_EGG_PERFECT_L init PSTADE_EGG_PERFECT_R`]
        [A braced initializer of `result_of_perfect<_Dco>::type`]
    ]
    [
        [`fc(d)(a1,...,aN)`]
        [`d(_arg_list(a, by_perfect))`]
    ]
    [
        [`perfect(d)`]
        [`fc(d)`]
    ]
]

[heading Preconditions]
* There is a `d_` such that `_Dco d_ = init;` is a valid expression.
* The corresponding semantics is a valid expression.

[heading Invariants]
* `result_of_perfect<_Dco>::type` is a /POD/ type if and only if `_Dco` is a /POD/ type.

[heading Example]
    BOOST_CHECK( perfect(boost::lambda::_1)(12) == 12 );

[heading See also]
* ...

[endsect]




[section tagged]

[heading Description]
`tagged` makes a new __FUNCTION_OBJECT__ type from the same __FUNCTION_OBJECT__ type.

[heading Header]
* `<pstade/egg/tagged.hpp>`

[heading Model of]
* ...

[heading Notation]
* `fc(d, Tag, _Stg)` is an object of `result_of_tagged<_typeof(d), Tag, _Stg>::type` initialized using `d` or the initializer.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`result_of_tagged<_Dco, Tag, _Stg = _default>::type`]
        [A __BINDABLE__ __DEFERRED_CALLABLE_OBJECT__ type]
    ]
    [
        [`PSTADE_EGG_TAGGED_L init PSTADE_EGG_TAGGED_R`]
        [A braced initializer of `result_of_tagged<_Dco, Tag, _Stg>::type`]
    ]
    [
        [`fc(d, Tag, _Stg)(a1,...,aN)`]
        [`d(_arg_list(a, _Stg))`]
    ]
    [
        [`tag_of<_typeof(fc(d, Tag, _Stg))>::type`]
        [`Tag`]
    ]
]

[heading Preconditions]
* `Tag` is any (possibly incomplete) type.
* There is a `d_` such that `_Dco d_ = init;` is a valid expression.
* The corresponding semantics is a valid expression.

[heading Invariants]
* `result_of_tagged<_Dco, Tag, _Stg>::type` is a /POD/ type if and only if `_Dco` is a /POD/ type.
* `result_of_tagged<_Dco, Tag1, _Stg>::type` is the same type as `result_of_tagged<_Dco, Tag2, _Stg>::type` if and only if `Tag1` is the same type as `Tag2`.

[heading Example]
...

[heading See also]
* [@http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2141.html Strong Typedefs in C++09(Revisited)]

[endsect]




[endsect]
