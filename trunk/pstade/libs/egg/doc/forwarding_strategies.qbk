[section Forwarding Strategies]


A Forwarding Strategy is a type which has two associated imaginary operators
`_bytag_at`, `_arg_list` and `_meta_arg_list`.
If the first argument of `arg_list` or `_meta_arg_list` is not a sequence,
assume it is "one element" sequence.
Egg components use `by_perfect` when you omit or specify `_default` for strategy parameter.

This section uses the following notation.

[table
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`_arg(a)`]
        [`_typeof(a) const` if `a` is a rvalue; `boost::remove_reference<_decltype(a)>::type` otherwise.]
    ]
    [
        [`_ref(a)`]
        [`static_cast<_arg(a) &>(a)`]
    ]
    [
        [`_cref(a)`]
        [`static_cast<_arg(a) const &>(a)`]
    ]
    [
        [`_val(a)`]
        [`const_cast<V &>(static_cast<V const &>(boost::implicit_cast<V>(a)))`]
    ]
    [
        [`_rval(a)`]
        [`boost::implicit_cast<V>(a)`]
    ]
]
, where `V` is `boost::remove_cv<boost::decay<_typeof(a)>::type>::type`.

[note `_val(a)` copies `a` and turns it into mutable lvalue in order to work around __FORWARDING_PROBLEM__.
      You shouldn't take reference in __LITTLE_FUNCTION__ `call` with `by_value` strategy, unless writing generic one. ]


[import ../example/my_perfect.cpp]




[section Argument list]

[heading Description]
Egg defines the following imaginary operators for its documentation.

[heading Header]
* ...

[heading Notation]
* `K` is length of `a`.
* `safe_arg(a, _Stg, K, I)` is `_rval(aI)` if `_bytag_at(_Stg, K, I)` is `by_value`, `_arg_list(aI, _Stg)` otherwise.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`_bytag_at(_Stg, K, I)`]
        [See each section of `_Stg`.]
    ]
    [
        [`_arg_list(a, _Stg)`]
        [See each section of `_Stg`.]
    ]
    [
        [`_arg_list(a, _default)`]
        [`_arg_list(a, by_perfect)`]
    ]
    [
        [`_meta_arg_list(a, _Stg)`]
        [See each section of `_Stg`.]
    ]
    [
        [`_meta_arg_list(a, _default)`]
        [`_meta_arg_list(a, by_perfect)`]
    ]
    [
        [`_safe_arg_list(a, _Stg)`]
        [`safe_arg(a, _Stg, K, 0),...,safe_arg(a, _Stg, K, K-1)`]
    ]
]

[important `_arg_list` and `_safe_arg_list` has slightly different semantics.
           Put simply, in case of __EGG_FUNCTION_ADAPTORS__ with `by_value`,
           a base __FUNCTION_OBJECT__ too must take arguments by value or const reference. ]

[heading Preconditions]
* The corresponding semantics is a valid expression.

[heading Example]
...

[heading See also]
* __FORWARDING_PROBLEM__

[endsect]




[section by_perfect]

[heading Description]
Egg performs the "perfect forwarding" by default.

[heading Header]
* `<pstade/egg/by_perfect.hpp>`

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`_bytag_at(by_perfect, K, I)`]
        [`by_perfect`]
    ]
    [
        [`_arg_list(a, by_perfect)`]
        [`_arg(a1),...,_arg(aK)`]
    ]
    [
        [`_meta_arg_list(a, by_perfect)`]
        [`_ref(a1),...,_ref(aK)`]
    ]
    [
        [`function<_Lit, by_perfect>`]
        [See __EGG_FUNCTION__.]
    ]
]

[heading Preconditions]
* `0 <= K && K <= PSTADE_EGG_MAX_ARITY`.

[heading Example]
* `_meta_arg_list(a, by_perfect)` is `int,const int,int const` if `a` is `i,3,ci`, where `i` is non-const lvalue and `ci` is a const lvalue.

[heading See also]
* __FORWARDING_PROBLEM__

[endsect]




[section by_ref]

[heading Description]
`by_ref` offers a large arity, but can't take a non-const rvalue.

[heading Header]
* `<pstade/egg/by_ref.hpp>`

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`_bytag_at(by_ref, K, I)`]
        [`by_ref`]
    ]
    [
        [`_arg_list(a, by_ref)`]
        [`_arg(a1),...,_arg(aK)`]
    ]
    [
        [`_meta_arg_list(a, by_ref)`]
        [`_ref(a1),...,_ref(aK)`]
    ]
    [
        [`function<_Lit, by_ref>`]
        [See __EGG_FUNCTION__.]
    ]
]

[heading Preconditions]
* `0 <= K && K <= PSTADE_EGG_MAX_LINEAR_ARITY`.
* `aI` is not a rvalue.

[heading Example]
* `_meta_arg_list(a, by_ref)` is `int,const int,int const` if `a` is `i,ci,ci`, where `i` is non-const lvalue and `ci` is a const lvalue.

[heading See also]
* __FORWARDING_PROBLEM__

[endsect]




[section by_cref]

[heading Description]
`by_cref` takes the arguments by /const reference/.

[heading Header]
* `<pstade/egg/by_cref.hpp>`

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`_bytag_at(by_cref, K, I)`]
        [`by_cref`]
    ]
    [
        [`_arg_list(a, by_cref)`]
        [`_cref(a1),...,_cref(aK)`]
    ]
    [
        [`_meta_arg_list(a, by_cref)`]
        [`_typeof(a1) const,...,_typeof(aK) const`]
    ]
    [
        [`function<_Lit, by_cref>`]
        [See __EGG_FUNCTION__.]
    ]
]

[heading Preconditions]
* `0 <= K && K <= PSTADE_EGG_MAX_LINEAR_ARITY`.

[heading Example]
* `_meta_arg_list(a, by_cref)` is `int const,const int,int const` if `a` is `i,ci,ci`, where `i` is non-const lvalue and `ci` is a const lvalue.

[heading See also]
* __FORWARDING_PROBLEM__

[endsect]




[section by_value]

[heading Description]
`by_value` takes the arguments by value, which means that it can take a temporary "movable type" like `std::auto_ptr<>`.

[heading Header]
* `<pstade/egg/by_value.hpp>`

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`_bytag_at(by_value, K, I)`]
        [`by_value`]
    ]
    [
        [`_arg_list(a, by_value)`]
        [`_val(a1),...,_val(aK)`]
    ]
    [
        [`_meta_arg_list(a, by_value)`]
        [`_typeof(a1),...,_typeof(aK)`]
    ]
    [
        [`function<_Lit, by_value>`]
        [See __EGG_FUNCTION__.]
    ]
]

[heading Preconditions]
* `0 <= K && K <= PSTADE_EGG_MAX_LINEAR_ARITY`.

[heading Example]
* `_meta_arg_list(a, by_value)` is `int,int,int` if `a` is `i,3,ci`, where `i` is non-const lvalue and `ci` is a const lvalue.

[heading See also]
* __FORWARDING_PROBLEM__

[endsect]




[section Determining nullary return types]

[heading Description]
C++ instantiates the declarations of non-dependent member function templates, so that
some __EGG_FUNCTION_BUILDERS__ and __EGG_FUNCTION_ADAPTORS__ require a special workaround.
Here an imaginary operator is defined for the documentation.

[heading Valid expressions and semantics]
* `_decltype_r0(R0, expr)` is defined by the following:
    * If `R0` is `_default`, it is a valid expression and returns an unspecified type .
    * If `R0` is `use_nullary_result`,
        * If `_decltype(expr)` is a valid expression, it is a valid expression and returns `_decltype(expr)`.
        * Otherwise, it is not a valid expression.
    * Otherwise, `R0`.

[note __BOOST_RESULT_OF__ too offers a special workaround:
      A nullary callable `F` must specialize `result_of<F()>`. `result_of<F()>::type` is `void` otherwise.
      Unfortunately, that isn't generic workaround. Consider `f(g(), h())` such that `f` isn't a 2ary function. ]

[heading See also]
* __BOOST_RESULT_OF__

[endsect]




[section Writing your strategy]

[import ../test/my_strategy.cpp]

[heading Description]
The predefined strategies, `by_perfect` etc, may be too simple to meet your requirements.
Egg provides the uniform way to define your own strategy.

[heading Header]
* `<pstade/egg/function_extension.hpp>`

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`#include PSTADE_EGG_FUNCTION_PREAMBLE()`]
        [See below.]
    ]
    [
        [`PSTADE_EGG_DEDUCED_CONST(A)`]
        [`A const`]
    ]
    [
        [`apply_little<_Lit, A1,...,AK>`]
        [`_Lit::apply<A1,...,AK>`]
    ]
    [
        [`egg::call_little<R>(_lit, a1,...,aK)`]
        [`_lit.call<R>(a1,...,aK)`]
    ]
    [
        [`by_perfect`, `by_ref`, `by_cref`, and `by_value`]
        [These can be used as return type of strategy tag.]
    ]
]

[heading Preconditions]
* `0 <= K && K <= PSTADE_EGG_MAX_LINEAR_ARITY`.

[heading Your strategy tag]
A strategy tag is a __METAFUNCTION_CLASS__ which takes itself, arity and index, then returns `_Bytag`.
[code_my_strategy_tag]

[heading Specializing `function<>`]
Using your strategy tag, `function<>` template can be specialized.
`PSTADE_EGG_FUNCTION_PREAMBLE()` must be placed in first,
which automagically defines nested typedefs `little_type`, `strategy_type`, and `result` etc.
[code_my_strategy_function]
For some compiler bugs, you can call neither `result` template nor `_Lit::call` directly.
You have to use `apply_little` and `call_little` instead.
Moreover, if you want to support buggy msvc-7.1, `PSTADE_EGG_DEDUCED_CONST` instead of `const` must be used.
Also notice that `_Lit` is /cv-qualifier/ sensitive.

[heading Your strategy completed]
Now `function<>` with your strategy has become the __MAJOR_FUNCTION_OBJECT__ type.
Let's look into the new valid expressions.

[heading Notation]
* `StgTag` is a __METAFUNCTION_CLASS__ which you have defined.
* `StgTag_` is (possibly cv-qualified) `StgTag`.

[heading New valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`_bytag_at(StgTag, K, I)`]
        [`StgTag_::apply< StgTag_, _mpl::int_<K>, _mpl::int_<I> >::type`]
    ]
    [
        [`_arg_list(a, StgTag)`]
        [`_arg_list(a1, _bytag_at(StgTag, K, 0)),...,_arg_list(aK, _bytag_at(StgTag, K, K-1))`]
    ]

    [
        [`_meta_arg_list(a, StgTag)`]
        [`_meta_arg_list(a1, _bytag_at(StgTag, K, 0)),...,_meta_arg_list(aK, _bytag_at(StgTag, K, K-1))`]
    ]
    [
        [`function<_Lit, StgTag>`]
        [See __EGG_FUNCTION__.]
    ]
]

[heading See also]
* __FORWARDING_PROBLEM__
* __BOOST_RESULT_OF__

[endsect]




[/

[section PERFECT_STRATEGY]

[heading Description]
When you require a perfect forwarding strategy to support more arity than `PSTADE_EGG_MAX_ARITY`,
you can define your own forwarding strategy using `PSTADE_EGG_PERFECT_STRATEGY` macro.

[heading Header]
* `<pstade/egg/perfect_strategy.hpp>`

[heading Notation]
* `K` is any element of `AritySeq`.

[heading Valid expressions]
[table 
    [
        [[*Valid expression]]
        [[*Semantics]]
    ]
    [
        [`_arg_list(a, Tag)`]
        [`_arg(a1),...,_arg(aK)`]
    ]
    [
        [`_meta_arg_list(a, Tag)`]
        [`_ref(a1),...,_ref(aK)`]
    ]
    [
        [`function<_Lit, Tag>`]
        [See __EGG_FUNCTION__.]
    ]
]

[heading Preconditions]
* `Tag` is a type.
* `AritySeq` is a __BOOST_PREPROCESSOR__ sequence of numbers.
* `PSTADE_EGG_PERFECT_STRATEGY(Tag, AritySeq)` is placed in the global namespace.

[heading Example]
[code_my_perfect]

Now your strategy tag can be passed to `function<>` or __EGG_FUNCTION_ADAPTORS__:
[code_my_perfect_pipable]

[heading See also]
* __FORWARDING_PROBLEM__

[endsect]

]




[endsect]
